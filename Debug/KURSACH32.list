
KURSACH32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080077ac  080077ac  000177ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a98  08007a98  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007aa0  08007aa0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007aa0  08007aa0  00017aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007aa4  08007aa4  00017aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab0  20000084  08007b2c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b34  08007b2c  00020b34  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b14c  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf9  00000000  00000000  0002b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002d900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019301  00000000  00000000  0002e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c3a4  00000000  00000000  00047551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b8f5  00000000  00000000  000538f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df1ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003044  00000000  00000000  000df240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007794 	.word	0x08007794

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08007794 	.word	0x08007794

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cdrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	1c10      	adds	r0, r2, #0
 8000238:	4662      	mov	r2, ip
 800023a:	468c      	mov	ip, r1
 800023c:	1c19      	adds	r1, r3, #0
 800023e:	4663      	mov	r3, ip
 8000240:	e000      	b.n	8000244 <__aeabi_cdcmpeq>
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_cdcmpeq>:
 8000244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000246:	f001 fdd5 	bl	8001df4 <__ledf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	d401      	bmi.n	8000252 <__aeabi_cdcmpeq+0xe>
 800024e:	2100      	movs	r1, #0
 8000250:	42c8      	cmn	r0, r1
 8000252:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000254 <__aeabi_dcmpeq>:
 8000254:	b510      	push	{r4, lr}
 8000256:	f001 fd1f 	bl	8001c98 <__eqdf2>
 800025a:	4240      	negs	r0, r0
 800025c:	3001      	adds	r0, #1
 800025e:	bd10      	pop	{r4, pc}

08000260 <__aeabi_dcmplt>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fdc7 	bl	8001df4 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	db01      	blt.n	800026e <__aeabi_dcmplt+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmple>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fdbd 	bl	8001df4 <__ledf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dd01      	ble.n	8000282 <__aeabi_dcmple+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpgt>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fd41 	bl	8001d10 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	dc01      	bgt.n	8000296 <__aeabi_dcmpgt+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_dcmpge>:
 800029c:	b510      	push	{r4, lr}
 800029e:	f001 fd37 	bl	8001d10 <__gedf2>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	da01      	bge.n	80002aa <__aeabi_dcmpge+0xe>
 80002a6:	2000      	movs	r0, #0
 80002a8:	bd10      	pop	{r4, pc}
 80002aa:	2001      	movs	r0, #1
 80002ac:	bd10      	pop	{r4, pc}
 80002ae:	46c0      	nop			; (mov r8, r8)

080002b0 <__aeabi_cfrcmple>:
 80002b0:	4684      	mov	ip, r0
 80002b2:	1c08      	adds	r0, r1, #0
 80002b4:	4661      	mov	r1, ip
 80002b6:	e7ff      	b.n	80002b8 <__aeabi_cfcmpeq>

080002b8 <__aeabi_cfcmpeq>:
 80002b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002ba:	f000 fb13 	bl	80008e4 <__lesf2>
 80002be:	2800      	cmp	r0, #0
 80002c0:	d401      	bmi.n	80002c6 <__aeabi_cfcmpeq+0xe>
 80002c2:	2100      	movs	r1, #0
 80002c4:	42c8      	cmn	r0, r1
 80002c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002c8 <__aeabi_fcmpeq>:
 80002c8:	b510      	push	{r4, lr}
 80002ca:	f000 fa97 	bl	80007fc <__eqsf2>
 80002ce:	4240      	negs	r0, r0
 80002d0:	3001      	adds	r0, #1
 80002d2:	bd10      	pop	{r4, pc}

080002d4 <__aeabi_fcmplt>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb05 	bl	80008e4 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	db01      	blt.n	80002e2 <__aeabi_fcmplt+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmple>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fafb 	bl	80008e4 <__lesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dd01      	ble.n	80002f6 <__aeabi_fcmple+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpgt>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 faa5 	bl	800084c <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	dc01      	bgt.n	800030a <__aeabi_fcmpgt+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fcmpge>:
 8000310:	b510      	push	{r4, lr}
 8000312:	f000 fa9b 	bl	800084c <__gesf2>
 8000316:	2800      	cmp	r0, #0
 8000318:	da01      	bge.n	800031e <__aeabi_fcmpge+0xe>
 800031a:	2000      	movs	r0, #0
 800031c:	bd10      	pop	{r4, pc}
 800031e:	2001      	movs	r0, #1
 8000320:	bd10      	pop	{r4, pc}
 8000322:	46c0      	nop			; (mov r8, r8)

08000324 <__aeabi_uldivmod>:
 8000324:	2b00      	cmp	r3, #0
 8000326:	d111      	bne.n	800034c <__aeabi_uldivmod+0x28>
 8000328:	2a00      	cmp	r2, #0
 800032a:	d10f      	bne.n	800034c <__aeabi_uldivmod+0x28>
 800032c:	2900      	cmp	r1, #0
 800032e:	d100      	bne.n	8000332 <__aeabi_uldivmod+0xe>
 8000330:	2800      	cmp	r0, #0
 8000332:	d002      	beq.n	800033a <__aeabi_uldivmod+0x16>
 8000334:	2100      	movs	r1, #0
 8000336:	43c9      	mvns	r1, r1
 8000338:	1c08      	adds	r0, r1, #0
 800033a:	b407      	push	{r0, r1, r2}
 800033c:	4802      	ldr	r0, [pc, #8]	; (8000348 <__aeabi_uldivmod+0x24>)
 800033e:	a102      	add	r1, pc, #8	; (adr r1, 8000348 <__aeabi_uldivmod+0x24>)
 8000340:	1840      	adds	r0, r0, r1
 8000342:	9002      	str	r0, [sp, #8]
 8000344:	bd03      	pop	{r0, r1, pc}
 8000346:	46c0      	nop			; (mov r8, r8)
 8000348:	fffffee9 	.word	0xfffffee9
 800034c:	b403      	push	{r0, r1}
 800034e:	4668      	mov	r0, sp
 8000350:	b501      	push	{r0, lr}
 8000352:	9802      	ldr	r0, [sp, #8]
 8000354:	f000 f87a 	bl	800044c <__udivmoddi4>
 8000358:	9b01      	ldr	r3, [sp, #4]
 800035a:	469e      	mov	lr, r3
 800035c:	b002      	add	sp, #8
 800035e:	bc0c      	pop	{r2, r3}
 8000360:	4770      	bx	lr
 8000362:	46c0      	nop			; (mov r8, r8)

08000364 <__aeabi_lmul>:
 8000364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000366:	0415      	lsls	r5, r2, #16
 8000368:	0c2d      	lsrs	r5, r5, #16
 800036a:	000f      	movs	r7, r1
 800036c:	0001      	movs	r1, r0
 800036e:	002e      	movs	r6, r5
 8000370:	46c6      	mov	lr, r8
 8000372:	4684      	mov	ip, r0
 8000374:	0400      	lsls	r0, r0, #16
 8000376:	0c14      	lsrs	r4, r2, #16
 8000378:	0c00      	lsrs	r0, r0, #16
 800037a:	0c09      	lsrs	r1, r1, #16
 800037c:	4346      	muls	r6, r0
 800037e:	434d      	muls	r5, r1
 8000380:	4360      	muls	r0, r4
 8000382:	4361      	muls	r1, r4
 8000384:	1940      	adds	r0, r0, r5
 8000386:	0c34      	lsrs	r4, r6, #16
 8000388:	1824      	adds	r4, r4, r0
 800038a:	b500      	push	{lr}
 800038c:	42a5      	cmp	r5, r4
 800038e:	d903      	bls.n	8000398 <__aeabi_lmul+0x34>
 8000390:	2080      	movs	r0, #128	; 0x80
 8000392:	0240      	lsls	r0, r0, #9
 8000394:	4680      	mov	r8, r0
 8000396:	4441      	add	r1, r8
 8000398:	0c25      	lsrs	r5, r4, #16
 800039a:	186d      	adds	r5, r5, r1
 800039c:	4661      	mov	r1, ip
 800039e:	4359      	muls	r1, r3
 80003a0:	437a      	muls	r2, r7
 80003a2:	0430      	lsls	r0, r6, #16
 80003a4:	1949      	adds	r1, r1, r5
 80003a6:	0424      	lsls	r4, r4, #16
 80003a8:	0c00      	lsrs	r0, r0, #16
 80003aa:	1820      	adds	r0, r4, r0
 80003ac:	1889      	adds	r1, r1, r2
 80003ae:	bc80      	pop	{r7}
 80003b0:	46b8      	mov	r8, r7
 80003b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080003b4 <__aeabi_f2uiz>:
 80003b4:	219e      	movs	r1, #158	; 0x9e
 80003b6:	b510      	push	{r4, lr}
 80003b8:	05c9      	lsls	r1, r1, #23
 80003ba:	1c04      	adds	r4, r0, #0
 80003bc:	f7ff ffa8 	bl	8000310 <__aeabi_fcmpge>
 80003c0:	2800      	cmp	r0, #0
 80003c2:	d103      	bne.n	80003cc <__aeabi_f2uiz+0x18>
 80003c4:	1c20      	adds	r0, r4, #0
 80003c6:	f000 fdb9 	bl	8000f3c <__aeabi_f2iz>
 80003ca:	bd10      	pop	{r4, pc}
 80003cc:	219e      	movs	r1, #158	; 0x9e
 80003ce:	1c20      	adds	r0, r4, #0
 80003d0:	05c9      	lsls	r1, r1, #23
 80003d2:	f000 fbeb 	bl	8000bac <__aeabi_fsub>
 80003d6:	f000 fdb1 	bl	8000f3c <__aeabi_f2iz>
 80003da:	2380      	movs	r3, #128	; 0x80
 80003dc:	061b      	lsls	r3, r3, #24
 80003de:	469c      	mov	ip, r3
 80003e0:	4460      	add	r0, ip
 80003e2:	e7f2      	b.n	80003ca <__aeabi_f2uiz+0x16>

080003e4 <__aeabi_d2uiz>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	2200      	movs	r2, #0
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <__aeabi_d2uiz+0x38>)
 80003ea:	0004      	movs	r4, r0
 80003ec:	000d      	movs	r5, r1
 80003ee:	f7ff ff55 	bl	800029c <__aeabi_dcmpge>
 80003f2:	2800      	cmp	r0, #0
 80003f4:	d104      	bne.n	8000400 <__aeabi_d2uiz+0x1c>
 80003f6:	0020      	movs	r0, r4
 80003f8:	0029      	movs	r1, r5
 80003fa:	f002 fb87 	bl	8002b0c <__aeabi_d2iz>
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <__aeabi_d2uiz+0x38>)
 8000402:	2200      	movs	r2, #0
 8000404:	0020      	movs	r0, r4
 8000406:	0029      	movs	r1, r5
 8000408:	f001 ffd0 	bl	80023ac <__aeabi_dsub>
 800040c:	f002 fb7e 	bl	8002b0c <__aeabi_d2iz>
 8000410:	2380      	movs	r3, #128	; 0x80
 8000412:	061b      	lsls	r3, r3, #24
 8000414:	469c      	mov	ip, r3
 8000416:	4460      	add	r0, ip
 8000418:	e7f1      	b.n	80003fe <__aeabi_d2uiz+0x1a>
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	41e00000 	.word	0x41e00000

08000420 <__aeabi_ul2d>:
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	0006      	movs	r6, r0
 8000424:	0008      	movs	r0, r1
 8000426:	f002 fba7 	bl	8002b78 <__aeabi_ui2d>
 800042a:	2200      	movs	r2, #0
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <__aeabi_ul2d+0x28>)
 800042e:	f001 fd51 	bl	8001ed4 <__aeabi_dmul>
 8000432:	000d      	movs	r5, r1
 8000434:	0004      	movs	r4, r0
 8000436:	0030      	movs	r0, r6
 8000438:	f002 fb9e 	bl	8002b78 <__aeabi_ui2d>
 800043c:	002b      	movs	r3, r5
 800043e:	0022      	movs	r2, r4
 8000440:	f000 fdd8 	bl	8000ff4 <__aeabi_dadd>
 8000444:	bd70      	pop	{r4, r5, r6, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	41f00000 	.word	0x41f00000

0800044c <__udivmoddi4>:
 800044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044e:	4657      	mov	r7, sl
 8000450:	464e      	mov	r6, r9
 8000452:	4645      	mov	r5, r8
 8000454:	46de      	mov	lr, fp
 8000456:	b5e0      	push	{r5, r6, r7, lr}
 8000458:	0004      	movs	r4, r0
 800045a:	000d      	movs	r5, r1
 800045c:	4692      	mov	sl, r2
 800045e:	4699      	mov	r9, r3
 8000460:	b083      	sub	sp, #12
 8000462:	428b      	cmp	r3, r1
 8000464:	d830      	bhi.n	80004c8 <__udivmoddi4+0x7c>
 8000466:	d02d      	beq.n	80004c4 <__udivmoddi4+0x78>
 8000468:	4649      	mov	r1, r9
 800046a:	4650      	mov	r0, sl
 800046c:	f002 fc10 	bl	8002c90 <__clzdi2>
 8000470:	0029      	movs	r1, r5
 8000472:	0006      	movs	r6, r0
 8000474:	0020      	movs	r0, r4
 8000476:	f002 fc0b 	bl	8002c90 <__clzdi2>
 800047a:	1a33      	subs	r3, r6, r0
 800047c:	4698      	mov	r8, r3
 800047e:	3b20      	subs	r3, #32
 8000480:	469b      	mov	fp, r3
 8000482:	d433      	bmi.n	80004ec <__udivmoddi4+0xa0>
 8000484:	465a      	mov	r2, fp
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	4642      	mov	r2, r8
 800048c:	001f      	movs	r7, r3
 800048e:	4653      	mov	r3, sl
 8000490:	4093      	lsls	r3, r2
 8000492:	001e      	movs	r6, r3
 8000494:	42af      	cmp	r7, r5
 8000496:	d83a      	bhi.n	800050e <__udivmoddi4+0xc2>
 8000498:	42af      	cmp	r7, r5
 800049a:	d100      	bne.n	800049e <__udivmoddi4+0x52>
 800049c:	e078      	b.n	8000590 <__udivmoddi4+0x144>
 800049e:	465b      	mov	r3, fp
 80004a0:	1ba4      	subs	r4, r4, r6
 80004a2:	41bd      	sbcs	r5, r7
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	da00      	bge.n	80004aa <__udivmoddi4+0x5e>
 80004a8:	e075      	b.n	8000596 <__udivmoddi4+0x14a>
 80004aa:	2200      	movs	r2, #0
 80004ac:	2300      	movs	r3, #0
 80004ae:	9200      	str	r2, [sp, #0]
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	465a      	mov	r2, fp
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	4642      	mov	r2, r8
 80004be:	4093      	lsls	r3, r2
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	e028      	b.n	8000516 <__udivmoddi4+0xca>
 80004c4:	4282      	cmp	r2, r0
 80004c6:	d9cf      	bls.n	8000468 <__udivmoddi4+0x1c>
 80004c8:	2200      	movs	r2, #0
 80004ca:	2300      	movs	r3, #0
 80004cc:	9200      	str	r2, [sp, #0]
 80004ce:	9301      	str	r3, [sp, #4]
 80004d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <__udivmoddi4+0x8e>
 80004d6:	601c      	str	r4, [r3, #0]
 80004d8:	605d      	str	r5, [r3, #4]
 80004da:	9800      	ldr	r0, [sp, #0]
 80004dc:	9901      	ldr	r1, [sp, #4]
 80004de:	b003      	add	sp, #12
 80004e0:	bcf0      	pop	{r4, r5, r6, r7}
 80004e2:	46bb      	mov	fp, r7
 80004e4:	46b2      	mov	sl, r6
 80004e6:	46a9      	mov	r9, r5
 80004e8:	46a0      	mov	r8, r4
 80004ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ec:	4642      	mov	r2, r8
 80004ee:	2320      	movs	r3, #32
 80004f0:	1a9b      	subs	r3, r3, r2
 80004f2:	4652      	mov	r2, sl
 80004f4:	40da      	lsrs	r2, r3
 80004f6:	4641      	mov	r1, r8
 80004f8:	0013      	movs	r3, r2
 80004fa:	464a      	mov	r2, r9
 80004fc:	408a      	lsls	r2, r1
 80004fe:	0017      	movs	r7, r2
 8000500:	4642      	mov	r2, r8
 8000502:	431f      	orrs	r7, r3
 8000504:	4653      	mov	r3, sl
 8000506:	4093      	lsls	r3, r2
 8000508:	001e      	movs	r6, r3
 800050a:	42af      	cmp	r7, r5
 800050c:	d9c4      	bls.n	8000498 <__udivmoddi4+0x4c>
 800050e:	2200      	movs	r2, #0
 8000510:	2300      	movs	r3, #0
 8000512:	9200      	str	r2, [sp, #0]
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	4643      	mov	r3, r8
 8000518:	2b00      	cmp	r3, #0
 800051a:	d0d9      	beq.n	80004d0 <__udivmoddi4+0x84>
 800051c:	07fb      	lsls	r3, r7, #31
 800051e:	0872      	lsrs	r2, r6, #1
 8000520:	431a      	orrs	r2, r3
 8000522:	4646      	mov	r6, r8
 8000524:	087b      	lsrs	r3, r7, #1
 8000526:	e00e      	b.n	8000546 <__udivmoddi4+0xfa>
 8000528:	42ab      	cmp	r3, r5
 800052a:	d101      	bne.n	8000530 <__udivmoddi4+0xe4>
 800052c:	42a2      	cmp	r2, r4
 800052e:	d80c      	bhi.n	800054a <__udivmoddi4+0xfe>
 8000530:	1aa4      	subs	r4, r4, r2
 8000532:	419d      	sbcs	r5, r3
 8000534:	2001      	movs	r0, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2100      	movs	r1, #0
 800053c:	3e01      	subs	r6, #1
 800053e:	1824      	adds	r4, r4, r0
 8000540:	414d      	adcs	r5, r1
 8000542:	2e00      	cmp	r6, #0
 8000544:	d006      	beq.n	8000554 <__udivmoddi4+0x108>
 8000546:	42ab      	cmp	r3, r5
 8000548:	d9ee      	bls.n	8000528 <__udivmoddi4+0xdc>
 800054a:	3e01      	subs	r6, #1
 800054c:	1924      	adds	r4, r4, r4
 800054e:	416d      	adcs	r5, r5
 8000550:	2e00      	cmp	r6, #0
 8000552:	d1f8      	bne.n	8000546 <__udivmoddi4+0xfa>
 8000554:	9800      	ldr	r0, [sp, #0]
 8000556:	9901      	ldr	r1, [sp, #4]
 8000558:	465b      	mov	r3, fp
 800055a:	1900      	adds	r0, r0, r4
 800055c:	4169      	adcs	r1, r5
 800055e:	2b00      	cmp	r3, #0
 8000560:	db24      	blt.n	80005ac <__udivmoddi4+0x160>
 8000562:	002b      	movs	r3, r5
 8000564:	465a      	mov	r2, fp
 8000566:	4644      	mov	r4, r8
 8000568:	40d3      	lsrs	r3, r2
 800056a:	002a      	movs	r2, r5
 800056c:	40e2      	lsrs	r2, r4
 800056e:	001c      	movs	r4, r3
 8000570:	465b      	mov	r3, fp
 8000572:	0015      	movs	r5, r2
 8000574:	2b00      	cmp	r3, #0
 8000576:	db2a      	blt.n	80005ce <__udivmoddi4+0x182>
 8000578:	0026      	movs	r6, r4
 800057a:	409e      	lsls	r6, r3
 800057c:	0033      	movs	r3, r6
 800057e:	0026      	movs	r6, r4
 8000580:	4647      	mov	r7, r8
 8000582:	40be      	lsls	r6, r7
 8000584:	0032      	movs	r2, r6
 8000586:	1a80      	subs	r0, r0, r2
 8000588:	4199      	sbcs	r1, r3
 800058a:	9000      	str	r0, [sp, #0]
 800058c:	9101      	str	r1, [sp, #4]
 800058e:	e79f      	b.n	80004d0 <__udivmoddi4+0x84>
 8000590:	42a3      	cmp	r3, r4
 8000592:	d8bc      	bhi.n	800050e <__udivmoddi4+0xc2>
 8000594:	e783      	b.n	800049e <__udivmoddi4+0x52>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	2100      	movs	r1, #0
 800059c:	1a9b      	subs	r3, r3, r2
 800059e:	2200      	movs	r2, #0
 80005a0:	9100      	str	r1, [sp, #0]
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	40da      	lsrs	r2, r3
 80005a8:	9201      	str	r2, [sp, #4]
 80005aa:	e786      	b.n	80004ba <__udivmoddi4+0x6e>
 80005ac:	4642      	mov	r2, r8
 80005ae:	2320      	movs	r3, #32
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	002a      	movs	r2, r5
 80005b4:	4646      	mov	r6, r8
 80005b6:	409a      	lsls	r2, r3
 80005b8:	0023      	movs	r3, r4
 80005ba:	40f3      	lsrs	r3, r6
 80005bc:	4644      	mov	r4, r8
 80005be:	4313      	orrs	r3, r2
 80005c0:	002a      	movs	r2, r5
 80005c2:	40e2      	lsrs	r2, r4
 80005c4:	001c      	movs	r4, r3
 80005c6:	465b      	mov	r3, fp
 80005c8:	0015      	movs	r5, r2
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	dad4      	bge.n	8000578 <__udivmoddi4+0x12c>
 80005ce:	4642      	mov	r2, r8
 80005d0:	002f      	movs	r7, r5
 80005d2:	2320      	movs	r3, #32
 80005d4:	0026      	movs	r6, r4
 80005d6:	4097      	lsls	r7, r2
 80005d8:	1a9b      	subs	r3, r3, r2
 80005da:	40de      	lsrs	r6, r3
 80005dc:	003b      	movs	r3, r7
 80005de:	4333      	orrs	r3, r6
 80005e0:	e7cd      	b.n	800057e <__udivmoddi4+0x132>
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__aeabi_fdiv>:
 80005e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e6:	464f      	mov	r7, r9
 80005e8:	4646      	mov	r6, r8
 80005ea:	46d6      	mov	lr, sl
 80005ec:	0245      	lsls	r5, r0, #9
 80005ee:	b5c0      	push	{r6, r7, lr}
 80005f0:	0047      	lsls	r7, r0, #1
 80005f2:	1c0c      	adds	r4, r1, #0
 80005f4:	0a6d      	lsrs	r5, r5, #9
 80005f6:	0e3f      	lsrs	r7, r7, #24
 80005f8:	0fc6      	lsrs	r6, r0, #31
 80005fa:	2f00      	cmp	r7, #0
 80005fc:	d066      	beq.n	80006cc <__aeabi_fdiv+0xe8>
 80005fe:	2fff      	cmp	r7, #255	; 0xff
 8000600:	d06c      	beq.n	80006dc <__aeabi_fdiv+0xf8>
 8000602:	2300      	movs	r3, #0
 8000604:	00ea      	lsls	r2, r5, #3
 8000606:	2580      	movs	r5, #128	; 0x80
 8000608:	4699      	mov	r9, r3
 800060a:	469a      	mov	sl, r3
 800060c:	04ed      	lsls	r5, r5, #19
 800060e:	4315      	orrs	r5, r2
 8000610:	3f7f      	subs	r7, #127	; 0x7f
 8000612:	0260      	lsls	r0, r4, #9
 8000614:	0061      	lsls	r1, r4, #1
 8000616:	0a43      	lsrs	r3, r0, #9
 8000618:	4698      	mov	r8, r3
 800061a:	0e09      	lsrs	r1, r1, #24
 800061c:	0fe4      	lsrs	r4, r4, #31
 800061e:	2900      	cmp	r1, #0
 8000620:	d048      	beq.n	80006b4 <__aeabi_fdiv+0xd0>
 8000622:	29ff      	cmp	r1, #255	; 0xff
 8000624:	d010      	beq.n	8000648 <__aeabi_fdiv+0x64>
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	00d8      	lsls	r0, r3, #3
 800062a:	04d2      	lsls	r2, r2, #19
 800062c:	4302      	orrs	r2, r0
 800062e:	4690      	mov	r8, r2
 8000630:	2000      	movs	r0, #0
 8000632:	397f      	subs	r1, #127	; 0x7f
 8000634:	464a      	mov	r2, r9
 8000636:	0033      	movs	r3, r6
 8000638:	1a7f      	subs	r7, r7, r1
 800063a:	4302      	orrs	r2, r0
 800063c:	496c      	ldr	r1, [pc, #432]	; (80007f0 <__aeabi_fdiv+0x20c>)
 800063e:	0092      	lsls	r2, r2, #2
 8000640:	588a      	ldr	r2, [r1, r2]
 8000642:	4063      	eors	r3, r4
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4697      	mov	pc, r2
 8000648:	2b00      	cmp	r3, #0
 800064a:	d16d      	bne.n	8000728 <__aeabi_fdiv+0x144>
 800064c:	2002      	movs	r0, #2
 800064e:	3fff      	subs	r7, #255	; 0xff
 8000650:	e033      	b.n	80006ba <__aeabi_fdiv+0xd6>
 8000652:	2300      	movs	r3, #0
 8000654:	4698      	mov	r8, r3
 8000656:	0026      	movs	r6, r4
 8000658:	4645      	mov	r5, r8
 800065a:	4682      	mov	sl, r0
 800065c:	4653      	mov	r3, sl
 800065e:	2b02      	cmp	r3, #2
 8000660:	d100      	bne.n	8000664 <__aeabi_fdiv+0x80>
 8000662:	e07f      	b.n	8000764 <__aeabi_fdiv+0x180>
 8000664:	2b03      	cmp	r3, #3
 8000666:	d100      	bne.n	800066a <__aeabi_fdiv+0x86>
 8000668:	e094      	b.n	8000794 <__aeabi_fdiv+0x1b0>
 800066a:	2b01      	cmp	r3, #1
 800066c:	d017      	beq.n	800069e <__aeabi_fdiv+0xba>
 800066e:	0038      	movs	r0, r7
 8000670:	307f      	adds	r0, #127	; 0x7f
 8000672:	2800      	cmp	r0, #0
 8000674:	dd5f      	ble.n	8000736 <__aeabi_fdiv+0x152>
 8000676:	076b      	lsls	r3, r5, #29
 8000678:	d004      	beq.n	8000684 <__aeabi_fdiv+0xa0>
 800067a:	230f      	movs	r3, #15
 800067c:	402b      	ands	r3, r5
 800067e:	2b04      	cmp	r3, #4
 8000680:	d000      	beq.n	8000684 <__aeabi_fdiv+0xa0>
 8000682:	3504      	adds	r5, #4
 8000684:	012b      	lsls	r3, r5, #4
 8000686:	d503      	bpl.n	8000690 <__aeabi_fdiv+0xac>
 8000688:	0038      	movs	r0, r7
 800068a:	4b5a      	ldr	r3, [pc, #360]	; (80007f4 <__aeabi_fdiv+0x210>)
 800068c:	3080      	adds	r0, #128	; 0x80
 800068e:	401d      	ands	r5, r3
 8000690:	28fe      	cmp	r0, #254	; 0xfe
 8000692:	dc67      	bgt.n	8000764 <__aeabi_fdiv+0x180>
 8000694:	01ad      	lsls	r5, r5, #6
 8000696:	0a6d      	lsrs	r5, r5, #9
 8000698:	b2c0      	uxtb	r0, r0
 800069a:	e002      	b.n	80006a2 <__aeabi_fdiv+0xbe>
 800069c:	001e      	movs	r6, r3
 800069e:	2000      	movs	r0, #0
 80006a0:	2500      	movs	r5, #0
 80006a2:	05c0      	lsls	r0, r0, #23
 80006a4:	4328      	orrs	r0, r5
 80006a6:	07f6      	lsls	r6, r6, #31
 80006a8:	4330      	orrs	r0, r6
 80006aa:	bce0      	pop	{r5, r6, r7}
 80006ac:	46ba      	mov	sl, r7
 80006ae:	46b1      	mov	r9, r6
 80006b0:	46a8      	mov	r8, r5
 80006b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d12b      	bne.n	8000710 <__aeabi_fdiv+0x12c>
 80006b8:	2001      	movs	r0, #1
 80006ba:	464a      	mov	r2, r9
 80006bc:	0033      	movs	r3, r6
 80006be:	494e      	ldr	r1, [pc, #312]	; (80007f8 <__aeabi_fdiv+0x214>)
 80006c0:	4302      	orrs	r2, r0
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	588a      	ldr	r2, [r1, r2]
 80006c6:	4063      	eors	r3, r4
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4697      	mov	pc, r2
 80006cc:	2d00      	cmp	r5, #0
 80006ce:	d113      	bne.n	80006f8 <__aeabi_fdiv+0x114>
 80006d0:	2304      	movs	r3, #4
 80006d2:	4699      	mov	r9, r3
 80006d4:	3b03      	subs	r3, #3
 80006d6:	2700      	movs	r7, #0
 80006d8:	469a      	mov	sl, r3
 80006da:	e79a      	b.n	8000612 <__aeabi_fdiv+0x2e>
 80006dc:	2d00      	cmp	r5, #0
 80006de:	d105      	bne.n	80006ec <__aeabi_fdiv+0x108>
 80006e0:	2308      	movs	r3, #8
 80006e2:	4699      	mov	r9, r3
 80006e4:	3b06      	subs	r3, #6
 80006e6:	27ff      	movs	r7, #255	; 0xff
 80006e8:	469a      	mov	sl, r3
 80006ea:	e792      	b.n	8000612 <__aeabi_fdiv+0x2e>
 80006ec:	230c      	movs	r3, #12
 80006ee:	4699      	mov	r9, r3
 80006f0:	3b09      	subs	r3, #9
 80006f2:	27ff      	movs	r7, #255	; 0xff
 80006f4:	469a      	mov	sl, r3
 80006f6:	e78c      	b.n	8000612 <__aeabi_fdiv+0x2e>
 80006f8:	0028      	movs	r0, r5
 80006fa:	f002 faab 	bl	8002c54 <__clzsi2>
 80006fe:	2776      	movs	r7, #118	; 0x76
 8000700:	1f43      	subs	r3, r0, #5
 8000702:	409d      	lsls	r5, r3
 8000704:	2300      	movs	r3, #0
 8000706:	427f      	negs	r7, r7
 8000708:	4699      	mov	r9, r3
 800070a:	469a      	mov	sl, r3
 800070c:	1a3f      	subs	r7, r7, r0
 800070e:	e780      	b.n	8000612 <__aeabi_fdiv+0x2e>
 8000710:	0018      	movs	r0, r3
 8000712:	f002 fa9f 	bl	8002c54 <__clzsi2>
 8000716:	4642      	mov	r2, r8
 8000718:	1f43      	subs	r3, r0, #5
 800071a:	2176      	movs	r1, #118	; 0x76
 800071c:	409a      	lsls	r2, r3
 800071e:	4249      	negs	r1, r1
 8000720:	1a09      	subs	r1, r1, r0
 8000722:	4690      	mov	r8, r2
 8000724:	2000      	movs	r0, #0
 8000726:	e785      	b.n	8000634 <__aeabi_fdiv+0x50>
 8000728:	21ff      	movs	r1, #255	; 0xff
 800072a:	2003      	movs	r0, #3
 800072c:	e782      	b.n	8000634 <__aeabi_fdiv+0x50>
 800072e:	001e      	movs	r6, r3
 8000730:	20ff      	movs	r0, #255	; 0xff
 8000732:	2500      	movs	r5, #0
 8000734:	e7b5      	b.n	80006a2 <__aeabi_fdiv+0xbe>
 8000736:	2301      	movs	r3, #1
 8000738:	1a1b      	subs	r3, r3, r0
 800073a:	2b1b      	cmp	r3, #27
 800073c:	dcaf      	bgt.n	800069e <__aeabi_fdiv+0xba>
 800073e:	379e      	adds	r7, #158	; 0x9e
 8000740:	0029      	movs	r1, r5
 8000742:	40bd      	lsls	r5, r7
 8000744:	40d9      	lsrs	r1, r3
 8000746:	1e6a      	subs	r2, r5, #1
 8000748:	4195      	sbcs	r5, r2
 800074a:	430d      	orrs	r5, r1
 800074c:	076b      	lsls	r3, r5, #29
 800074e:	d004      	beq.n	800075a <__aeabi_fdiv+0x176>
 8000750:	230f      	movs	r3, #15
 8000752:	402b      	ands	r3, r5
 8000754:	2b04      	cmp	r3, #4
 8000756:	d000      	beq.n	800075a <__aeabi_fdiv+0x176>
 8000758:	3504      	adds	r5, #4
 800075a:	016b      	lsls	r3, r5, #5
 800075c:	d544      	bpl.n	80007e8 <__aeabi_fdiv+0x204>
 800075e:	2001      	movs	r0, #1
 8000760:	2500      	movs	r5, #0
 8000762:	e79e      	b.n	80006a2 <__aeabi_fdiv+0xbe>
 8000764:	20ff      	movs	r0, #255	; 0xff
 8000766:	2500      	movs	r5, #0
 8000768:	e79b      	b.n	80006a2 <__aeabi_fdiv+0xbe>
 800076a:	2580      	movs	r5, #128	; 0x80
 800076c:	2600      	movs	r6, #0
 800076e:	20ff      	movs	r0, #255	; 0xff
 8000770:	03ed      	lsls	r5, r5, #15
 8000772:	e796      	b.n	80006a2 <__aeabi_fdiv+0xbe>
 8000774:	2300      	movs	r3, #0
 8000776:	4698      	mov	r8, r3
 8000778:	2080      	movs	r0, #128	; 0x80
 800077a:	03c0      	lsls	r0, r0, #15
 800077c:	4205      	tst	r5, r0
 800077e:	d009      	beq.n	8000794 <__aeabi_fdiv+0x1b0>
 8000780:	4643      	mov	r3, r8
 8000782:	4203      	tst	r3, r0
 8000784:	d106      	bne.n	8000794 <__aeabi_fdiv+0x1b0>
 8000786:	4645      	mov	r5, r8
 8000788:	4305      	orrs	r5, r0
 800078a:	026d      	lsls	r5, r5, #9
 800078c:	0026      	movs	r6, r4
 800078e:	20ff      	movs	r0, #255	; 0xff
 8000790:	0a6d      	lsrs	r5, r5, #9
 8000792:	e786      	b.n	80006a2 <__aeabi_fdiv+0xbe>
 8000794:	2080      	movs	r0, #128	; 0x80
 8000796:	03c0      	lsls	r0, r0, #15
 8000798:	4305      	orrs	r5, r0
 800079a:	026d      	lsls	r5, r5, #9
 800079c:	20ff      	movs	r0, #255	; 0xff
 800079e:	0a6d      	lsrs	r5, r5, #9
 80007a0:	e77f      	b.n	80006a2 <__aeabi_fdiv+0xbe>
 80007a2:	4641      	mov	r1, r8
 80007a4:	016a      	lsls	r2, r5, #5
 80007a6:	0148      	lsls	r0, r1, #5
 80007a8:	4282      	cmp	r2, r0
 80007aa:	d219      	bcs.n	80007e0 <__aeabi_fdiv+0x1fc>
 80007ac:	211b      	movs	r1, #27
 80007ae:	2500      	movs	r5, #0
 80007b0:	3f01      	subs	r7, #1
 80007b2:	2601      	movs	r6, #1
 80007b4:	0014      	movs	r4, r2
 80007b6:	006d      	lsls	r5, r5, #1
 80007b8:	0052      	lsls	r2, r2, #1
 80007ba:	2c00      	cmp	r4, #0
 80007bc:	db01      	blt.n	80007c2 <__aeabi_fdiv+0x1de>
 80007be:	4290      	cmp	r0, r2
 80007c0:	d801      	bhi.n	80007c6 <__aeabi_fdiv+0x1e2>
 80007c2:	1a12      	subs	r2, r2, r0
 80007c4:	4335      	orrs	r5, r6
 80007c6:	3901      	subs	r1, #1
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d1f3      	bne.n	80007b4 <__aeabi_fdiv+0x1d0>
 80007cc:	1e50      	subs	r0, r2, #1
 80007ce:	4182      	sbcs	r2, r0
 80007d0:	0038      	movs	r0, r7
 80007d2:	307f      	adds	r0, #127	; 0x7f
 80007d4:	001e      	movs	r6, r3
 80007d6:	4315      	orrs	r5, r2
 80007d8:	2800      	cmp	r0, #0
 80007da:	dd00      	ble.n	80007de <__aeabi_fdiv+0x1fa>
 80007dc:	e74b      	b.n	8000676 <__aeabi_fdiv+0x92>
 80007de:	e7aa      	b.n	8000736 <__aeabi_fdiv+0x152>
 80007e0:	211a      	movs	r1, #26
 80007e2:	2501      	movs	r5, #1
 80007e4:	1a12      	subs	r2, r2, r0
 80007e6:	e7e4      	b.n	80007b2 <__aeabi_fdiv+0x1ce>
 80007e8:	01ad      	lsls	r5, r5, #6
 80007ea:	2000      	movs	r0, #0
 80007ec:	0a6d      	lsrs	r5, r5, #9
 80007ee:	e758      	b.n	80006a2 <__aeabi_fdiv+0xbe>
 80007f0:	080078a8 	.word	0x080078a8
 80007f4:	f7ffffff 	.word	0xf7ffffff
 80007f8:	080078e8 	.word	0x080078e8

080007fc <__eqsf2>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	0042      	lsls	r2, r0, #1
 8000800:	024e      	lsls	r6, r1, #9
 8000802:	004c      	lsls	r4, r1, #1
 8000804:	0245      	lsls	r5, r0, #9
 8000806:	0a6d      	lsrs	r5, r5, #9
 8000808:	0e12      	lsrs	r2, r2, #24
 800080a:	0fc3      	lsrs	r3, r0, #31
 800080c:	0a76      	lsrs	r6, r6, #9
 800080e:	0e24      	lsrs	r4, r4, #24
 8000810:	0fc9      	lsrs	r1, r1, #31
 8000812:	2aff      	cmp	r2, #255	; 0xff
 8000814:	d00f      	beq.n	8000836 <__eqsf2+0x3a>
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d011      	beq.n	800083e <__eqsf2+0x42>
 800081a:	2001      	movs	r0, #1
 800081c:	42a2      	cmp	r2, r4
 800081e:	d000      	beq.n	8000822 <__eqsf2+0x26>
 8000820:	bd70      	pop	{r4, r5, r6, pc}
 8000822:	42b5      	cmp	r5, r6
 8000824:	d1fc      	bne.n	8000820 <__eqsf2+0x24>
 8000826:	428b      	cmp	r3, r1
 8000828:	d00d      	beq.n	8000846 <__eqsf2+0x4a>
 800082a:	2a00      	cmp	r2, #0
 800082c:	d1f8      	bne.n	8000820 <__eqsf2+0x24>
 800082e:	0028      	movs	r0, r5
 8000830:	1e45      	subs	r5, r0, #1
 8000832:	41a8      	sbcs	r0, r5
 8000834:	e7f4      	b.n	8000820 <__eqsf2+0x24>
 8000836:	2001      	movs	r0, #1
 8000838:	2d00      	cmp	r5, #0
 800083a:	d1f1      	bne.n	8000820 <__eqsf2+0x24>
 800083c:	e7eb      	b.n	8000816 <__eqsf2+0x1a>
 800083e:	2001      	movs	r0, #1
 8000840:	2e00      	cmp	r6, #0
 8000842:	d1ed      	bne.n	8000820 <__eqsf2+0x24>
 8000844:	e7e9      	b.n	800081a <__eqsf2+0x1e>
 8000846:	2000      	movs	r0, #0
 8000848:	e7ea      	b.n	8000820 <__eqsf2+0x24>
 800084a:	46c0      	nop			; (mov r8, r8)

0800084c <__gesf2>:
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	0042      	lsls	r2, r0, #1
 8000850:	0246      	lsls	r6, r0, #9
 8000852:	024d      	lsls	r5, r1, #9
 8000854:	004c      	lsls	r4, r1, #1
 8000856:	0fc3      	lsrs	r3, r0, #31
 8000858:	0a76      	lsrs	r6, r6, #9
 800085a:	0e12      	lsrs	r2, r2, #24
 800085c:	0a6d      	lsrs	r5, r5, #9
 800085e:	0e24      	lsrs	r4, r4, #24
 8000860:	0fc8      	lsrs	r0, r1, #31
 8000862:	2aff      	cmp	r2, #255	; 0xff
 8000864:	d01f      	beq.n	80008a6 <__gesf2+0x5a>
 8000866:	2cff      	cmp	r4, #255	; 0xff
 8000868:	d010      	beq.n	800088c <__gesf2+0x40>
 800086a:	2a00      	cmp	r2, #0
 800086c:	d11f      	bne.n	80008ae <__gesf2+0x62>
 800086e:	4271      	negs	r1, r6
 8000870:	4171      	adcs	r1, r6
 8000872:	2c00      	cmp	r4, #0
 8000874:	d101      	bne.n	800087a <__gesf2+0x2e>
 8000876:	2d00      	cmp	r5, #0
 8000878:	d01e      	beq.n	80008b8 <__gesf2+0x6c>
 800087a:	2900      	cmp	r1, #0
 800087c:	d10e      	bne.n	800089c <__gesf2+0x50>
 800087e:	4283      	cmp	r3, r0
 8000880:	d01e      	beq.n	80008c0 <__gesf2+0x74>
 8000882:	2102      	movs	r1, #2
 8000884:	1e58      	subs	r0, r3, #1
 8000886:	4008      	ands	r0, r1
 8000888:	3801      	subs	r0, #1
 800088a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088c:	2d00      	cmp	r5, #0
 800088e:	d126      	bne.n	80008de <__gesf2+0x92>
 8000890:	2a00      	cmp	r2, #0
 8000892:	d1f4      	bne.n	800087e <__gesf2+0x32>
 8000894:	4271      	negs	r1, r6
 8000896:	4171      	adcs	r1, r6
 8000898:	2900      	cmp	r1, #0
 800089a:	d0f0      	beq.n	800087e <__gesf2+0x32>
 800089c:	2800      	cmp	r0, #0
 800089e:	d1f4      	bne.n	800088a <__gesf2+0x3e>
 80008a0:	2001      	movs	r0, #1
 80008a2:	4240      	negs	r0, r0
 80008a4:	e7f1      	b.n	800088a <__gesf2+0x3e>
 80008a6:	2e00      	cmp	r6, #0
 80008a8:	d119      	bne.n	80008de <__gesf2+0x92>
 80008aa:	2cff      	cmp	r4, #255	; 0xff
 80008ac:	d0ee      	beq.n	800088c <__gesf2+0x40>
 80008ae:	2c00      	cmp	r4, #0
 80008b0:	d1e5      	bne.n	800087e <__gesf2+0x32>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	d1e3      	bne.n	800087e <__gesf2+0x32>
 80008b6:	e7e4      	b.n	8000882 <__gesf2+0x36>
 80008b8:	2000      	movs	r0, #0
 80008ba:	2e00      	cmp	r6, #0
 80008bc:	d0e5      	beq.n	800088a <__gesf2+0x3e>
 80008be:	e7e0      	b.n	8000882 <__gesf2+0x36>
 80008c0:	42a2      	cmp	r2, r4
 80008c2:	dc05      	bgt.n	80008d0 <__gesf2+0x84>
 80008c4:	dbea      	blt.n	800089c <__gesf2+0x50>
 80008c6:	42ae      	cmp	r6, r5
 80008c8:	d802      	bhi.n	80008d0 <__gesf2+0x84>
 80008ca:	d3e7      	bcc.n	800089c <__gesf2+0x50>
 80008cc:	2000      	movs	r0, #0
 80008ce:	e7dc      	b.n	800088a <__gesf2+0x3e>
 80008d0:	4241      	negs	r1, r0
 80008d2:	4141      	adcs	r1, r0
 80008d4:	4248      	negs	r0, r1
 80008d6:	2102      	movs	r1, #2
 80008d8:	4008      	ands	r0, r1
 80008da:	3801      	subs	r0, #1
 80008dc:	e7d5      	b.n	800088a <__gesf2+0x3e>
 80008de:	2002      	movs	r0, #2
 80008e0:	4240      	negs	r0, r0
 80008e2:	e7d2      	b.n	800088a <__gesf2+0x3e>

080008e4 <__lesf2>:
 80008e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e6:	0042      	lsls	r2, r0, #1
 80008e8:	0246      	lsls	r6, r0, #9
 80008ea:	024d      	lsls	r5, r1, #9
 80008ec:	004c      	lsls	r4, r1, #1
 80008ee:	0fc3      	lsrs	r3, r0, #31
 80008f0:	0a76      	lsrs	r6, r6, #9
 80008f2:	0e12      	lsrs	r2, r2, #24
 80008f4:	0a6d      	lsrs	r5, r5, #9
 80008f6:	0e24      	lsrs	r4, r4, #24
 80008f8:	0fc8      	lsrs	r0, r1, #31
 80008fa:	2aff      	cmp	r2, #255	; 0xff
 80008fc:	d00d      	beq.n	800091a <__lesf2+0x36>
 80008fe:	2cff      	cmp	r4, #255	; 0xff
 8000900:	d00f      	beq.n	8000922 <__lesf2+0x3e>
 8000902:	2a00      	cmp	r2, #0
 8000904:	d123      	bne.n	800094e <__lesf2+0x6a>
 8000906:	4271      	negs	r1, r6
 8000908:	4171      	adcs	r1, r6
 800090a:	2c00      	cmp	r4, #0
 800090c:	d10f      	bne.n	800092e <__lesf2+0x4a>
 800090e:	2d00      	cmp	r5, #0
 8000910:	d10d      	bne.n	800092e <__lesf2+0x4a>
 8000912:	2000      	movs	r0, #0
 8000914:	2e00      	cmp	r6, #0
 8000916:	d014      	beq.n	8000942 <__lesf2+0x5e>
 8000918:	e00d      	b.n	8000936 <__lesf2+0x52>
 800091a:	2e00      	cmp	r6, #0
 800091c:	d110      	bne.n	8000940 <__lesf2+0x5c>
 800091e:	2cff      	cmp	r4, #255	; 0xff
 8000920:	d115      	bne.n	800094e <__lesf2+0x6a>
 8000922:	2d00      	cmp	r5, #0
 8000924:	d10c      	bne.n	8000940 <__lesf2+0x5c>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d103      	bne.n	8000932 <__lesf2+0x4e>
 800092a:	4271      	negs	r1, r6
 800092c:	4171      	adcs	r1, r6
 800092e:	2900      	cmp	r1, #0
 8000930:	d108      	bne.n	8000944 <__lesf2+0x60>
 8000932:	4283      	cmp	r3, r0
 8000934:	d010      	beq.n	8000958 <__lesf2+0x74>
 8000936:	2102      	movs	r1, #2
 8000938:	1e58      	subs	r0, r3, #1
 800093a:	4008      	ands	r0, r1
 800093c:	3801      	subs	r0, #1
 800093e:	e000      	b.n	8000942 <__lesf2+0x5e>
 8000940:	2002      	movs	r0, #2
 8000942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000944:	2800      	cmp	r0, #0
 8000946:	d1fc      	bne.n	8000942 <__lesf2+0x5e>
 8000948:	2001      	movs	r0, #1
 800094a:	4240      	negs	r0, r0
 800094c:	e7f9      	b.n	8000942 <__lesf2+0x5e>
 800094e:	2c00      	cmp	r4, #0
 8000950:	d1ef      	bne.n	8000932 <__lesf2+0x4e>
 8000952:	2d00      	cmp	r5, #0
 8000954:	d1ed      	bne.n	8000932 <__lesf2+0x4e>
 8000956:	e7ee      	b.n	8000936 <__lesf2+0x52>
 8000958:	42a2      	cmp	r2, r4
 800095a:	dc05      	bgt.n	8000968 <__lesf2+0x84>
 800095c:	dbf2      	blt.n	8000944 <__lesf2+0x60>
 800095e:	42ae      	cmp	r6, r5
 8000960:	d802      	bhi.n	8000968 <__lesf2+0x84>
 8000962:	d3ef      	bcc.n	8000944 <__lesf2+0x60>
 8000964:	2000      	movs	r0, #0
 8000966:	e7ec      	b.n	8000942 <__lesf2+0x5e>
 8000968:	4241      	negs	r1, r0
 800096a:	4141      	adcs	r1, r0
 800096c:	4248      	negs	r0, r1
 800096e:	2102      	movs	r1, #2
 8000970:	4008      	ands	r0, r1
 8000972:	3801      	subs	r0, #1
 8000974:	e7e5      	b.n	8000942 <__lesf2+0x5e>
 8000976:	46c0      	nop			; (mov r8, r8)

08000978 <__aeabi_fmul>:
 8000978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097a:	4657      	mov	r7, sl
 800097c:	464e      	mov	r6, r9
 800097e:	4645      	mov	r5, r8
 8000980:	46de      	mov	lr, fp
 8000982:	0244      	lsls	r4, r0, #9
 8000984:	b5e0      	push	{r5, r6, r7, lr}
 8000986:	0045      	lsls	r5, r0, #1
 8000988:	1c0f      	adds	r7, r1, #0
 800098a:	0a64      	lsrs	r4, r4, #9
 800098c:	0e2d      	lsrs	r5, r5, #24
 800098e:	0fc6      	lsrs	r6, r0, #31
 8000990:	2d00      	cmp	r5, #0
 8000992:	d047      	beq.n	8000a24 <__aeabi_fmul+0xac>
 8000994:	2dff      	cmp	r5, #255	; 0xff
 8000996:	d04d      	beq.n	8000a34 <__aeabi_fmul+0xbc>
 8000998:	2300      	movs	r3, #0
 800099a:	2080      	movs	r0, #128	; 0x80
 800099c:	469a      	mov	sl, r3
 800099e:	469b      	mov	fp, r3
 80009a0:	00e4      	lsls	r4, r4, #3
 80009a2:	04c0      	lsls	r0, r0, #19
 80009a4:	4304      	orrs	r4, r0
 80009a6:	3d7f      	subs	r5, #127	; 0x7f
 80009a8:	0278      	lsls	r0, r7, #9
 80009aa:	0a43      	lsrs	r3, r0, #9
 80009ac:	4699      	mov	r9, r3
 80009ae:	007a      	lsls	r2, r7, #1
 80009b0:	0ffb      	lsrs	r3, r7, #31
 80009b2:	4698      	mov	r8, r3
 80009b4:	0e12      	lsrs	r2, r2, #24
 80009b6:	464b      	mov	r3, r9
 80009b8:	d044      	beq.n	8000a44 <__aeabi_fmul+0xcc>
 80009ba:	2aff      	cmp	r2, #255	; 0xff
 80009bc:	d011      	beq.n	80009e2 <__aeabi_fmul+0x6a>
 80009be:	00d8      	lsls	r0, r3, #3
 80009c0:	2380      	movs	r3, #128	; 0x80
 80009c2:	04db      	lsls	r3, r3, #19
 80009c4:	4303      	orrs	r3, r0
 80009c6:	4699      	mov	r9, r3
 80009c8:	2000      	movs	r0, #0
 80009ca:	3a7f      	subs	r2, #127	; 0x7f
 80009cc:	18ad      	adds	r5, r5, r2
 80009ce:	4647      	mov	r7, r8
 80009d0:	4653      	mov	r3, sl
 80009d2:	4077      	eors	r7, r6
 80009d4:	1c69      	adds	r1, r5, #1
 80009d6:	2b0f      	cmp	r3, #15
 80009d8:	d83f      	bhi.n	8000a5a <__aeabi_fmul+0xe2>
 80009da:	4a72      	ldr	r2, [pc, #456]	; (8000ba4 <__aeabi_fmul+0x22c>)
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	58d3      	ldr	r3, [r2, r3]
 80009e0:	469f      	mov	pc, r3
 80009e2:	35ff      	adds	r5, #255	; 0xff
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d000      	beq.n	80009ea <__aeabi_fmul+0x72>
 80009e8:	e079      	b.n	8000ade <__aeabi_fmul+0x166>
 80009ea:	4652      	mov	r2, sl
 80009ec:	2302      	movs	r3, #2
 80009ee:	431a      	orrs	r2, r3
 80009f0:	4692      	mov	sl, r2
 80009f2:	2002      	movs	r0, #2
 80009f4:	e7eb      	b.n	80009ce <__aeabi_fmul+0x56>
 80009f6:	4647      	mov	r7, r8
 80009f8:	464c      	mov	r4, r9
 80009fa:	4683      	mov	fp, r0
 80009fc:	465b      	mov	r3, fp
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d028      	beq.n	8000a54 <__aeabi_fmul+0xdc>
 8000a02:	2b03      	cmp	r3, #3
 8000a04:	d100      	bne.n	8000a08 <__aeabi_fmul+0x90>
 8000a06:	e0c6      	b.n	8000b96 <__aeabi_fmul+0x21e>
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d14f      	bne.n	8000aac <__aeabi_fmul+0x134>
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	2400      	movs	r4, #0
 8000a10:	05c0      	lsls	r0, r0, #23
 8000a12:	07ff      	lsls	r7, r7, #31
 8000a14:	4320      	orrs	r0, r4
 8000a16:	4338      	orrs	r0, r7
 8000a18:	bcf0      	pop	{r4, r5, r6, r7}
 8000a1a:	46bb      	mov	fp, r7
 8000a1c:	46b2      	mov	sl, r6
 8000a1e:	46a9      	mov	r9, r5
 8000a20:	46a0      	mov	r8, r4
 8000a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a24:	2c00      	cmp	r4, #0
 8000a26:	d171      	bne.n	8000b0c <__aeabi_fmul+0x194>
 8000a28:	2304      	movs	r3, #4
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	2500      	movs	r5, #0
 8000a30:	469b      	mov	fp, r3
 8000a32:	e7b9      	b.n	80009a8 <__aeabi_fmul+0x30>
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d163      	bne.n	8000b00 <__aeabi_fmul+0x188>
 8000a38:	2308      	movs	r3, #8
 8000a3a:	469a      	mov	sl, r3
 8000a3c:	3b06      	subs	r3, #6
 8000a3e:	25ff      	movs	r5, #255	; 0xff
 8000a40:	469b      	mov	fp, r3
 8000a42:	e7b1      	b.n	80009a8 <__aeabi_fmul+0x30>
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d150      	bne.n	8000aea <__aeabi_fmul+0x172>
 8000a48:	4652      	mov	r2, sl
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	4692      	mov	sl, r2
 8000a50:	2001      	movs	r0, #1
 8000a52:	e7bc      	b.n	80009ce <__aeabi_fmul+0x56>
 8000a54:	20ff      	movs	r0, #255	; 0xff
 8000a56:	2400      	movs	r4, #0
 8000a58:	e7da      	b.n	8000a10 <__aeabi_fmul+0x98>
 8000a5a:	4648      	mov	r0, r9
 8000a5c:	0c26      	lsrs	r6, r4, #16
 8000a5e:	0424      	lsls	r4, r4, #16
 8000a60:	0c22      	lsrs	r2, r4, #16
 8000a62:	0404      	lsls	r4, r0, #16
 8000a64:	0c24      	lsrs	r4, r4, #16
 8000a66:	464b      	mov	r3, r9
 8000a68:	0020      	movs	r0, r4
 8000a6a:	0c1b      	lsrs	r3, r3, #16
 8000a6c:	4350      	muls	r0, r2
 8000a6e:	4374      	muls	r4, r6
 8000a70:	435a      	muls	r2, r3
 8000a72:	435e      	muls	r6, r3
 8000a74:	1912      	adds	r2, r2, r4
 8000a76:	0c03      	lsrs	r3, r0, #16
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	429c      	cmp	r4, r3
 8000a7c:	d903      	bls.n	8000a86 <__aeabi_fmul+0x10e>
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	0252      	lsls	r2, r2, #9
 8000a82:	4694      	mov	ip, r2
 8000a84:	4466      	add	r6, ip
 8000a86:	0400      	lsls	r0, r0, #16
 8000a88:	041a      	lsls	r2, r3, #16
 8000a8a:	0c00      	lsrs	r0, r0, #16
 8000a8c:	1812      	adds	r2, r2, r0
 8000a8e:	0194      	lsls	r4, r2, #6
 8000a90:	1e60      	subs	r0, r4, #1
 8000a92:	4184      	sbcs	r4, r0
 8000a94:	0c1b      	lsrs	r3, r3, #16
 8000a96:	0e92      	lsrs	r2, r2, #26
 8000a98:	199b      	adds	r3, r3, r6
 8000a9a:	4314      	orrs	r4, r2
 8000a9c:	019b      	lsls	r3, r3, #6
 8000a9e:	431c      	orrs	r4, r3
 8000aa0:	011b      	lsls	r3, r3, #4
 8000aa2:	d572      	bpl.n	8000b8a <__aeabi_fmul+0x212>
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	0863      	lsrs	r3, r4, #1
 8000aa8:	4004      	ands	r4, r0
 8000aaa:	431c      	orrs	r4, r3
 8000aac:	0008      	movs	r0, r1
 8000aae:	307f      	adds	r0, #127	; 0x7f
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	dd3c      	ble.n	8000b2e <__aeabi_fmul+0x1b6>
 8000ab4:	0763      	lsls	r3, r4, #29
 8000ab6:	d004      	beq.n	8000ac2 <__aeabi_fmul+0x14a>
 8000ab8:	230f      	movs	r3, #15
 8000aba:	4023      	ands	r3, r4
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fmul+0x14a>
 8000ac0:	3404      	adds	r4, #4
 8000ac2:	0123      	lsls	r3, r4, #4
 8000ac4:	d503      	bpl.n	8000ace <__aeabi_fmul+0x156>
 8000ac6:	3180      	adds	r1, #128	; 0x80
 8000ac8:	0008      	movs	r0, r1
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <__aeabi_fmul+0x230>)
 8000acc:	401c      	ands	r4, r3
 8000ace:	28fe      	cmp	r0, #254	; 0xfe
 8000ad0:	dcc0      	bgt.n	8000a54 <__aeabi_fmul+0xdc>
 8000ad2:	01a4      	lsls	r4, r4, #6
 8000ad4:	0a64      	lsrs	r4, r4, #9
 8000ad6:	b2c0      	uxtb	r0, r0
 8000ad8:	e79a      	b.n	8000a10 <__aeabi_fmul+0x98>
 8000ada:	0037      	movs	r7, r6
 8000adc:	e78e      	b.n	80009fc <__aeabi_fmul+0x84>
 8000ade:	4652      	mov	r2, sl
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	4692      	mov	sl, r2
 8000ae6:	2003      	movs	r0, #3
 8000ae8:	e771      	b.n	80009ce <__aeabi_fmul+0x56>
 8000aea:	4648      	mov	r0, r9
 8000aec:	f002 f8b2 	bl	8002c54 <__clzsi2>
 8000af0:	464a      	mov	r2, r9
 8000af2:	1f43      	subs	r3, r0, #5
 8000af4:	409a      	lsls	r2, r3
 8000af6:	1a2d      	subs	r5, r5, r0
 8000af8:	4691      	mov	r9, r2
 8000afa:	2000      	movs	r0, #0
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	e766      	b.n	80009ce <__aeabi_fmul+0x56>
 8000b00:	230c      	movs	r3, #12
 8000b02:	469a      	mov	sl, r3
 8000b04:	3b09      	subs	r3, #9
 8000b06:	25ff      	movs	r5, #255	; 0xff
 8000b08:	469b      	mov	fp, r3
 8000b0a:	e74d      	b.n	80009a8 <__aeabi_fmul+0x30>
 8000b0c:	0020      	movs	r0, r4
 8000b0e:	f002 f8a1 	bl	8002c54 <__clzsi2>
 8000b12:	2576      	movs	r5, #118	; 0x76
 8000b14:	1f43      	subs	r3, r0, #5
 8000b16:	409c      	lsls	r4, r3
 8000b18:	2300      	movs	r3, #0
 8000b1a:	426d      	negs	r5, r5
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	469b      	mov	fp, r3
 8000b20:	1a2d      	subs	r5, r5, r0
 8000b22:	e741      	b.n	80009a8 <__aeabi_fmul+0x30>
 8000b24:	2480      	movs	r4, #128	; 0x80
 8000b26:	2700      	movs	r7, #0
 8000b28:	20ff      	movs	r0, #255	; 0xff
 8000b2a:	03e4      	lsls	r4, r4, #15
 8000b2c:	e770      	b.n	8000a10 <__aeabi_fmul+0x98>
 8000b2e:	2301      	movs	r3, #1
 8000b30:	1a1b      	subs	r3, r3, r0
 8000b32:	2b1b      	cmp	r3, #27
 8000b34:	dd00      	ble.n	8000b38 <__aeabi_fmul+0x1c0>
 8000b36:	e769      	b.n	8000a0c <__aeabi_fmul+0x94>
 8000b38:	319e      	adds	r1, #158	; 0x9e
 8000b3a:	0020      	movs	r0, r4
 8000b3c:	408c      	lsls	r4, r1
 8000b3e:	40d8      	lsrs	r0, r3
 8000b40:	1e63      	subs	r3, r4, #1
 8000b42:	419c      	sbcs	r4, r3
 8000b44:	4304      	orrs	r4, r0
 8000b46:	0763      	lsls	r3, r4, #29
 8000b48:	d004      	beq.n	8000b54 <__aeabi_fmul+0x1dc>
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	4023      	ands	r3, r4
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d000      	beq.n	8000b54 <__aeabi_fmul+0x1dc>
 8000b52:	3404      	adds	r4, #4
 8000b54:	0163      	lsls	r3, r4, #5
 8000b56:	d51a      	bpl.n	8000b8e <__aeabi_fmul+0x216>
 8000b58:	2001      	movs	r0, #1
 8000b5a:	2400      	movs	r4, #0
 8000b5c:	e758      	b.n	8000a10 <__aeabi_fmul+0x98>
 8000b5e:	2080      	movs	r0, #128	; 0x80
 8000b60:	03c0      	lsls	r0, r0, #15
 8000b62:	4204      	tst	r4, r0
 8000b64:	d009      	beq.n	8000b7a <__aeabi_fmul+0x202>
 8000b66:	464b      	mov	r3, r9
 8000b68:	4203      	tst	r3, r0
 8000b6a:	d106      	bne.n	8000b7a <__aeabi_fmul+0x202>
 8000b6c:	464c      	mov	r4, r9
 8000b6e:	4304      	orrs	r4, r0
 8000b70:	0264      	lsls	r4, r4, #9
 8000b72:	4647      	mov	r7, r8
 8000b74:	20ff      	movs	r0, #255	; 0xff
 8000b76:	0a64      	lsrs	r4, r4, #9
 8000b78:	e74a      	b.n	8000a10 <__aeabi_fmul+0x98>
 8000b7a:	2080      	movs	r0, #128	; 0x80
 8000b7c:	03c0      	lsls	r0, r0, #15
 8000b7e:	4304      	orrs	r4, r0
 8000b80:	0264      	lsls	r4, r4, #9
 8000b82:	0037      	movs	r7, r6
 8000b84:	20ff      	movs	r0, #255	; 0xff
 8000b86:	0a64      	lsrs	r4, r4, #9
 8000b88:	e742      	b.n	8000a10 <__aeabi_fmul+0x98>
 8000b8a:	0029      	movs	r1, r5
 8000b8c:	e78e      	b.n	8000aac <__aeabi_fmul+0x134>
 8000b8e:	01a4      	lsls	r4, r4, #6
 8000b90:	2000      	movs	r0, #0
 8000b92:	0a64      	lsrs	r4, r4, #9
 8000b94:	e73c      	b.n	8000a10 <__aeabi_fmul+0x98>
 8000b96:	2080      	movs	r0, #128	; 0x80
 8000b98:	03c0      	lsls	r0, r0, #15
 8000b9a:	4304      	orrs	r4, r0
 8000b9c:	0264      	lsls	r4, r4, #9
 8000b9e:	20ff      	movs	r0, #255	; 0xff
 8000ba0:	0a64      	lsrs	r4, r4, #9
 8000ba2:	e735      	b.n	8000a10 <__aeabi_fmul+0x98>
 8000ba4:	08007928 	.word	0x08007928
 8000ba8:	f7ffffff 	.word	0xf7ffffff

08000bac <__aeabi_fsub>:
 8000bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bae:	4646      	mov	r6, r8
 8000bb0:	46d6      	mov	lr, sl
 8000bb2:	464f      	mov	r7, r9
 8000bb4:	0243      	lsls	r3, r0, #9
 8000bb6:	0a5b      	lsrs	r3, r3, #9
 8000bb8:	00da      	lsls	r2, r3, #3
 8000bba:	4694      	mov	ip, r2
 8000bbc:	024a      	lsls	r2, r1, #9
 8000bbe:	b5c0      	push	{r6, r7, lr}
 8000bc0:	0044      	lsls	r4, r0, #1
 8000bc2:	0a56      	lsrs	r6, r2, #9
 8000bc4:	1c05      	adds	r5, r0, #0
 8000bc6:	46b0      	mov	r8, r6
 8000bc8:	0e24      	lsrs	r4, r4, #24
 8000bca:	004e      	lsls	r6, r1, #1
 8000bcc:	0992      	lsrs	r2, r2, #6
 8000bce:	001f      	movs	r7, r3
 8000bd0:	0020      	movs	r0, r4
 8000bd2:	4692      	mov	sl, r2
 8000bd4:	0fed      	lsrs	r5, r5, #31
 8000bd6:	0e36      	lsrs	r6, r6, #24
 8000bd8:	0fc9      	lsrs	r1, r1, #31
 8000bda:	2eff      	cmp	r6, #255	; 0xff
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fsub+0x34>
 8000bde:	e07f      	b.n	8000ce0 <__aeabi_fsub+0x134>
 8000be0:	2201      	movs	r2, #1
 8000be2:	4051      	eors	r1, r2
 8000be4:	428d      	cmp	r5, r1
 8000be6:	d051      	beq.n	8000c8c <__aeabi_fsub+0xe0>
 8000be8:	1ba2      	subs	r2, r4, r6
 8000bea:	4691      	mov	r9, r2
 8000bec:	2a00      	cmp	r2, #0
 8000bee:	dc00      	bgt.n	8000bf2 <__aeabi_fsub+0x46>
 8000bf0:	e07e      	b.n	8000cf0 <__aeabi_fsub+0x144>
 8000bf2:	2e00      	cmp	r6, #0
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_fsub+0x4c>
 8000bf6:	e099      	b.n	8000d2c <__aeabi_fsub+0x180>
 8000bf8:	2cff      	cmp	r4, #255	; 0xff
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_fsub+0x52>
 8000bfc:	e08c      	b.n	8000d18 <__aeabi_fsub+0x16c>
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	4652      	mov	r2, sl
 8000c02:	04db      	lsls	r3, r3, #19
 8000c04:	431a      	orrs	r2, r3
 8000c06:	4692      	mov	sl, r2
 8000c08:	464a      	mov	r2, r9
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	2a1b      	cmp	r2, #27
 8000c0e:	dc08      	bgt.n	8000c22 <__aeabi_fsub+0x76>
 8000c10:	4653      	mov	r3, sl
 8000c12:	2120      	movs	r1, #32
 8000c14:	40d3      	lsrs	r3, r2
 8000c16:	1a89      	subs	r1, r1, r2
 8000c18:	4652      	mov	r2, sl
 8000c1a:	408a      	lsls	r2, r1
 8000c1c:	1e51      	subs	r1, r2, #1
 8000c1e:	418a      	sbcs	r2, r1
 8000c20:	4313      	orrs	r3, r2
 8000c22:	4662      	mov	r2, ip
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	015a      	lsls	r2, r3, #5
 8000c28:	d400      	bmi.n	8000c2c <__aeabi_fsub+0x80>
 8000c2a:	e0f3      	b.n	8000e14 <__aeabi_fsub+0x268>
 8000c2c:	019b      	lsls	r3, r3, #6
 8000c2e:	099e      	lsrs	r6, r3, #6
 8000c30:	0030      	movs	r0, r6
 8000c32:	f002 f80f 	bl	8002c54 <__clzsi2>
 8000c36:	3805      	subs	r0, #5
 8000c38:	4086      	lsls	r6, r0
 8000c3a:	4284      	cmp	r4, r0
 8000c3c:	dd00      	ble.n	8000c40 <__aeabi_fsub+0x94>
 8000c3e:	e0f7      	b.n	8000e30 <__aeabi_fsub+0x284>
 8000c40:	0032      	movs	r2, r6
 8000c42:	1b04      	subs	r4, r0, r4
 8000c44:	2020      	movs	r0, #32
 8000c46:	3401      	adds	r4, #1
 8000c48:	40e2      	lsrs	r2, r4
 8000c4a:	1b04      	subs	r4, r0, r4
 8000c4c:	40a6      	lsls	r6, r4
 8000c4e:	0033      	movs	r3, r6
 8000c50:	1e5e      	subs	r6, r3, #1
 8000c52:	41b3      	sbcs	r3, r6
 8000c54:	2400      	movs	r4, #0
 8000c56:	4313      	orrs	r3, r2
 8000c58:	075a      	lsls	r2, r3, #29
 8000c5a:	d004      	beq.n	8000c66 <__aeabi_fsub+0xba>
 8000c5c:	220f      	movs	r2, #15
 8000c5e:	401a      	ands	r2, r3
 8000c60:	2a04      	cmp	r2, #4
 8000c62:	d000      	beq.n	8000c66 <__aeabi_fsub+0xba>
 8000c64:	3304      	adds	r3, #4
 8000c66:	015a      	lsls	r2, r3, #5
 8000c68:	d400      	bmi.n	8000c6c <__aeabi_fsub+0xc0>
 8000c6a:	e0d6      	b.n	8000e1a <__aeabi_fsub+0x26e>
 8000c6c:	1c62      	adds	r2, r4, #1
 8000c6e:	2cfe      	cmp	r4, #254	; 0xfe
 8000c70:	d100      	bne.n	8000c74 <__aeabi_fsub+0xc8>
 8000c72:	e0da      	b.n	8000e2a <__aeabi_fsub+0x27e>
 8000c74:	019b      	lsls	r3, r3, #6
 8000c76:	0a5f      	lsrs	r7, r3, #9
 8000c78:	b2d0      	uxtb	r0, r2
 8000c7a:	05c0      	lsls	r0, r0, #23
 8000c7c:	4338      	orrs	r0, r7
 8000c7e:	07ed      	lsls	r5, r5, #31
 8000c80:	4328      	orrs	r0, r5
 8000c82:	bce0      	pop	{r5, r6, r7}
 8000c84:	46ba      	mov	sl, r7
 8000c86:	46b1      	mov	r9, r6
 8000c88:	46a8      	mov	r8, r5
 8000c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8c:	1ba2      	subs	r2, r4, r6
 8000c8e:	4691      	mov	r9, r2
 8000c90:	2a00      	cmp	r2, #0
 8000c92:	dd63      	ble.n	8000d5c <__aeabi_fsub+0x1b0>
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d100      	bne.n	8000c9a <__aeabi_fsub+0xee>
 8000c98:	e099      	b.n	8000dce <__aeabi_fsub+0x222>
 8000c9a:	2cff      	cmp	r4, #255	; 0xff
 8000c9c:	d03c      	beq.n	8000d18 <__aeabi_fsub+0x16c>
 8000c9e:	2380      	movs	r3, #128	; 0x80
 8000ca0:	4652      	mov	r2, sl
 8000ca2:	04db      	lsls	r3, r3, #19
 8000ca4:	431a      	orrs	r2, r3
 8000ca6:	4692      	mov	sl, r2
 8000ca8:	464a      	mov	r2, r9
 8000caa:	2301      	movs	r3, #1
 8000cac:	2a1b      	cmp	r2, #27
 8000cae:	dc08      	bgt.n	8000cc2 <__aeabi_fsub+0x116>
 8000cb0:	4653      	mov	r3, sl
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	40d3      	lsrs	r3, r2
 8000cb6:	1a89      	subs	r1, r1, r2
 8000cb8:	4652      	mov	r2, sl
 8000cba:	408a      	lsls	r2, r1
 8000cbc:	1e51      	subs	r1, r2, #1
 8000cbe:	418a      	sbcs	r2, r1
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	015a      	lsls	r2, r3, #5
 8000cc6:	d400      	bmi.n	8000cca <__aeabi_fsub+0x11e>
 8000cc8:	e0a4      	b.n	8000e14 <__aeabi_fsub+0x268>
 8000cca:	3401      	adds	r4, #1
 8000ccc:	2cff      	cmp	r4, #255	; 0xff
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_fsub+0x126>
 8000cd0:	e0ab      	b.n	8000e2a <__aeabi_fsub+0x27e>
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4997      	ldr	r1, [pc, #604]	; (8000f34 <__aeabi_fsub+0x388>)
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	400b      	ands	r3, r1
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	e7bb      	b.n	8000c58 <__aeabi_fsub+0xac>
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	d032      	beq.n	8000d4a <__aeabi_fsub+0x19e>
 8000ce4:	428d      	cmp	r5, r1
 8000ce6:	d035      	beq.n	8000d54 <__aeabi_fsub+0x1a8>
 8000ce8:	22ff      	movs	r2, #255	; 0xff
 8000cea:	4252      	negs	r2, r2
 8000cec:	4691      	mov	r9, r2
 8000cee:	44a1      	add	r9, r4
 8000cf0:	464a      	mov	r2, r9
 8000cf2:	2a00      	cmp	r2, #0
 8000cf4:	d051      	beq.n	8000d9a <__aeabi_fsub+0x1ee>
 8000cf6:	1b30      	subs	r0, r6, r4
 8000cf8:	2c00      	cmp	r4, #0
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_fsub+0x152>
 8000cfc:	e09c      	b.n	8000e38 <__aeabi_fsub+0x28c>
 8000cfe:	4663      	mov	r3, ip
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d100      	bne.n	8000d06 <__aeabi_fsub+0x15a>
 8000d04:	e0df      	b.n	8000ec6 <__aeabi_fsub+0x31a>
 8000d06:	3801      	subs	r0, #1
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d100      	bne.n	8000d0e <__aeabi_fsub+0x162>
 8000d0c:	e0f7      	b.n	8000efe <__aeabi_fsub+0x352>
 8000d0e:	2eff      	cmp	r6, #255	; 0xff
 8000d10:	d000      	beq.n	8000d14 <__aeabi_fsub+0x168>
 8000d12:	e099      	b.n	8000e48 <__aeabi_fsub+0x29c>
 8000d14:	000d      	movs	r5, r1
 8000d16:	4643      	mov	r3, r8
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d100      	bne.n	8000d1e <__aeabi_fsub+0x172>
 8000d1c:	e085      	b.n	8000e2a <__aeabi_fsub+0x27e>
 8000d1e:	2780      	movs	r7, #128	; 0x80
 8000d20:	03ff      	lsls	r7, r7, #15
 8000d22:	431f      	orrs	r7, r3
 8000d24:	027f      	lsls	r7, r7, #9
 8000d26:	20ff      	movs	r0, #255	; 0xff
 8000d28:	0a7f      	lsrs	r7, r7, #9
 8000d2a:	e7a6      	b.n	8000c7a <__aeabi_fsub+0xce>
 8000d2c:	4652      	mov	r2, sl
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d074      	beq.n	8000e1c <__aeabi_fsub+0x270>
 8000d32:	2201      	movs	r2, #1
 8000d34:	4252      	negs	r2, r2
 8000d36:	4690      	mov	r8, r2
 8000d38:	44c1      	add	r9, r8
 8000d3a:	464a      	mov	r2, r9
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d100      	bne.n	8000d42 <__aeabi_fsub+0x196>
 8000d40:	e0c8      	b.n	8000ed4 <__aeabi_fsub+0x328>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d000      	beq.n	8000d48 <__aeabi_fsub+0x19c>
 8000d46:	e75f      	b.n	8000c08 <__aeabi_fsub+0x5c>
 8000d48:	e7e6      	b.n	8000d18 <__aeabi_fsub+0x16c>
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4051      	eors	r1, r2
 8000d4e:	42a9      	cmp	r1, r5
 8000d50:	d000      	beq.n	8000d54 <__aeabi_fsub+0x1a8>
 8000d52:	e749      	b.n	8000be8 <__aeabi_fsub+0x3c>
 8000d54:	22ff      	movs	r2, #255	; 0xff
 8000d56:	4252      	negs	r2, r2
 8000d58:	4691      	mov	r9, r2
 8000d5a:	44a1      	add	r9, r4
 8000d5c:	464a      	mov	r2, r9
 8000d5e:	2a00      	cmp	r2, #0
 8000d60:	d043      	beq.n	8000dea <__aeabi_fsub+0x23e>
 8000d62:	1b31      	subs	r1, r6, r4
 8000d64:	2c00      	cmp	r4, #0
 8000d66:	d100      	bne.n	8000d6a <__aeabi_fsub+0x1be>
 8000d68:	e08c      	b.n	8000e84 <__aeabi_fsub+0x2d8>
 8000d6a:	2eff      	cmp	r6, #255	; 0xff
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_fsub+0x1c4>
 8000d6e:	e092      	b.n	8000e96 <__aeabi_fsub+0x2ea>
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	4662      	mov	r2, ip
 8000d74:	04db      	lsls	r3, r3, #19
 8000d76:	431a      	orrs	r2, r3
 8000d78:	4694      	mov	ip, r2
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	291b      	cmp	r1, #27
 8000d7e:	dc09      	bgt.n	8000d94 <__aeabi_fsub+0x1e8>
 8000d80:	2020      	movs	r0, #32
 8000d82:	4663      	mov	r3, ip
 8000d84:	4662      	mov	r2, ip
 8000d86:	40cb      	lsrs	r3, r1
 8000d88:	1a41      	subs	r1, r0, r1
 8000d8a:	408a      	lsls	r2, r1
 8000d8c:	0011      	movs	r1, r2
 8000d8e:	1e48      	subs	r0, r1, #1
 8000d90:	4181      	sbcs	r1, r0
 8000d92:	430b      	orrs	r3, r1
 8000d94:	0034      	movs	r4, r6
 8000d96:	4453      	add	r3, sl
 8000d98:	e794      	b.n	8000cc4 <__aeabi_fsub+0x118>
 8000d9a:	22fe      	movs	r2, #254	; 0xfe
 8000d9c:	1c66      	adds	r6, r4, #1
 8000d9e:	4232      	tst	r2, r6
 8000da0:	d164      	bne.n	8000e6c <__aeabi_fsub+0x2c0>
 8000da2:	2c00      	cmp	r4, #0
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fsub+0x1fc>
 8000da6:	e082      	b.n	8000eae <__aeabi_fsub+0x302>
 8000da8:	4663      	mov	r3, ip
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d100      	bne.n	8000db0 <__aeabi_fsub+0x204>
 8000dae:	e0ab      	b.n	8000f08 <__aeabi_fsub+0x35c>
 8000db0:	4653      	mov	r3, sl
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d100      	bne.n	8000db8 <__aeabi_fsub+0x20c>
 8000db6:	e760      	b.n	8000c7a <__aeabi_fsub+0xce>
 8000db8:	4663      	mov	r3, ip
 8000dba:	4652      	mov	r2, sl
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	015a      	lsls	r2, r3, #5
 8000dc0:	d400      	bmi.n	8000dc4 <__aeabi_fsub+0x218>
 8000dc2:	e0aa      	b.n	8000f1a <__aeabi_fsub+0x36e>
 8000dc4:	4663      	mov	r3, ip
 8000dc6:	4652      	mov	r2, sl
 8000dc8:	000d      	movs	r5, r1
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	e744      	b.n	8000c58 <__aeabi_fsub+0xac>
 8000dce:	4652      	mov	r2, sl
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	d023      	beq.n	8000e1c <__aeabi_fsub+0x270>
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4252      	negs	r2, r2
 8000dd8:	4690      	mov	r8, r2
 8000dda:	44c1      	add	r9, r8
 8000ddc:	464a      	mov	r2, r9
 8000dde:	2a00      	cmp	r2, #0
 8000de0:	d075      	beq.n	8000ece <__aeabi_fsub+0x322>
 8000de2:	2cff      	cmp	r4, #255	; 0xff
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fsub+0x23c>
 8000de6:	e75f      	b.n	8000ca8 <__aeabi_fsub+0xfc>
 8000de8:	e796      	b.n	8000d18 <__aeabi_fsub+0x16c>
 8000dea:	26fe      	movs	r6, #254	; 0xfe
 8000dec:	3401      	adds	r4, #1
 8000dee:	4226      	tst	r6, r4
 8000df0:	d153      	bne.n	8000e9a <__aeabi_fsub+0x2ee>
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d172      	bne.n	8000edc <__aeabi_fsub+0x330>
 8000df6:	4663      	mov	r3, ip
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_fsub+0x252>
 8000dfc:	e093      	b.n	8000f26 <__aeabi_fsub+0x37a>
 8000dfe:	4653      	mov	r3, sl
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d100      	bne.n	8000e06 <__aeabi_fsub+0x25a>
 8000e04:	e739      	b.n	8000c7a <__aeabi_fsub+0xce>
 8000e06:	4463      	add	r3, ip
 8000e08:	2400      	movs	r4, #0
 8000e0a:	015a      	lsls	r2, r3, #5
 8000e0c:	d502      	bpl.n	8000e14 <__aeabi_fsub+0x268>
 8000e0e:	4a4a      	ldr	r2, [pc, #296]	; (8000f38 <__aeabi_fsub+0x38c>)
 8000e10:	3401      	adds	r4, #1
 8000e12:	4013      	ands	r3, r2
 8000e14:	075a      	lsls	r2, r3, #29
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x26e>
 8000e18:	e720      	b.n	8000c5c <__aeabi_fsub+0xb0>
 8000e1a:	08db      	lsrs	r3, r3, #3
 8000e1c:	2cff      	cmp	r4, #255	; 0xff
 8000e1e:	d100      	bne.n	8000e22 <__aeabi_fsub+0x276>
 8000e20:	e77a      	b.n	8000d18 <__aeabi_fsub+0x16c>
 8000e22:	025b      	lsls	r3, r3, #9
 8000e24:	0a5f      	lsrs	r7, r3, #9
 8000e26:	b2e0      	uxtb	r0, r4
 8000e28:	e727      	b.n	8000c7a <__aeabi_fsub+0xce>
 8000e2a:	20ff      	movs	r0, #255	; 0xff
 8000e2c:	2700      	movs	r7, #0
 8000e2e:	e724      	b.n	8000c7a <__aeabi_fsub+0xce>
 8000e30:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <__aeabi_fsub+0x38c>)
 8000e32:	1a24      	subs	r4, r4, r0
 8000e34:	4033      	ands	r3, r6
 8000e36:	e70f      	b.n	8000c58 <__aeabi_fsub+0xac>
 8000e38:	2eff      	cmp	r6, #255	; 0xff
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_fsub+0x292>
 8000e3c:	e76a      	b.n	8000d14 <__aeabi_fsub+0x168>
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	4662      	mov	r2, ip
 8000e42:	04db      	lsls	r3, r3, #19
 8000e44:	431a      	orrs	r2, r3
 8000e46:	4694      	mov	ip, r2
 8000e48:	2301      	movs	r3, #1
 8000e4a:	281b      	cmp	r0, #27
 8000e4c:	dc09      	bgt.n	8000e62 <__aeabi_fsub+0x2b6>
 8000e4e:	2420      	movs	r4, #32
 8000e50:	4663      	mov	r3, ip
 8000e52:	4662      	mov	r2, ip
 8000e54:	40c3      	lsrs	r3, r0
 8000e56:	1a20      	subs	r0, r4, r0
 8000e58:	4082      	lsls	r2, r0
 8000e5a:	0010      	movs	r0, r2
 8000e5c:	1e44      	subs	r4, r0, #1
 8000e5e:	41a0      	sbcs	r0, r4
 8000e60:	4303      	orrs	r3, r0
 8000e62:	4652      	mov	r2, sl
 8000e64:	000d      	movs	r5, r1
 8000e66:	0034      	movs	r4, r6
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	e6dc      	b.n	8000c26 <__aeabi_fsub+0x7a>
 8000e6c:	4663      	mov	r3, ip
 8000e6e:	4652      	mov	r2, sl
 8000e70:	1a9e      	subs	r6, r3, r2
 8000e72:	0173      	lsls	r3, r6, #5
 8000e74:	d417      	bmi.n	8000ea6 <__aeabi_fsub+0x2fa>
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d000      	beq.n	8000e7c <__aeabi_fsub+0x2d0>
 8000e7a:	e6d9      	b.n	8000c30 <__aeabi_fsub+0x84>
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	2000      	movs	r0, #0
 8000e80:	2700      	movs	r7, #0
 8000e82:	e6fa      	b.n	8000c7a <__aeabi_fsub+0xce>
 8000e84:	4663      	mov	r3, ip
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d044      	beq.n	8000f14 <__aeabi_fsub+0x368>
 8000e8a:	3901      	subs	r1, #1
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	d04c      	beq.n	8000f2a <__aeabi_fsub+0x37e>
 8000e90:	2eff      	cmp	r6, #255	; 0xff
 8000e92:	d000      	beq.n	8000e96 <__aeabi_fsub+0x2ea>
 8000e94:	e771      	b.n	8000d7a <__aeabi_fsub+0x1ce>
 8000e96:	4643      	mov	r3, r8
 8000e98:	e73e      	b.n	8000d18 <__aeabi_fsub+0x16c>
 8000e9a:	2cff      	cmp	r4, #255	; 0xff
 8000e9c:	d0c5      	beq.n	8000e2a <__aeabi_fsub+0x27e>
 8000e9e:	4652      	mov	r2, sl
 8000ea0:	4462      	add	r2, ip
 8000ea2:	0853      	lsrs	r3, r2, #1
 8000ea4:	e7b6      	b.n	8000e14 <__aeabi_fsub+0x268>
 8000ea6:	4663      	mov	r3, ip
 8000ea8:	000d      	movs	r5, r1
 8000eaa:	1ad6      	subs	r6, r2, r3
 8000eac:	e6c0      	b.n	8000c30 <__aeabi_fsub+0x84>
 8000eae:	4662      	mov	r2, ip
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	d116      	bne.n	8000ee2 <__aeabi_fsub+0x336>
 8000eb4:	4653      	mov	r3, sl
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d000      	beq.n	8000ebc <__aeabi_fsub+0x310>
 8000eba:	e72b      	b.n	8000d14 <__aeabi_fsub+0x168>
 8000ebc:	2780      	movs	r7, #128	; 0x80
 8000ebe:	2500      	movs	r5, #0
 8000ec0:	20ff      	movs	r0, #255	; 0xff
 8000ec2:	03ff      	lsls	r7, r7, #15
 8000ec4:	e6d9      	b.n	8000c7a <__aeabi_fsub+0xce>
 8000ec6:	000d      	movs	r5, r1
 8000ec8:	4643      	mov	r3, r8
 8000eca:	0034      	movs	r4, r6
 8000ecc:	e7a6      	b.n	8000e1c <__aeabi_fsub+0x270>
 8000ece:	4653      	mov	r3, sl
 8000ed0:	4463      	add	r3, ip
 8000ed2:	e6f7      	b.n	8000cc4 <__aeabi_fsub+0x118>
 8000ed4:	4663      	mov	r3, ip
 8000ed6:	4652      	mov	r2, sl
 8000ed8:	1a9b      	subs	r3, r3, r2
 8000eda:	e6a4      	b.n	8000c26 <__aeabi_fsub+0x7a>
 8000edc:	4662      	mov	r2, ip
 8000ede:	2a00      	cmp	r2, #0
 8000ee0:	d0d9      	beq.n	8000e96 <__aeabi_fsub+0x2ea>
 8000ee2:	4652      	mov	r2, sl
 8000ee4:	2a00      	cmp	r2, #0
 8000ee6:	d100      	bne.n	8000eea <__aeabi_fsub+0x33e>
 8000ee8:	e716      	b.n	8000d18 <__aeabi_fsub+0x16c>
 8000eea:	2280      	movs	r2, #128	; 0x80
 8000eec:	03d2      	lsls	r2, r2, #15
 8000eee:	4213      	tst	r3, r2
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_fsub+0x348>
 8000ef2:	e711      	b.n	8000d18 <__aeabi_fsub+0x16c>
 8000ef4:	4640      	mov	r0, r8
 8000ef6:	4210      	tst	r0, r2
 8000ef8:	d000      	beq.n	8000efc <__aeabi_fsub+0x350>
 8000efa:	e70d      	b.n	8000d18 <__aeabi_fsub+0x16c>
 8000efc:	e70a      	b.n	8000d14 <__aeabi_fsub+0x168>
 8000efe:	4652      	mov	r2, sl
 8000f00:	000d      	movs	r5, r1
 8000f02:	0034      	movs	r4, r6
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	e68e      	b.n	8000c26 <__aeabi_fsub+0x7a>
 8000f08:	4653      	mov	r3, sl
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d008      	beq.n	8000f20 <__aeabi_fsub+0x374>
 8000f0e:	000d      	movs	r5, r1
 8000f10:	4647      	mov	r7, r8
 8000f12:	e6b2      	b.n	8000c7a <__aeabi_fsub+0xce>
 8000f14:	4643      	mov	r3, r8
 8000f16:	0034      	movs	r4, r6
 8000f18:	e780      	b.n	8000e1c <__aeabi_fsub+0x270>
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_fsub+0x374>
 8000f1e:	e779      	b.n	8000e14 <__aeabi_fsub+0x268>
 8000f20:	2500      	movs	r5, #0
 8000f22:	2700      	movs	r7, #0
 8000f24:	e6a9      	b.n	8000c7a <__aeabi_fsub+0xce>
 8000f26:	4647      	mov	r7, r8
 8000f28:	e6a7      	b.n	8000c7a <__aeabi_fsub+0xce>
 8000f2a:	4653      	mov	r3, sl
 8000f2c:	0034      	movs	r4, r6
 8000f2e:	4463      	add	r3, ip
 8000f30:	e6c8      	b.n	8000cc4 <__aeabi_fsub+0x118>
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	7dffffff 	.word	0x7dffffff
 8000f38:	fbffffff 	.word	0xfbffffff

08000f3c <__aeabi_f2iz>:
 8000f3c:	0241      	lsls	r1, r0, #9
 8000f3e:	0042      	lsls	r2, r0, #1
 8000f40:	0fc3      	lsrs	r3, r0, #31
 8000f42:	0a49      	lsrs	r1, r1, #9
 8000f44:	2000      	movs	r0, #0
 8000f46:	0e12      	lsrs	r2, r2, #24
 8000f48:	2a7e      	cmp	r2, #126	; 0x7e
 8000f4a:	d903      	bls.n	8000f54 <__aeabi_f2iz+0x18>
 8000f4c:	2a9d      	cmp	r2, #157	; 0x9d
 8000f4e:	d902      	bls.n	8000f56 <__aeabi_f2iz+0x1a>
 8000f50:	4a09      	ldr	r2, [pc, #36]	; (8000f78 <__aeabi_f2iz+0x3c>)
 8000f52:	1898      	adds	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	2080      	movs	r0, #128	; 0x80
 8000f58:	0400      	lsls	r0, r0, #16
 8000f5a:	4301      	orrs	r1, r0
 8000f5c:	2a95      	cmp	r2, #149	; 0x95
 8000f5e:	dc07      	bgt.n	8000f70 <__aeabi_f2iz+0x34>
 8000f60:	2096      	movs	r0, #150	; 0x96
 8000f62:	1a82      	subs	r2, r0, r2
 8000f64:	40d1      	lsrs	r1, r2
 8000f66:	4248      	negs	r0, r1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f3      	bne.n	8000f54 <__aeabi_f2iz+0x18>
 8000f6c:	0008      	movs	r0, r1
 8000f6e:	e7f1      	b.n	8000f54 <__aeabi_f2iz+0x18>
 8000f70:	3a96      	subs	r2, #150	; 0x96
 8000f72:	4091      	lsls	r1, r2
 8000f74:	e7f7      	b.n	8000f66 <__aeabi_f2iz+0x2a>
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	7fffffff 	.word	0x7fffffff

08000f7c <__aeabi_ui2f>:
 8000f7c:	b570      	push	{r4, r5, r6, lr}
 8000f7e:	1e05      	subs	r5, r0, #0
 8000f80:	d00e      	beq.n	8000fa0 <__aeabi_ui2f+0x24>
 8000f82:	f001 fe67 	bl	8002c54 <__clzsi2>
 8000f86:	239e      	movs	r3, #158	; 0x9e
 8000f88:	0004      	movs	r4, r0
 8000f8a:	1a1b      	subs	r3, r3, r0
 8000f8c:	2b96      	cmp	r3, #150	; 0x96
 8000f8e:	dc0c      	bgt.n	8000faa <__aeabi_ui2f+0x2e>
 8000f90:	2808      	cmp	r0, #8
 8000f92:	dd01      	ble.n	8000f98 <__aeabi_ui2f+0x1c>
 8000f94:	3c08      	subs	r4, #8
 8000f96:	40a5      	lsls	r5, r4
 8000f98:	026d      	lsls	r5, r5, #9
 8000f9a:	0a6d      	lsrs	r5, r5, #9
 8000f9c:	b2d8      	uxtb	r0, r3
 8000f9e:	e001      	b.n	8000fa4 <__aeabi_ui2f+0x28>
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	2500      	movs	r5, #0
 8000fa4:	05c0      	lsls	r0, r0, #23
 8000fa6:	4328      	orrs	r0, r5
 8000fa8:	bd70      	pop	{r4, r5, r6, pc}
 8000faa:	2b99      	cmp	r3, #153	; 0x99
 8000fac:	dd09      	ble.n	8000fc2 <__aeabi_ui2f+0x46>
 8000fae:	0002      	movs	r2, r0
 8000fb0:	0029      	movs	r1, r5
 8000fb2:	321b      	adds	r2, #27
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	1e4a      	subs	r2, r1, #1
 8000fb8:	4191      	sbcs	r1, r2
 8000fba:	2205      	movs	r2, #5
 8000fbc:	1a12      	subs	r2, r2, r0
 8000fbe:	40d5      	lsrs	r5, r2
 8000fc0:	430d      	orrs	r5, r1
 8000fc2:	2c05      	cmp	r4, #5
 8000fc4:	dd01      	ble.n	8000fca <__aeabi_ui2f+0x4e>
 8000fc6:	1f62      	subs	r2, r4, #5
 8000fc8:	4095      	lsls	r5, r2
 8000fca:	0029      	movs	r1, r5
 8000fcc:	4e08      	ldr	r6, [pc, #32]	; (8000ff0 <__aeabi_ui2f+0x74>)
 8000fce:	4031      	ands	r1, r6
 8000fd0:	076a      	lsls	r2, r5, #29
 8000fd2:	d009      	beq.n	8000fe8 <__aeabi_ui2f+0x6c>
 8000fd4:	200f      	movs	r0, #15
 8000fd6:	4028      	ands	r0, r5
 8000fd8:	2804      	cmp	r0, #4
 8000fda:	d005      	beq.n	8000fe8 <__aeabi_ui2f+0x6c>
 8000fdc:	3104      	adds	r1, #4
 8000fde:	014a      	lsls	r2, r1, #5
 8000fe0:	d502      	bpl.n	8000fe8 <__aeabi_ui2f+0x6c>
 8000fe2:	239f      	movs	r3, #159	; 0x9f
 8000fe4:	4031      	ands	r1, r6
 8000fe6:	1b1b      	subs	r3, r3, r4
 8000fe8:	0189      	lsls	r1, r1, #6
 8000fea:	0a4d      	lsrs	r5, r1, #9
 8000fec:	b2d8      	uxtb	r0, r3
 8000fee:	e7d9      	b.n	8000fa4 <__aeabi_ui2f+0x28>
 8000ff0:	fbffffff 	.word	0xfbffffff

08000ff4 <__aeabi_dadd>:
 8000ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff6:	464f      	mov	r7, r9
 8000ff8:	46d6      	mov	lr, sl
 8000ffa:	4646      	mov	r6, r8
 8000ffc:	000d      	movs	r5, r1
 8000ffe:	0001      	movs	r1, r0
 8001000:	0018      	movs	r0, r3
 8001002:	b5c0      	push	{r6, r7, lr}
 8001004:	0017      	movs	r7, r2
 8001006:	032b      	lsls	r3, r5, #12
 8001008:	0a5a      	lsrs	r2, r3, #9
 800100a:	0f4b      	lsrs	r3, r1, #29
 800100c:	4313      	orrs	r3, r2
 800100e:	00ca      	lsls	r2, r1, #3
 8001010:	4691      	mov	r9, r2
 8001012:	0302      	lsls	r2, r0, #12
 8001014:	006e      	lsls	r6, r5, #1
 8001016:	0041      	lsls	r1, r0, #1
 8001018:	0a52      	lsrs	r2, r2, #9
 800101a:	0fec      	lsrs	r4, r5, #31
 800101c:	0f7d      	lsrs	r5, r7, #29
 800101e:	4315      	orrs	r5, r2
 8001020:	0d76      	lsrs	r6, r6, #21
 8001022:	0d49      	lsrs	r1, r1, #21
 8001024:	0fc0      	lsrs	r0, r0, #31
 8001026:	4682      	mov	sl, r0
 8001028:	46ac      	mov	ip, r5
 800102a:	00ff      	lsls	r7, r7, #3
 800102c:	1a72      	subs	r2, r6, r1
 800102e:	4284      	cmp	r4, r0
 8001030:	d100      	bne.n	8001034 <__aeabi_dadd+0x40>
 8001032:	e098      	b.n	8001166 <__aeabi_dadd+0x172>
 8001034:	2a00      	cmp	r2, #0
 8001036:	dc00      	bgt.n	800103a <__aeabi_dadd+0x46>
 8001038:	e081      	b.n	800113e <__aeabi_dadd+0x14a>
 800103a:	2900      	cmp	r1, #0
 800103c:	d100      	bne.n	8001040 <__aeabi_dadd+0x4c>
 800103e:	e0b6      	b.n	80011ae <__aeabi_dadd+0x1ba>
 8001040:	49c9      	ldr	r1, [pc, #804]	; (8001368 <__aeabi_dadd+0x374>)
 8001042:	428e      	cmp	r6, r1
 8001044:	d100      	bne.n	8001048 <__aeabi_dadd+0x54>
 8001046:	e172      	b.n	800132e <__aeabi_dadd+0x33a>
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	0028      	movs	r0, r5
 800104c:	0409      	lsls	r1, r1, #16
 800104e:	4308      	orrs	r0, r1
 8001050:	4684      	mov	ip, r0
 8001052:	2a38      	cmp	r2, #56	; 0x38
 8001054:	dd00      	ble.n	8001058 <__aeabi_dadd+0x64>
 8001056:	e15e      	b.n	8001316 <__aeabi_dadd+0x322>
 8001058:	2a1f      	cmp	r2, #31
 800105a:	dd00      	ble.n	800105e <__aeabi_dadd+0x6a>
 800105c:	e1ee      	b.n	800143c <__aeabi_dadd+0x448>
 800105e:	2020      	movs	r0, #32
 8001060:	0039      	movs	r1, r7
 8001062:	4665      	mov	r5, ip
 8001064:	1a80      	subs	r0, r0, r2
 8001066:	4087      	lsls	r7, r0
 8001068:	40d1      	lsrs	r1, r2
 800106a:	4085      	lsls	r5, r0
 800106c:	430d      	orrs	r5, r1
 800106e:	0039      	movs	r1, r7
 8001070:	1e4f      	subs	r7, r1, #1
 8001072:	41b9      	sbcs	r1, r7
 8001074:	4667      	mov	r7, ip
 8001076:	40d7      	lsrs	r7, r2
 8001078:	4329      	orrs	r1, r5
 800107a:	1bdb      	subs	r3, r3, r7
 800107c:	464a      	mov	r2, r9
 800107e:	1a55      	subs	r5, r2, r1
 8001080:	45a9      	cmp	r9, r5
 8001082:	4189      	sbcs	r1, r1
 8001084:	4249      	negs	r1, r1
 8001086:	1a5b      	subs	r3, r3, r1
 8001088:	4698      	mov	r8, r3
 800108a:	4643      	mov	r3, r8
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	d400      	bmi.n	8001092 <__aeabi_dadd+0x9e>
 8001090:	e0cc      	b.n	800122c <__aeabi_dadd+0x238>
 8001092:	4643      	mov	r3, r8
 8001094:	025b      	lsls	r3, r3, #9
 8001096:	0a5b      	lsrs	r3, r3, #9
 8001098:	4698      	mov	r8, r3
 800109a:	4643      	mov	r3, r8
 800109c:	2b00      	cmp	r3, #0
 800109e:	d100      	bne.n	80010a2 <__aeabi_dadd+0xae>
 80010a0:	e12c      	b.n	80012fc <__aeabi_dadd+0x308>
 80010a2:	4640      	mov	r0, r8
 80010a4:	f001 fdd6 	bl	8002c54 <__clzsi2>
 80010a8:	0001      	movs	r1, r0
 80010aa:	3908      	subs	r1, #8
 80010ac:	2220      	movs	r2, #32
 80010ae:	0028      	movs	r0, r5
 80010b0:	4643      	mov	r3, r8
 80010b2:	1a52      	subs	r2, r2, r1
 80010b4:	408b      	lsls	r3, r1
 80010b6:	40d0      	lsrs	r0, r2
 80010b8:	408d      	lsls	r5, r1
 80010ba:	4303      	orrs	r3, r0
 80010bc:	428e      	cmp	r6, r1
 80010be:	dd00      	ble.n	80010c2 <__aeabi_dadd+0xce>
 80010c0:	e117      	b.n	80012f2 <__aeabi_dadd+0x2fe>
 80010c2:	1b8e      	subs	r6, r1, r6
 80010c4:	1c72      	adds	r2, r6, #1
 80010c6:	2a1f      	cmp	r2, #31
 80010c8:	dd00      	ble.n	80010cc <__aeabi_dadd+0xd8>
 80010ca:	e1a7      	b.n	800141c <__aeabi_dadd+0x428>
 80010cc:	2120      	movs	r1, #32
 80010ce:	0018      	movs	r0, r3
 80010d0:	002e      	movs	r6, r5
 80010d2:	1a89      	subs	r1, r1, r2
 80010d4:	408d      	lsls	r5, r1
 80010d6:	4088      	lsls	r0, r1
 80010d8:	40d6      	lsrs	r6, r2
 80010da:	40d3      	lsrs	r3, r2
 80010dc:	1e69      	subs	r1, r5, #1
 80010de:	418d      	sbcs	r5, r1
 80010e0:	4330      	orrs	r0, r6
 80010e2:	4698      	mov	r8, r3
 80010e4:	2600      	movs	r6, #0
 80010e6:	4305      	orrs	r5, r0
 80010e8:	076b      	lsls	r3, r5, #29
 80010ea:	d009      	beq.n	8001100 <__aeabi_dadd+0x10c>
 80010ec:	230f      	movs	r3, #15
 80010ee:	402b      	ands	r3, r5
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d005      	beq.n	8001100 <__aeabi_dadd+0x10c>
 80010f4:	1d2b      	adds	r3, r5, #4
 80010f6:	42ab      	cmp	r3, r5
 80010f8:	41ad      	sbcs	r5, r5
 80010fa:	426d      	negs	r5, r5
 80010fc:	44a8      	add	r8, r5
 80010fe:	001d      	movs	r5, r3
 8001100:	4643      	mov	r3, r8
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	d400      	bmi.n	8001108 <__aeabi_dadd+0x114>
 8001106:	e094      	b.n	8001232 <__aeabi_dadd+0x23e>
 8001108:	4b97      	ldr	r3, [pc, #604]	; (8001368 <__aeabi_dadd+0x374>)
 800110a:	1c72      	adds	r2, r6, #1
 800110c:	429a      	cmp	r2, r3
 800110e:	d100      	bne.n	8001112 <__aeabi_dadd+0x11e>
 8001110:	e09d      	b.n	800124e <__aeabi_dadd+0x25a>
 8001112:	4641      	mov	r1, r8
 8001114:	4b95      	ldr	r3, [pc, #596]	; (800136c <__aeabi_dadd+0x378>)
 8001116:	08ed      	lsrs	r5, r5, #3
 8001118:	4019      	ands	r1, r3
 800111a:	000b      	movs	r3, r1
 800111c:	0552      	lsls	r2, r2, #21
 800111e:	0749      	lsls	r1, r1, #29
 8001120:	025b      	lsls	r3, r3, #9
 8001122:	4329      	orrs	r1, r5
 8001124:	0b1b      	lsrs	r3, r3, #12
 8001126:	0d52      	lsrs	r2, r2, #21
 8001128:	0512      	lsls	r2, r2, #20
 800112a:	4313      	orrs	r3, r2
 800112c:	07e4      	lsls	r4, r4, #31
 800112e:	4323      	orrs	r3, r4
 8001130:	0008      	movs	r0, r1
 8001132:	0019      	movs	r1, r3
 8001134:	bce0      	pop	{r5, r6, r7}
 8001136:	46ba      	mov	sl, r7
 8001138:	46b1      	mov	r9, r6
 800113a:	46a8      	mov	r8, r5
 800113c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800113e:	2a00      	cmp	r2, #0
 8001140:	d043      	beq.n	80011ca <__aeabi_dadd+0x1d6>
 8001142:	1b8a      	subs	r2, r1, r6
 8001144:	2e00      	cmp	r6, #0
 8001146:	d000      	beq.n	800114a <__aeabi_dadd+0x156>
 8001148:	e12a      	b.n	80013a0 <__aeabi_dadd+0x3ac>
 800114a:	464c      	mov	r4, r9
 800114c:	431c      	orrs	r4, r3
 800114e:	d100      	bne.n	8001152 <__aeabi_dadd+0x15e>
 8001150:	e1d1      	b.n	80014f6 <__aeabi_dadd+0x502>
 8001152:	1e54      	subs	r4, r2, #1
 8001154:	2a01      	cmp	r2, #1
 8001156:	d100      	bne.n	800115a <__aeabi_dadd+0x166>
 8001158:	e21f      	b.n	800159a <__aeabi_dadd+0x5a6>
 800115a:	4d83      	ldr	r5, [pc, #524]	; (8001368 <__aeabi_dadd+0x374>)
 800115c:	42aa      	cmp	r2, r5
 800115e:	d100      	bne.n	8001162 <__aeabi_dadd+0x16e>
 8001160:	e272      	b.n	8001648 <__aeabi_dadd+0x654>
 8001162:	0022      	movs	r2, r4
 8001164:	e123      	b.n	80013ae <__aeabi_dadd+0x3ba>
 8001166:	2a00      	cmp	r2, #0
 8001168:	dc00      	bgt.n	800116c <__aeabi_dadd+0x178>
 800116a:	e098      	b.n	800129e <__aeabi_dadd+0x2aa>
 800116c:	2900      	cmp	r1, #0
 800116e:	d042      	beq.n	80011f6 <__aeabi_dadd+0x202>
 8001170:	497d      	ldr	r1, [pc, #500]	; (8001368 <__aeabi_dadd+0x374>)
 8001172:	428e      	cmp	r6, r1
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x184>
 8001176:	e0da      	b.n	800132e <__aeabi_dadd+0x33a>
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	0028      	movs	r0, r5
 800117c:	0409      	lsls	r1, r1, #16
 800117e:	4308      	orrs	r0, r1
 8001180:	4684      	mov	ip, r0
 8001182:	2a38      	cmp	r2, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x194>
 8001186:	e129      	b.n	80013dc <__aeabi_dadd+0x3e8>
 8001188:	2a1f      	cmp	r2, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x19a>
 800118c:	e187      	b.n	800149e <__aeabi_dadd+0x4aa>
 800118e:	0011      	movs	r1, r2
 8001190:	4665      	mov	r5, ip
 8001192:	3920      	subs	r1, #32
 8001194:	40cd      	lsrs	r5, r1
 8001196:	2a20      	cmp	r2, #32
 8001198:	d004      	beq.n	80011a4 <__aeabi_dadd+0x1b0>
 800119a:	2040      	movs	r0, #64	; 0x40
 800119c:	4661      	mov	r1, ip
 800119e:	1a82      	subs	r2, r0, r2
 80011a0:	4091      	lsls	r1, r2
 80011a2:	430f      	orrs	r7, r1
 80011a4:	0039      	movs	r1, r7
 80011a6:	1e4f      	subs	r7, r1, #1
 80011a8:	41b9      	sbcs	r1, r7
 80011aa:	430d      	orrs	r5, r1
 80011ac:	e11b      	b.n	80013e6 <__aeabi_dadd+0x3f2>
 80011ae:	0029      	movs	r1, r5
 80011b0:	4339      	orrs	r1, r7
 80011b2:	d100      	bne.n	80011b6 <__aeabi_dadd+0x1c2>
 80011b4:	e0b5      	b.n	8001322 <__aeabi_dadd+0x32e>
 80011b6:	1e51      	subs	r1, r2, #1
 80011b8:	2a01      	cmp	r2, #1
 80011ba:	d100      	bne.n	80011be <__aeabi_dadd+0x1ca>
 80011bc:	e1ab      	b.n	8001516 <__aeabi_dadd+0x522>
 80011be:	486a      	ldr	r0, [pc, #424]	; (8001368 <__aeabi_dadd+0x374>)
 80011c0:	4282      	cmp	r2, r0
 80011c2:	d100      	bne.n	80011c6 <__aeabi_dadd+0x1d2>
 80011c4:	e1b2      	b.n	800152c <__aeabi_dadd+0x538>
 80011c6:	000a      	movs	r2, r1
 80011c8:	e743      	b.n	8001052 <__aeabi_dadd+0x5e>
 80011ca:	4969      	ldr	r1, [pc, #420]	; (8001370 <__aeabi_dadd+0x37c>)
 80011cc:	1c75      	adds	r5, r6, #1
 80011ce:	420d      	tst	r5, r1
 80011d0:	d000      	beq.n	80011d4 <__aeabi_dadd+0x1e0>
 80011d2:	e0cf      	b.n	8001374 <__aeabi_dadd+0x380>
 80011d4:	2e00      	cmp	r6, #0
 80011d6:	d000      	beq.n	80011da <__aeabi_dadd+0x1e6>
 80011d8:	e193      	b.n	8001502 <__aeabi_dadd+0x50e>
 80011da:	4649      	mov	r1, r9
 80011dc:	4319      	orrs	r1, r3
 80011de:	d100      	bne.n	80011e2 <__aeabi_dadd+0x1ee>
 80011e0:	e1d1      	b.n	8001586 <__aeabi_dadd+0x592>
 80011e2:	4661      	mov	r1, ip
 80011e4:	4339      	orrs	r1, r7
 80011e6:	d000      	beq.n	80011ea <__aeabi_dadd+0x1f6>
 80011e8:	e1e3      	b.n	80015b2 <__aeabi_dadd+0x5be>
 80011ea:	4649      	mov	r1, r9
 80011ec:	0758      	lsls	r0, r3, #29
 80011ee:	08c9      	lsrs	r1, r1, #3
 80011f0:	4301      	orrs	r1, r0
 80011f2:	08db      	lsrs	r3, r3, #3
 80011f4:	e026      	b.n	8001244 <__aeabi_dadd+0x250>
 80011f6:	0029      	movs	r1, r5
 80011f8:	4339      	orrs	r1, r7
 80011fa:	d100      	bne.n	80011fe <__aeabi_dadd+0x20a>
 80011fc:	e091      	b.n	8001322 <__aeabi_dadd+0x32e>
 80011fe:	1e51      	subs	r1, r2, #1
 8001200:	2a01      	cmp	r2, #1
 8001202:	d005      	beq.n	8001210 <__aeabi_dadd+0x21c>
 8001204:	4858      	ldr	r0, [pc, #352]	; (8001368 <__aeabi_dadd+0x374>)
 8001206:	4282      	cmp	r2, r0
 8001208:	d100      	bne.n	800120c <__aeabi_dadd+0x218>
 800120a:	e18f      	b.n	800152c <__aeabi_dadd+0x538>
 800120c:	000a      	movs	r2, r1
 800120e:	e7b8      	b.n	8001182 <__aeabi_dadd+0x18e>
 8001210:	003d      	movs	r5, r7
 8001212:	444d      	add	r5, r9
 8001214:	454d      	cmp	r5, r9
 8001216:	4189      	sbcs	r1, r1
 8001218:	4463      	add	r3, ip
 800121a:	4698      	mov	r8, r3
 800121c:	4249      	negs	r1, r1
 800121e:	4488      	add	r8, r1
 8001220:	4643      	mov	r3, r8
 8001222:	2602      	movs	r6, #2
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	d500      	bpl.n	800122a <__aeabi_dadd+0x236>
 8001228:	e0eb      	b.n	8001402 <__aeabi_dadd+0x40e>
 800122a:	3e01      	subs	r6, #1
 800122c:	076b      	lsls	r3, r5, #29
 800122e:	d000      	beq.n	8001232 <__aeabi_dadd+0x23e>
 8001230:	e75c      	b.n	80010ec <__aeabi_dadd+0xf8>
 8001232:	4643      	mov	r3, r8
 8001234:	08e9      	lsrs	r1, r5, #3
 8001236:	075a      	lsls	r2, r3, #29
 8001238:	4311      	orrs	r1, r2
 800123a:	0032      	movs	r2, r6
 800123c:	08db      	lsrs	r3, r3, #3
 800123e:	484a      	ldr	r0, [pc, #296]	; (8001368 <__aeabi_dadd+0x374>)
 8001240:	4282      	cmp	r2, r0
 8001242:	d021      	beq.n	8001288 <__aeabi_dadd+0x294>
 8001244:	031b      	lsls	r3, r3, #12
 8001246:	0552      	lsls	r2, r2, #21
 8001248:	0b1b      	lsrs	r3, r3, #12
 800124a:	0d52      	lsrs	r2, r2, #21
 800124c:	e76c      	b.n	8001128 <__aeabi_dadd+0x134>
 800124e:	2300      	movs	r3, #0
 8001250:	2100      	movs	r1, #0
 8001252:	e769      	b.n	8001128 <__aeabi_dadd+0x134>
 8001254:	002a      	movs	r2, r5
 8001256:	433a      	orrs	r2, r7
 8001258:	d069      	beq.n	800132e <__aeabi_dadd+0x33a>
 800125a:	464a      	mov	r2, r9
 800125c:	0758      	lsls	r0, r3, #29
 800125e:	08d1      	lsrs	r1, r2, #3
 8001260:	08da      	lsrs	r2, r3, #3
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	031b      	lsls	r3, r3, #12
 8001266:	4308      	orrs	r0, r1
 8001268:	421a      	tst	r2, r3
 800126a:	d007      	beq.n	800127c <__aeabi_dadd+0x288>
 800126c:	0029      	movs	r1, r5
 800126e:	08ed      	lsrs	r5, r5, #3
 8001270:	421d      	tst	r5, r3
 8001272:	d103      	bne.n	800127c <__aeabi_dadd+0x288>
 8001274:	002a      	movs	r2, r5
 8001276:	08ff      	lsrs	r7, r7, #3
 8001278:	0748      	lsls	r0, r1, #29
 800127a:	4338      	orrs	r0, r7
 800127c:	0f43      	lsrs	r3, r0, #29
 800127e:	00c1      	lsls	r1, r0, #3
 8001280:	075b      	lsls	r3, r3, #29
 8001282:	08c9      	lsrs	r1, r1, #3
 8001284:	4319      	orrs	r1, r3
 8001286:	0013      	movs	r3, r2
 8001288:	000a      	movs	r2, r1
 800128a:	431a      	orrs	r2, r3
 800128c:	d100      	bne.n	8001290 <__aeabi_dadd+0x29c>
 800128e:	e213      	b.n	80016b8 <__aeabi_dadd+0x6c4>
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	0312      	lsls	r2, r2, #12
 8001294:	4313      	orrs	r3, r2
 8001296:	031b      	lsls	r3, r3, #12
 8001298:	4a33      	ldr	r2, [pc, #204]	; (8001368 <__aeabi_dadd+0x374>)
 800129a:	0b1b      	lsrs	r3, r3, #12
 800129c:	e744      	b.n	8001128 <__aeabi_dadd+0x134>
 800129e:	2a00      	cmp	r2, #0
 80012a0:	d04b      	beq.n	800133a <__aeabi_dadd+0x346>
 80012a2:	1b8a      	subs	r2, r1, r6
 80012a4:	2e00      	cmp	r6, #0
 80012a6:	d100      	bne.n	80012aa <__aeabi_dadd+0x2b6>
 80012a8:	e0e7      	b.n	800147a <__aeabi_dadd+0x486>
 80012aa:	482f      	ldr	r0, [pc, #188]	; (8001368 <__aeabi_dadd+0x374>)
 80012ac:	4281      	cmp	r1, r0
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dadd+0x2be>
 80012b0:	e195      	b.n	80015de <__aeabi_dadd+0x5ea>
 80012b2:	2080      	movs	r0, #128	; 0x80
 80012b4:	0400      	lsls	r0, r0, #16
 80012b6:	4303      	orrs	r3, r0
 80012b8:	2a38      	cmp	r2, #56	; 0x38
 80012ba:	dd00      	ble.n	80012be <__aeabi_dadd+0x2ca>
 80012bc:	e143      	b.n	8001546 <__aeabi_dadd+0x552>
 80012be:	2a1f      	cmp	r2, #31
 80012c0:	dd00      	ble.n	80012c4 <__aeabi_dadd+0x2d0>
 80012c2:	e1db      	b.n	800167c <__aeabi_dadd+0x688>
 80012c4:	2020      	movs	r0, #32
 80012c6:	001d      	movs	r5, r3
 80012c8:	464e      	mov	r6, r9
 80012ca:	1a80      	subs	r0, r0, r2
 80012cc:	4085      	lsls	r5, r0
 80012ce:	40d6      	lsrs	r6, r2
 80012d0:	4335      	orrs	r5, r6
 80012d2:	464e      	mov	r6, r9
 80012d4:	4086      	lsls	r6, r0
 80012d6:	0030      	movs	r0, r6
 80012d8:	40d3      	lsrs	r3, r2
 80012da:	1e46      	subs	r6, r0, #1
 80012dc:	41b0      	sbcs	r0, r6
 80012de:	449c      	add	ip, r3
 80012e0:	4305      	orrs	r5, r0
 80012e2:	19ed      	adds	r5, r5, r7
 80012e4:	42bd      	cmp	r5, r7
 80012e6:	419b      	sbcs	r3, r3
 80012e8:	425b      	negs	r3, r3
 80012ea:	4463      	add	r3, ip
 80012ec:	4698      	mov	r8, r3
 80012ee:	000e      	movs	r6, r1
 80012f0:	e07f      	b.n	80013f2 <__aeabi_dadd+0x3fe>
 80012f2:	4a1e      	ldr	r2, [pc, #120]	; (800136c <__aeabi_dadd+0x378>)
 80012f4:	1a76      	subs	r6, r6, r1
 80012f6:	4013      	ands	r3, r2
 80012f8:	4698      	mov	r8, r3
 80012fa:	e6f5      	b.n	80010e8 <__aeabi_dadd+0xf4>
 80012fc:	0028      	movs	r0, r5
 80012fe:	f001 fca9 	bl	8002c54 <__clzsi2>
 8001302:	0001      	movs	r1, r0
 8001304:	3118      	adds	r1, #24
 8001306:	291f      	cmp	r1, #31
 8001308:	dc00      	bgt.n	800130c <__aeabi_dadd+0x318>
 800130a:	e6cf      	b.n	80010ac <__aeabi_dadd+0xb8>
 800130c:	002b      	movs	r3, r5
 800130e:	3808      	subs	r0, #8
 8001310:	4083      	lsls	r3, r0
 8001312:	2500      	movs	r5, #0
 8001314:	e6d2      	b.n	80010bc <__aeabi_dadd+0xc8>
 8001316:	4662      	mov	r2, ip
 8001318:	433a      	orrs	r2, r7
 800131a:	0011      	movs	r1, r2
 800131c:	1e4f      	subs	r7, r1, #1
 800131e:	41b9      	sbcs	r1, r7
 8001320:	e6ac      	b.n	800107c <__aeabi_dadd+0x88>
 8001322:	4649      	mov	r1, r9
 8001324:	0758      	lsls	r0, r3, #29
 8001326:	08c9      	lsrs	r1, r1, #3
 8001328:	4301      	orrs	r1, r0
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	e787      	b.n	800123e <__aeabi_dadd+0x24a>
 800132e:	4649      	mov	r1, r9
 8001330:	075a      	lsls	r2, r3, #29
 8001332:	08c9      	lsrs	r1, r1, #3
 8001334:	4311      	orrs	r1, r2
 8001336:	08db      	lsrs	r3, r3, #3
 8001338:	e7a6      	b.n	8001288 <__aeabi_dadd+0x294>
 800133a:	490d      	ldr	r1, [pc, #52]	; (8001370 <__aeabi_dadd+0x37c>)
 800133c:	1c70      	adds	r0, r6, #1
 800133e:	4208      	tst	r0, r1
 8001340:	d000      	beq.n	8001344 <__aeabi_dadd+0x350>
 8001342:	e0bb      	b.n	80014bc <__aeabi_dadd+0x4c8>
 8001344:	2e00      	cmp	r6, #0
 8001346:	d000      	beq.n	800134a <__aeabi_dadd+0x356>
 8001348:	e114      	b.n	8001574 <__aeabi_dadd+0x580>
 800134a:	4649      	mov	r1, r9
 800134c:	4319      	orrs	r1, r3
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x35e>
 8001350:	e175      	b.n	800163e <__aeabi_dadd+0x64a>
 8001352:	0029      	movs	r1, r5
 8001354:	4339      	orrs	r1, r7
 8001356:	d000      	beq.n	800135a <__aeabi_dadd+0x366>
 8001358:	e17e      	b.n	8001658 <__aeabi_dadd+0x664>
 800135a:	4649      	mov	r1, r9
 800135c:	0758      	lsls	r0, r3, #29
 800135e:	08c9      	lsrs	r1, r1, #3
 8001360:	4301      	orrs	r1, r0
 8001362:	08db      	lsrs	r3, r3, #3
 8001364:	e76e      	b.n	8001244 <__aeabi_dadd+0x250>
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	000007ff 	.word	0x000007ff
 800136c:	ff7fffff 	.word	0xff7fffff
 8001370:	000007fe 	.word	0x000007fe
 8001374:	4649      	mov	r1, r9
 8001376:	1bcd      	subs	r5, r1, r7
 8001378:	4661      	mov	r1, ip
 800137a:	1a58      	subs	r0, r3, r1
 800137c:	45a9      	cmp	r9, r5
 800137e:	4189      	sbcs	r1, r1
 8001380:	4249      	negs	r1, r1
 8001382:	4688      	mov	r8, r1
 8001384:	0001      	movs	r1, r0
 8001386:	4640      	mov	r0, r8
 8001388:	1a09      	subs	r1, r1, r0
 800138a:	4688      	mov	r8, r1
 800138c:	0209      	lsls	r1, r1, #8
 800138e:	d500      	bpl.n	8001392 <__aeabi_dadd+0x39e>
 8001390:	e0a6      	b.n	80014e0 <__aeabi_dadd+0x4ec>
 8001392:	4641      	mov	r1, r8
 8001394:	4329      	orrs	r1, r5
 8001396:	d000      	beq.n	800139a <__aeabi_dadd+0x3a6>
 8001398:	e67f      	b.n	800109a <__aeabi_dadd+0xa6>
 800139a:	2300      	movs	r3, #0
 800139c:	2400      	movs	r4, #0
 800139e:	e751      	b.n	8001244 <__aeabi_dadd+0x250>
 80013a0:	4cc7      	ldr	r4, [pc, #796]	; (80016c0 <__aeabi_dadd+0x6cc>)
 80013a2:	42a1      	cmp	r1, r4
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dadd+0x3b4>
 80013a6:	e0c7      	b.n	8001538 <__aeabi_dadd+0x544>
 80013a8:	2480      	movs	r4, #128	; 0x80
 80013aa:	0424      	lsls	r4, r4, #16
 80013ac:	4323      	orrs	r3, r4
 80013ae:	2a38      	cmp	r2, #56	; 0x38
 80013b0:	dc54      	bgt.n	800145c <__aeabi_dadd+0x468>
 80013b2:	2a1f      	cmp	r2, #31
 80013b4:	dd00      	ble.n	80013b8 <__aeabi_dadd+0x3c4>
 80013b6:	e0cc      	b.n	8001552 <__aeabi_dadd+0x55e>
 80013b8:	2420      	movs	r4, #32
 80013ba:	4648      	mov	r0, r9
 80013bc:	1aa4      	subs	r4, r4, r2
 80013be:	001d      	movs	r5, r3
 80013c0:	464e      	mov	r6, r9
 80013c2:	40a0      	lsls	r0, r4
 80013c4:	40d6      	lsrs	r6, r2
 80013c6:	40a5      	lsls	r5, r4
 80013c8:	0004      	movs	r4, r0
 80013ca:	40d3      	lsrs	r3, r2
 80013cc:	4662      	mov	r2, ip
 80013ce:	4335      	orrs	r5, r6
 80013d0:	1e66      	subs	r6, r4, #1
 80013d2:	41b4      	sbcs	r4, r6
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	469c      	mov	ip, r3
 80013d8:	4325      	orrs	r5, r4
 80013da:	e044      	b.n	8001466 <__aeabi_dadd+0x472>
 80013dc:	4662      	mov	r2, ip
 80013de:	433a      	orrs	r2, r7
 80013e0:	0015      	movs	r5, r2
 80013e2:	1e6f      	subs	r7, r5, #1
 80013e4:	41bd      	sbcs	r5, r7
 80013e6:	444d      	add	r5, r9
 80013e8:	454d      	cmp	r5, r9
 80013ea:	4189      	sbcs	r1, r1
 80013ec:	4249      	negs	r1, r1
 80013ee:	4688      	mov	r8, r1
 80013f0:	4498      	add	r8, r3
 80013f2:	4643      	mov	r3, r8
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	d400      	bmi.n	80013fa <__aeabi_dadd+0x406>
 80013f8:	e718      	b.n	800122c <__aeabi_dadd+0x238>
 80013fa:	4bb1      	ldr	r3, [pc, #708]	; (80016c0 <__aeabi_dadd+0x6cc>)
 80013fc:	3601      	adds	r6, #1
 80013fe:	429e      	cmp	r6, r3
 8001400:	d049      	beq.n	8001496 <__aeabi_dadd+0x4a2>
 8001402:	4642      	mov	r2, r8
 8001404:	4baf      	ldr	r3, [pc, #700]	; (80016c4 <__aeabi_dadd+0x6d0>)
 8001406:	2101      	movs	r1, #1
 8001408:	401a      	ands	r2, r3
 800140a:	0013      	movs	r3, r2
 800140c:	086a      	lsrs	r2, r5, #1
 800140e:	400d      	ands	r5, r1
 8001410:	4315      	orrs	r5, r2
 8001412:	07d9      	lsls	r1, r3, #31
 8001414:	085b      	lsrs	r3, r3, #1
 8001416:	4698      	mov	r8, r3
 8001418:	430d      	orrs	r5, r1
 800141a:	e665      	b.n	80010e8 <__aeabi_dadd+0xf4>
 800141c:	0018      	movs	r0, r3
 800141e:	3e1f      	subs	r6, #31
 8001420:	40f0      	lsrs	r0, r6
 8001422:	2a20      	cmp	r2, #32
 8001424:	d003      	beq.n	800142e <__aeabi_dadd+0x43a>
 8001426:	2140      	movs	r1, #64	; 0x40
 8001428:	1a8a      	subs	r2, r1, r2
 800142a:	4093      	lsls	r3, r2
 800142c:	431d      	orrs	r5, r3
 800142e:	1e69      	subs	r1, r5, #1
 8001430:	418d      	sbcs	r5, r1
 8001432:	2300      	movs	r3, #0
 8001434:	2600      	movs	r6, #0
 8001436:	4698      	mov	r8, r3
 8001438:	4305      	orrs	r5, r0
 800143a:	e6f7      	b.n	800122c <__aeabi_dadd+0x238>
 800143c:	0011      	movs	r1, r2
 800143e:	4665      	mov	r5, ip
 8001440:	3920      	subs	r1, #32
 8001442:	40cd      	lsrs	r5, r1
 8001444:	2a20      	cmp	r2, #32
 8001446:	d004      	beq.n	8001452 <__aeabi_dadd+0x45e>
 8001448:	2040      	movs	r0, #64	; 0x40
 800144a:	4661      	mov	r1, ip
 800144c:	1a82      	subs	r2, r0, r2
 800144e:	4091      	lsls	r1, r2
 8001450:	430f      	orrs	r7, r1
 8001452:	0039      	movs	r1, r7
 8001454:	1e4f      	subs	r7, r1, #1
 8001456:	41b9      	sbcs	r1, r7
 8001458:	4329      	orrs	r1, r5
 800145a:	e60f      	b.n	800107c <__aeabi_dadd+0x88>
 800145c:	464a      	mov	r2, r9
 800145e:	4313      	orrs	r3, r2
 8001460:	001d      	movs	r5, r3
 8001462:	1e6b      	subs	r3, r5, #1
 8001464:	419d      	sbcs	r5, r3
 8001466:	1b7d      	subs	r5, r7, r5
 8001468:	42af      	cmp	r7, r5
 800146a:	419b      	sbcs	r3, r3
 800146c:	4662      	mov	r2, ip
 800146e:	425b      	negs	r3, r3
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	4698      	mov	r8, r3
 8001474:	4654      	mov	r4, sl
 8001476:	000e      	movs	r6, r1
 8001478:	e607      	b.n	800108a <__aeabi_dadd+0x96>
 800147a:	4648      	mov	r0, r9
 800147c:	4318      	orrs	r0, r3
 800147e:	d100      	bne.n	8001482 <__aeabi_dadd+0x48e>
 8001480:	e0b3      	b.n	80015ea <__aeabi_dadd+0x5f6>
 8001482:	1e50      	subs	r0, r2, #1
 8001484:	2a01      	cmp	r2, #1
 8001486:	d100      	bne.n	800148a <__aeabi_dadd+0x496>
 8001488:	e10d      	b.n	80016a6 <__aeabi_dadd+0x6b2>
 800148a:	4d8d      	ldr	r5, [pc, #564]	; (80016c0 <__aeabi_dadd+0x6cc>)
 800148c:	42aa      	cmp	r2, r5
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x49e>
 8001490:	e0a5      	b.n	80015de <__aeabi_dadd+0x5ea>
 8001492:	0002      	movs	r2, r0
 8001494:	e710      	b.n	80012b8 <__aeabi_dadd+0x2c4>
 8001496:	0032      	movs	r2, r6
 8001498:	2300      	movs	r3, #0
 800149a:	2100      	movs	r1, #0
 800149c:	e644      	b.n	8001128 <__aeabi_dadd+0x134>
 800149e:	2120      	movs	r1, #32
 80014a0:	0038      	movs	r0, r7
 80014a2:	1a89      	subs	r1, r1, r2
 80014a4:	4665      	mov	r5, ip
 80014a6:	408f      	lsls	r7, r1
 80014a8:	408d      	lsls	r5, r1
 80014aa:	40d0      	lsrs	r0, r2
 80014ac:	1e79      	subs	r1, r7, #1
 80014ae:	418f      	sbcs	r7, r1
 80014b0:	4305      	orrs	r5, r0
 80014b2:	433d      	orrs	r5, r7
 80014b4:	4667      	mov	r7, ip
 80014b6:	40d7      	lsrs	r7, r2
 80014b8:	19db      	adds	r3, r3, r7
 80014ba:	e794      	b.n	80013e6 <__aeabi_dadd+0x3f2>
 80014bc:	4a80      	ldr	r2, [pc, #512]	; (80016c0 <__aeabi_dadd+0x6cc>)
 80014be:	4290      	cmp	r0, r2
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dadd+0x4d0>
 80014c2:	e0ec      	b.n	800169e <__aeabi_dadd+0x6aa>
 80014c4:	0039      	movs	r1, r7
 80014c6:	4449      	add	r1, r9
 80014c8:	4549      	cmp	r1, r9
 80014ca:	4192      	sbcs	r2, r2
 80014cc:	4463      	add	r3, ip
 80014ce:	4252      	negs	r2, r2
 80014d0:	189b      	adds	r3, r3, r2
 80014d2:	07dd      	lsls	r5, r3, #31
 80014d4:	0849      	lsrs	r1, r1, #1
 80014d6:	085b      	lsrs	r3, r3, #1
 80014d8:	4698      	mov	r8, r3
 80014da:	0006      	movs	r6, r0
 80014dc:	430d      	orrs	r5, r1
 80014de:	e6a5      	b.n	800122c <__aeabi_dadd+0x238>
 80014e0:	464a      	mov	r2, r9
 80014e2:	1abd      	subs	r5, r7, r2
 80014e4:	42af      	cmp	r7, r5
 80014e6:	4189      	sbcs	r1, r1
 80014e8:	4662      	mov	r2, ip
 80014ea:	4249      	negs	r1, r1
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	1a5b      	subs	r3, r3, r1
 80014f0:	4698      	mov	r8, r3
 80014f2:	4654      	mov	r4, sl
 80014f4:	e5d1      	b.n	800109a <__aeabi_dadd+0xa6>
 80014f6:	076c      	lsls	r4, r5, #29
 80014f8:	08f9      	lsrs	r1, r7, #3
 80014fa:	4321      	orrs	r1, r4
 80014fc:	08eb      	lsrs	r3, r5, #3
 80014fe:	0004      	movs	r4, r0
 8001500:	e69d      	b.n	800123e <__aeabi_dadd+0x24a>
 8001502:	464a      	mov	r2, r9
 8001504:	431a      	orrs	r2, r3
 8001506:	d175      	bne.n	80015f4 <__aeabi_dadd+0x600>
 8001508:	4661      	mov	r1, ip
 800150a:	4339      	orrs	r1, r7
 800150c:	d114      	bne.n	8001538 <__aeabi_dadd+0x544>
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	2400      	movs	r4, #0
 8001512:	031b      	lsls	r3, r3, #12
 8001514:	e6bc      	b.n	8001290 <__aeabi_dadd+0x29c>
 8001516:	464a      	mov	r2, r9
 8001518:	1bd5      	subs	r5, r2, r7
 800151a:	45a9      	cmp	r9, r5
 800151c:	4189      	sbcs	r1, r1
 800151e:	4662      	mov	r2, ip
 8001520:	4249      	negs	r1, r1
 8001522:	1a9b      	subs	r3, r3, r2
 8001524:	1a5b      	subs	r3, r3, r1
 8001526:	4698      	mov	r8, r3
 8001528:	2601      	movs	r6, #1
 800152a:	e5ae      	b.n	800108a <__aeabi_dadd+0x96>
 800152c:	464a      	mov	r2, r9
 800152e:	08d1      	lsrs	r1, r2, #3
 8001530:	075a      	lsls	r2, r3, #29
 8001532:	4311      	orrs	r1, r2
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	e6a7      	b.n	8001288 <__aeabi_dadd+0x294>
 8001538:	4663      	mov	r3, ip
 800153a:	08f9      	lsrs	r1, r7, #3
 800153c:	075a      	lsls	r2, r3, #29
 800153e:	4654      	mov	r4, sl
 8001540:	4311      	orrs	r1, r2
 8001542:	08db      	lsrs	r3, r3, #3
 8001544:	e6a0      	b.n	8001288 <__aeabi_dadd+0x294>
 8001546:	464a      	mov	r2, r9
 8001548:	4313      	orrs	r3, r2
 800154a:	001d      	movs	r5, r3
 800154c:	1e6b      	subs	r3, r5, #1
 800154e:	419d      	sbcs	r5, r3
 8001550:	e6c7      	b.n	80012e2 <__aeabi_dadd+0x2ee>
 8001552:	0014      	movs	r4, r2
 8001554:	001e      	movs	r6, r3
 8001556:	3c20      	subs	r4, #32
 8001558:	40e6      	lsrs	r6, r4
 800155a:	2a20      	cmp	r2, #32
 800155c:	d005      	beq.n	800156a <__aeabi_dadd+0x576>
 800155e:	2440      	movs	r4, #64	; 0x40
 8001560:	1aa2      	subs	r2, r4, r2
 8001562:	4093      	lsls	r3, r2
 8001564:	464a      	mov	r2, r9
 8001566:	431a      	orrs	r2, r3
 8001568:	4691      	mov	r9, r2
 800156a:	464d      	mov	r5, r9
 800156c:	1e6b      	subs	r3, r5, #1
 800156e:	419d      	sbcs	r5, r3
 8001570:	4335      	orrs	r5, r6
 8001572:	e778      	b.n	8001466 <__aeabi_dadd+0x472>
 8001574:	464a      	mov	r2, r9
 8001576:	431a      	orrs	r2, r3
 8001578:	d000      	beq.n	800157c <__aeabi_dadd+0x588>
 800157a:	e66b      	b.n	8001254 <__aeabi_dadd+0x260>
 800157c:	076b      	lsls	r3, r5, #29
 800157e:	08f9      	lsrs	r1, r7, #3
 8001580:	4319      	orrs	r1, r3
 8001582:	08eb      	lsrs	r3, r5, #3
 8001584:	e680      	b.n	8001288 <__aeabi_dadd+0x294>
 8001586:	4661      	mov	r1, ip
 8001588:	4339      	orrs	r1, r7
 800158a:	d054      	beq.n	8001636 <__aeabi_dadd+0x642>
 800158c:	4663      	mov	r3, ip
 800158e:	08f9      	lsrs	r1, r7, #3
 8001590:	075c      	lsls	r4, r3, #29
 8001592:	4321      	orrs	r1, r4
 8001594:	08db      	lsrs	r3, r3, #3
 8001596:	0004      	movs	r4, r0
 8001598:	e654      	b.n	8001244 <__aeabi_dadd+0x250>
 800159a:	464a      	mov	r2, r9
 800159c:	1abd      	subs	r5, r7, r2
 800159e:	42af      	cmp	r7, r5
 80015a0:	4189      	sbcs	r1, r1
 80015a2:	4662      	mov	r2, ip
 80015a4:	4249      	negs	r1, r1
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	1a5b      	subs	r3, r3, r1
 80015aa:	4698      	mov	r8, r3
 80015ac:	0004      	movs	r4, r0
 80015ae:	2601      	movs	r6, #1
 80015b0:	e56b      	b.n	800108a <__aeabi_dadd+0x96>
 80015b2:	464a      	mov	r2, r9
 80015b4:	1bd5      	subs	r5, r2, r7
 80015b6:	45a9      	cmp	r9, r5
 80015b8:	4189      	sbcs	r1, r1
 80015ba:	4662      	mov	r2, ip
 80015bc:	4249      	negs	r1, r1
 80015be:	1a9a      	subs	r2, r3, r2
 80015c0:	1a52      	subs	r2, r2, r1
 80015c2:	4690      	mov	r8, r2
 80015c4:	0212      	lsls	r2, r2, #8
 80015c6:	d532      	bpl.n	800162e <__aeabi_dadd+0x63a>
 80015c8:	464a      	mov	r2, r9
 80015ca:	1abd      	subs	r5, r7, r2
 80015cc:	42af      	cmp	r7, r5
 80015ce:	4189      	sbcs	r1, r1
 80015d0:	4662      	mov	r2, ip
 80015d2:	4249      	negs	r1, r1
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	1a5b      	subs	r3, r3, r1
 80015d8:	4698      	mov	r8, r3
 80015da:	0004      	movs	r4, r0
 80015dc:	e584      	b.n	80010e8 <__aeabi_dadd+0xf4>
 80015de:	4663      	mov	r3, ip
 80015e0:	08f9      	lsrs	r1, r7, #3
 80015e2:	075a      	lsls	r2, r3, #29
 80015e4:	4311      	orrs	r1, r2
 80015e6:	08db      	lsrs	r3, r3, #3
 80015e8:	e64e      	b.n	8001288 <__aeabi_dadd+0x294>
 80015ea:	08f9      	lsrs	r1, r7, #3
 80015ec:	0768      	lsls	r0, r5, #29
 80015ee:	4301      	orrs	r1, r0
 80015f0:	08eb      	lsrs	r3, r5, #3
 80015f2:	e624      	b.n	800123e <__aeabi_dadd+0x24a>
 80015f4:	4662      	mov	r2, ip
 80015f6:	433a      	orrs	r2, r7
 80015f8:	d100      	bne.n	80015fc <__aeabi_dadd+0x608>
 80015fa:	e698      	b.n	800132e <__aeabi_dadd+0x33a>
 80015fc:	464a      	mov	r2, r9
 80015fe:	08d1      	lsrs	r1, r2, #3
 8001600:	075a      	lsls	r2, r3, #29
 8001602:	4311      	orrs	r1, r2
 8001604:	08da      	lsrs	r2, r3, #3
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	031b      	lsls	r3, r3, #12
 800160a:	421a      	tst	r2, r3
 800160c:	d008      	beq.n	8001620 <__aeabi_dadd+0x62c>
 800160e:	4660      	mov	r0, ip
 8001610:	08c5      	lsrs	r5, r0, #3
 8001612:	421d      	tst	r5, r3
 8001614:	d104      	bne.n	8001620 <__aeabi_dadd+0x62c>
 8001616:	4654      	mov	r4, sl
 8001618:	002a      	movs	r2, r5
 800161a:	08f9      	lsrs	r1, r7, #3
 800161c:	0743      	lsls	r3, r0, #29
 800161e:	4319      	orrs	r1, r3
 8001620:	0f4b      	lsrs	r3, r1, #29
 8001622:	00c9      	lsls	r1, r1, #3
 8001624:	075b      	lsls	r3, r3, #29
 8001626:	08c9      	lsrs	r1, r1, #3
 8001628:	4319      	orrs	r1, r3
 800162a:	0013      	movs	r3, r2
 800162c:	e62c      	b.n	8001288 <__aeabi_dadd+0x294>
 800162e:	4641      	mov	r1, r8
 8001630:	4329      	orrs	r1, r5
 8001632:	d000      	beq.n	8001636 <__aeabi_dadd+0x642>
 8001634:	e5fa      	b.n	800122c <__aeabi_dadd+0x238>
 8001636:	2300      	movs	r3, #0
 8001638:	000a      	movs	r2, r1
 800163a:	2400      	movs	r4, #0
 800163c:	e602      	b.n	8001244 <__aeabi_dadd+0x250>
 800163e:	076b      	lsls	r3, r5, #29
 8001640:	08f9      	lsrs	r1, r7, #3
 8001642:	4319      	orrs	r1, r3
 8001644:	08eb      	lsrs	r3, r5, #3
 8001646:	e5fd      	b.n	8001244 <__aeabi_dadd+0x250>
 8001648:	4663      	mov	r3, ip
 800164a:	08f9      	lsrs	r1, r7, #3
 800164c:	075b      	lsls	r3, r3, #29
 800164e:	4319      	orrs	r1, r3
 8001650:	4663      	mov	r3, ip
 8001652:	0004      	movs	r4, r0
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	e617      	b.n	8001288 <__aeabi_dadd+0x294>
 8001658:	003d      	movs	r5, r7
 800165a:	444d      	add	r5, r9
 800165c:	4463      	add	r3, ip
 800165e:	454d      	cmp	r5, r9
 8001660:	4189      	sbcs	r1, r1
 8001662:	4698      	mov	r8, r3
 8001664:	4249      	negs	r1, r1
 8001666:	4488      	add	r8, r1
 8001668:	4643      	mov	r3, r8
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	d400      	bmi.n	8001670 <__aeabi_dadd+0x67c>
 800166e:	e5dd      	b.n	800122c <__aeabi_dadd+0x238>
 8001670:	4642      	mov	r2, r8
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <__aeabi_dadd+0x6d0>)
 8001674:	2601      	movs	r6, #1
 8001676:	401a      	ands	r2, r3
 8001678:	4690      	mov	r8, r2
 800167a:	e5d7      	b.n	800122c <__aeabi_dadd+0x238>
 800167c:	0010      	movs	r0, r2
 800167e:	001e      	movs	r6, r3
 8001680:	3820      	subs	r0, #32
 8001682:	40c6      	lsrs	r6, r0
 8001684:	2a20      	cmp	r2, #32
 8001686:	d005      	beq.n	8001694 <__aeabi_dadd+0x6a0>
 8001688:	2040      	movs	r0, #64	; 0x40
 800168a:	1a82      	subs	r2, r0, r2
 800168c:	4093      	lsls	r3, r2
 800168e:	464a      	mov	r2, r9
 8001690:	431a      	orrs	r2, r3
 8001692:	4691      	mov	r9, r2
 8001694:	464d      	mov	r5, r9
 8001696:	1e6b      	subs	r3, r5, #1
 8001698:	419d      	sbcs	r5, r3
 800169a:	4335      	orrs	r5, r6
 800169c:	e621      	b.n	80012e2 <__aeabi_dadd+0x2ee>
 800169e:	0002      	movs	r2, r0
 80016a0:	2300      	movs	r3, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	e540      	b.n	8001128 <__aeabi_dadd+0x134>
 80016a6:	464a      	mov	r2, r9
 80016a8:	19d5      	adds	r5, r2, r7
 80016aa:	42bd      	cmp	r5, r7
 80016ac:	4189      	sbcs	r1, r1
 80016ae:	4463      	add	r3, ip
 80016b0:	4698      	mov	r8, r3
 80016b2:	4249      	negs	r1, r1
 80016b4:	4488      	add	r8, r1
 80016b6:	e5b3      	b.n	8001220 <__aeabi_dadd+0x22c>
 80016b8:	2100      	movs	r1, #0
 80016ba:	4a01      	ldr	r2, [pc, #4]	; (80016c0 <__aeabi_dadd+0x6cc>)
 80016bc:	000b      	movs	r3, r1
 80016be:	e533      	b.n	8001128 <__aeabi_dadd+0x134>
 80016c0:	000007ff 	.word	0x000007ff
 80016c4:	ff7fffff 	.word	0xff7fffff

080016c8 <__aeabi_ddiv>:
 80016c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ca:	4657      	mov	r7, sl
 80016cc:	464e      	mov	r6, r9
 80016ce:	4645      	mov	r5, r8
 80016d0:	46de      	mov	lr, fp
 80016d2:	b5e0      	push	{r5, r6, r7, lr}
 80016d4:	4681      	mov	r9, r0
 80016d6:	0005      	movs	r5, r0
 80016d8:	030c      	lsls	r4, r1, #12
 80016da:	0048      	lsls	r0, r1, #1
 80016dc:	4692      	mov	sl, r2
 80016de:	001f      	movs	r7, r3
 80016e0:	b085      	sub	sp, #20
 80016e2:	0b24      	lsrs	r4, r4, #12
 80016e4:	0d40      	lsrs	r0, r0, #21
 80016e6:	0fce      	lsrs	r6, r1, #31
 80016e8:	2800      	cmp	r0, #0
 80016ea:	d059      	beq.n	80017a0 <__aeabi_ddiv+0xd8>
 80016ec:	4b87      	ldr	r3, [pc, #540]	; (800190c <__aeabi_ddiv+0x244>)
 80016ee:	4298      	cmp	r0, r3
 80016f0:	d100      	bne.n	80016f4 <__aeabi_ddiv+0x2c>
 80016f2:	e098      	b.n	8001826 <__aeabi_ddiv+0x15e>
 80016f4:	0f6b      	lsrs	r3, r5, #29
 80016f6:	00e4      	lsls	r4, r4, #3
 80016f8:	431c      	orrs	r4, r3
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	4323      	orrs	r3, r4
 8001700:	4698      	mov	r8, r3
 8001702:	4b83      	ldr	r3, [pc, #524]	; (8001910 <__aeabi_ddiv+0x248>)
 8001704:	00ed      	lsls	r5, r5, #3
 8001706:	469b      	mov	fp, r3
 8001708:	2300      	movs	r3, #0
 800170a:	4699      	mov	r9, r3
 800170c:	4483      	add	fp, r0
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	033c      	lsls	r4, r7, #12
 8001712:	007b      	lsls	r3, r7, #1
 8001714:	4650      	mov	r0, sl
 8001716:	0b24      	lsrs	r4, r4, #12
 8001718:	0d5b      	lsrs	r3, r3, #21
 800171a:	0fff      	lsrs	r7, r7, #31
 800171c:	2b00      	cmp	r3, #0
 800171e:	d067      	beq.n	80017f0 <__aeabi_ddiv+0x128>
 8001720:	4a7a      	ldr	r2, [pc, #488]	; (800190c <__aeabi_ddiv+0x244>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d018      	beq.n	8001758 <__aeabi_ddiv+0x90>
 8001726:	497a      	ldr	r1, [pc, #488]	; (8001910 <__aeabi_ddiv+0x248>)
 8001728:	0f42      	lsrs	r2, r0, #29
 800172a:	468c      	mov	ip, r1
 800172c:	00e4      	lsls	r4, r4, #3
 800172e:	4659      	mov	r1, fp
 8001730:	4314      	orrs	r4, r2
 8001732:	2280      	movs	r2, #128	; 0x80
 8001734:	4463      	add	r3, ip
 8001736:	0412      	lsls	r2, r2, #16
 8001738:	1acb      	subs	r3, r1, r3
 800173a:	4314      	orrs	r4, r2
 800173c:	469b      	mov	fp, r3
 800173e:	00c2      	lsls	r2, r0, #3
 8001740:	2000      	movs	r0, #0
 8001742:	0033      	movs	r3, r6
 8001744:	407b      	eors	r3, r7
 8001746:	469a      	mov	sl, r3
 8001748:	464b      	mov	r3, r9
 800174a:	2b0f      	cmp	r3, #15
 800174c:	d900      	bls.n	8001750 <__aeabi_ddiv+0x88>
 800174e:	e0ef      	b.n	8001930 <__aeabi_ddiv+0x268>
 8001750:	4970      	ldr	r1, [pc, #448]	; (8001914 <__aeabi_ddiv+0x24c>)
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	58cb      	ldr	r3, [r1, r3]
 8001756:	469f      	mov	pc, r3
 8001758:	4b6f      	ldr	r3, [pc, #444]	; (8001918 <__aeabi_ddiv+0x250>)
 800175a:	4652      	mov	r2, sl
 800175c:	469c      	mov	ip, r3
 800175e:	4322      	orrs	r2, r4
 8001760:	44e3      	add	fp, ip
 8001762:	2a00      	cmp	r2, #0
 8001764:	d000      	beq.n	8001768 <__aeabi_ddiv+0xa0>
 8001766:	e095      	b.n	8001894 <__aeabi_ddiv+0x1cc>
 8001768:	4649      	mov	r1, r9
 800176a:	2302      	movs	r3, #2
 800176c:	4319      	orrs	r1, r3
 800176e:	4689      	mov	r9, r1
 8001770:	2400      	movs	r4, #0
 8001772:	2002      	movs	r0, #2
 8001774:	e7e5      	b.n	8001742 <__aeabi_ddiv+0x7a>
 8001776:	2300      	movs	r3, #0
 8001778:	2400      	movs	r4, #0
 800177a:	2500      	movs	r5, #0
 800177c:	4652      	mov	r2, sl
 800177e:	051b      	lsls	r3, r3, #20
 8001780:	4323      	orrs	r3, r4
 8001782:	07d2      	lsls	r2, r2, #31
 8001784:	4313      	orrs	r3, r2
 8001786:	0028      	movs	r0, r5
 8001788:	0019      	movs	r1, r3
 800178a:	b005      	add	sp, #20
 800178c:	bcf0      	pop	{r4, r5, r6, r7}
 800178e:	46bb      	mov	fp, r7
 8001790:	46b2      	mov	sl, r6
 8001792:	46a9      	mov	r9, r5
 8001794:	46a0      	mov	r8, r4
 8001796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001798:	2400      	movs	r4, #0
 800179a:	2500      	movs	r5, #0
 800179c:	4b5b      	ldr	r3, [pc, #364]	; (800190c <__aeabi_ddiv+0x244>)
 800179e:	e7ed      	b.n	800177c <__aeabi_ddiv+0xb4>
 80017a0:	464b      	mov	r3, r9
 80017a2:	4323      	orrs	r3, r4
 80017a4:	4698      	mov	r8, r3
 80017a6:	d100      	bne.n	80017aa <__aeabi_ddiv+0xe2>
 80017a8:	e089      	b.n	80018be <__aeabi_ddiv+0x1f6>
 80017aa:	2c00      	cmp	r4, #0
 80017ac:	d100      	bne.n	80017b0 <__aeabi_ddiv+0xe8>
 80017ae:	e1e0      	b.n	8001b72 <__aeabi_ddiv+0x4aa>
 80017b0:	0020      	movs	r0, r4
 80017b2:	f001 fa4f 	bl	8002c54 <__clzsi2>
 80017b6:	0001      	movs	r1, r0
 80017b8:	0002      	movs	r2, r0
 80017ba:	390b      	subs	r1, #11
 80017bc:	231d      	movs	r3, #29
 80017be:	1a5b      	subs	r3, r3, r1
 80017c0:	4649      	mov	r1, r9
 80017c2:	0010      	movs	r0, r2
 80017c4:	40d9      	lsrs	r1, r3
 80017c6:	3808      	subs	r0, #8
 80017c8:	4084      	lsls	r4, r0
 80017ca:	000b      	movs	r3, r1
 80017cc:	464d      	mov	r5, r9
 80017ce:	4323      	orrs	r3, r4
 80017d0:	4698      	mov	r8, r3
 80017d2:	4085      	lsls	r5, r0
 80017d4:	4851      	ldr	r0, [pc, #324]	; (800191c <__aeabi_ddiv+0x254>)
 80017d6:	033c      	lsls	r4, r7, #12
 80017d8:	1a83      	subs	r3, r0, r2
 80017da:	469b      	mov	fp, r3
 80017dc:	2300      	movs	r3, #0
 80017de:	4699      	mov	r9, r3
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	007b      	lsls	r3, r7, #1
 80017e4:	4650      	mov	r0, sl
 80017e6:	0b24      	lsrs	r4, r4, #12
 80017e8:	0d5b      	lsrs	r3, r3, #21
 80017ea:	0fff      	lsrs	r7, r7, #31
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d197      	bne.n	8001720 <__aeabi_ddiv+0x58>
 80017f0:	4652      	mov	r2, sl
 80017f2:	4322      	orrs	r2, r4
 80017f4:	d055      	beq.n	80018a2 <__aeabi_ddiv+0x1da>
 80017f6:	2c00      	cmp	r4, #0
 80017f8:	d100      	bne.n	80017fc <__aeabi_ddiv+0x134>
 80017fa:	e1ca      	b.n	8001b92 <__aeabi_ddiv+0x4ca>
 80017fc:	0020      	movs	r0, r4
 80017fe:	f001 fa29 	bl	8002c54 <__clzsi2>
 8001802:	0002      	movs	r2, r0
 8001804:	3a0b      	subs	r2, #11
 8001806:	231d      	movs	r3, #29
 8001808:	0001      	movs	r1, r0
 800180a:	1a9b      	subs	r3, r3, r2
 800180c:	4652      	mov	r2, sl
 800180e:	3908      	subs	r1, #8
 8001810:	40da      	lsrs	r2, r3
 8001812:	408c      	lsls	r4, r1
 8001814:	4314      	orrs	r4, r2
 8001816:	4652      	mov	r2, sl
 8001818:	408a      	lsls	r2, r1
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <__aeabi_ddiv+0x258>)
 800181c:	4458      	add	r0, fp
 800181e:	469b      	mov	fp, r3
 8001820:	4483      	add	fp, r0
 8001822:	2000      	movs	r0, #0
 8001824:	e78d      	b.n	8001742 <__aeabi_ddiv+0x7a>
 8001826:	464b      	mov	r3, r9
 8001828:	4323      	orrs	r3, r4
 800182a:	4698      	mov	r8, r3
 800182c:	d140      	bne.n	80018b0 <__aeabi_ddiv+0x1e8>
 800182e:	2308      	movs	r3, #8
 8001830:	4699      	mov	r9, r3
 8001832:	3b06      	subs	r3, #6
 8001834:	2500      	movs	r5, #0
 8001836:	4683      	mov	fp, r0
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	e769      	b.n	8001710 <__aeabi_ddiv+0x48>
 800183c:	46b2      	mov	sl, r6
 800183e:	9b00      	ldr	r3, [sp, #0]
 8001840:	2b02      	cmp	r3, #2
 8001842:	d0a9      	beq.n	8001798 <__aeabi_ddiv+0xd0>
 8001844:	2b03      	cmp	r3, #3
 8001846:	d100      	bne.n	800184a <__aeabi_ddiv+0x182>
 8001848:	e211      	b.n	8001c6e <__aeabi_ddiv+0x5a6>
 800184a:	2b01      	cmp	r3, #1
 800184c:	d093      	beq.n	8001776 <__aeabi_ddiv+0xae>
 800184e:	4a35      	ldr	r2, [pc, #212]	; (8001924 <__aeabi_ddiv+0x25c>)
 8001850:	445a      	add	r2, fp
 8001852:	2a00      	cmp	r2, #0
 8001854:	dc00      	bgt.n	8001858 <__aeabi_ddiv+0x190>
 8001856:	e13c      	b.n	8001ad2 <__aeabi_ddiv+0x40a>
 8001858:	076b      	lsls	r3, r5, #29
 800185a:	d000      	beq.n	800185e <__aeabi_ddiv+0x196>
 800185c:	e1a7      	b.n	8001bae <__aeabi_ddiv+0x4e6>
 800185e:	08ed      	lsrs	r5, r5, #3
 8001860:	4643      	mov	r3, r8
 8001862:	01db      	lsls	r3, r3, #7
 8001864:	d506      	bpl.n	8001874 <__aeabi_ddiv+0x1ac>
 8001866:	4642      	mov	r2, r8
 8001868:	4b2f      	ldr	r3, [pc, #188]	; (8001928 <__aeabi_ddiv+0x260>)
 800186a:	401a      	ands	r2, r3
 800186c:	4690      	mov	r8, r2
 800186e:	2280      	movs	r2, #128	; 0x80
 8001870:	00d2      	lsls	r2, r2, #3
 8001872:	445a      	add	r2, fp
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <__aeabi_ddiv+0x264>)
 8001876:	429a      	cmp	r2, r3
 8001878:	dc8e      	bgt.n	8001798 <__aeabi_ddiv+0xd0>
 800187a:	4643      	mov	r3, r8
 800187c:	0552      	lsls	r2, r2, #21
 800187e:	0758      	lsls	r0, r3, #29
 8001880:	025c      	lsls	r4, r3, #9
 8001882:	4305      	orrs	r5, r0
 8001884:	0b24      	lsrs	r4, r4, #12
 8001886:	0d53      	lsrs	r3, r2, #21
 8001888:	e778      	b.n	800177c <__aeabi_ddiv+0xb4>
 800188a:	46ba      	mov	sl, r7
 800188c:	46a0      	mov	r8, r4
 800188e:	0015      	movs	r5, r2
 8001890:	9000      	str	r0, [sp, #0]
 8001892:	e7d4      	b.n	800183e <__aeabi_ddiv+0x176>
 8001894:	464a      	mov	r2, r9
 8001896:	2303      	movs	r3, #3
 8001898:	431a      	orrs	r2, r3
 800189a:	4691      	mov	r9, r2
 800189c:	2003      	movs	r0, #3
 800189e:	4652      	mov	r2, sl
 80018a0:	e74f      	b.n	8001742 <__aeabi_ddiv+0x7a>
 80018a2:	4649      	mov	r1, r9
 80018a4:	2301      	movs	r3, #1
 80018a6:	4319      	orrs	r1, r3
 80018a8:	4689      	mov	r9, r1
 80018aa:	2400      	movs	r4, #0
 80018ac:	2001      	movs	r0, #1
 80018ae:	e748      	b.n	8001742 <__aeabi_ddiv+0x7a>
 80018b0:	230c      	movs	r3, #12
 80018b2:	4699      	mov	r9, r3
 80018b4:	3b09      	subs	r3, #9
 80018b6:	46a0      	mov	r8, r4
 80018b8:	4683      	mov	fp, r0
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	e728      	b.n	8001710 <__aeabi_ddiv+0x48>
 80018be:	2304      	movs	r3, #4
 80018c0:	4699      	mov	r9, r3
 80018c2:	2300      	movs	r3, #0
 80018c4:	469b      	mov	fp, r3
 80018c6:	3301      	adds	r3, #1
 80018c8:	2500      	movs	r5, #0
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	e720      	b.n	8001710 <__aeabi_ddiv+0x48>
 80018ce:	2300      	movs	r3, #0
 80018d0:	2480      	movs	r4, #128	; 0x80
 80018d2:	469a      	mov	sl, r3
 80018d4:	2500      	movs	r5, #0
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <__aeabi_ddiv+0x244>)
 80018d8:	0324      	lsls	r4, r4, #12
 80018da:	e74f      	b.n	800177c <__aeabi_ddiv+0xb4>
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	4641      	mov	r1, r8
 80018e0:	031b      	lsls	r3, r3, #12
 80018e2:	4219      	tst	r1, r3
 80018e4:	d008      	beq.n	80018f8 <__aeabi_ddiv+0x230>
 80018e6:	421c      	tst	r4, r3
 80018e8:	d106      	bne.n	80018f8 <__aeabi_ddiv+0x230>
 80018ea:	431c      	orrs	r4, r3
 80018ec:	0324      	lsls	r4, r4, #12
 80018ee:	46ba      	mov	sl, r7
 80018f0:	0015      	movs	r5, r2
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <__aeabi_ddiv+0x244>)
 80018f4:	0b24      	lsrs	r4, r4, #12
 80018f6:	e741      	b.n	800177c <__aeabi_ddiv+0xb4>
 80018f8:	2480      	movs	r4, #128	; 0x80
 80018fa:	4643      	mov	r3, r8
 80018fc:	0324      	lsls	r4, r4, #12
 80018fe:	431c      	orrs	r4, r3
 8001900:	0324      	lsls	r4, r4, #12
 8001902:	46b2      	mov	sl, r6
 8001904:	4b01      	ldr	r3, [pc, #4]	; (800190c <__aeabi_ddiv+0x244>)
 8001906:	0b24      	lsrs	r4, r4, #12
 8001908:	e738      	b.n	800177c <__aeabi_ddiv+0xb4>
 800190a:	46c0      	nop			; (mov r8, r8)
 800190c:	000007ff 	.word	0x000007ff
 8001910:	fffffc01 	.word	0xfffffc01
 8001914:	08007968 	.word	0x08007968
 8001918:	fffff801 	.word	0xfffff801
 800191c:	fffffc0d 	.word	0xfffffc0d
 8001920:	000003f3 	.word	0x000003f3
 8001924:	000003ff 	.word	0x000003ff
 8001928:	feffffff 	.word	0xfeffffff
 800192c:	000007fe 	.word	0x000007fe
 8001930:	4544      	cmp	r4, r8
 8001932:	d200      	bcs.n	8001936 <__aeabi_ddiv+0x26e>
 8001934:	e116      	b.n	8001b64 <__aeabi_ddiv+0x49c>
 8001936:	d100      	bne.n	800193a <__aeabi_ddiv+0x272>
 8001938:	e111      	b.n	8001b5e <__aeabi_ddiv+0x496>
 800193a:	2301      	movs	r3, #1
 800193c:	425b      	negs	r3, r3
 800193e:	469c      	mov	ip, r3
 8001940:	002e      	movs	r6, r5
 8001942:	4640      	mov	r0, r8
 8001944:	2500      	movs	r5, #0
 8001946:	44e3      	add	fp, ip
 8001948:	0223      	lsls	r3, r4, #8
 800194a:	0e14      	lsrs	r4, r2, #24
 800194c:	431c      	orrs	r4, r3
 800194e:	0c1b      	lsrs	r3, r3, #16
 8001950:	4699      	mov	r9, r3
 8001952:	0423      	lsls	r3, r4, #16
 8001954:	0c1f      	lsrs	r7, r3, #16
 8001956:	0212      	lsls	r2, r2, #8
 8001958:	4649      	mov	r1, r9
 800195a:	9200      	str	r2, [sp, #0]
 800195c:	9701      	str	r7, [sp, #4]
 800195e:	f7fe fc63 	bl	8000228 <__aeabi_uidivmod>
 8001962:	0002      	movs	r2, r0
 8001964:	437a      	muls	r2, r7
 8001966:	040b      	lsls	r3, r1, #16
 8001968:	0c31      	lsrs	r1, r6, #16
 800196a:	4680      	mov	r8, r0
 800196c:	4319      	orrs	r1, r3
 800196e:	428a      	cmp	r2, r1
 8001970:	d90b      	bls.n	800198a <__aeabi_ddiv+0x2c2>
 8001972:	2301      	movs	r3, #1
 8001974:	425b      	negs	r3, r3
 8001976:	469c      	mov	ip, r3
 8001978:	1909      	adds	r1, r1, r4
 800197a:	44e0      	add	r8, ip
 800197c:	428c      	cmp	r4, r1
 800197e:	d804      	bhi.n	800198a <__aeabi_ddiv+0x2c2>
 8001980:	428a      	cmp	r2, r1
 8001982:	d902      	bls.n	800198a <__aeabi_ddiv+0x2c2>
 8001984:	1e83      	subs	r3, r0, #2
 8001986:	4698      	mov	r8, r3
 8001988:	1909      	adds	r1, r1, r4
 800198a:	1a88      	subs	r0, r1, r2
 800198c:	4649      	mov	r1, r9
 800198e:	f7fe fc4b 	bl	8000228 <__aeabi_uidivmod>
 8001992:	0409      	lsls	r1, r1, #16
 8001994:	468c      	mov	ip, r1
 8001996:	0431      	lsls	r1, r6, #16
 8001998:	4666      	mov	r6, ip
 800199a:	9a01      	ldr	r2, [sp, #4]
 800199c:	0c09      	lsrs	r1, r1, #16
 800199e:	4342      	muls	r2, r0
 80019a0:	0003      	movs	r3, r0
 80019a2:	4331      	orrs	r1, r6
 80019a4:	428a      	cmp	r2, r1
 80019a6:	d904      	bls.n	80019b2 <__aeabi_ddiv+0x2ea>
 80019a8:	1909      	adds	r1, r1, r4
 80019aa:	3b01      	subs	r3, #1
 80019ac:	428c      	cmp	r4, r1
 80019ae:	d800      	bhi.n	80019b2 <__aeabi_ddiv+0x2ea>
 80019b0:	e111      	b.n	8001bd6 <__aeabi_ddiv+0x50e>
 80019b2:	1a89      	subs	r1, r1, r2
 80019b4:	4642      	mov	r2, r8
 80019b6:	9e00      	ldr	r6, [sp, #0]
 80019b8:	0412      	lsls	r2, r2, #16
 80019ba:	431a      	orrs	r2, r3
 80019bc:	0c33      	lsrs	r3, r6, #16
 80019be:	001f      	movs	r7, r3
 80019c0:	0c10      	lsrs	r0, r2, #16
 80019c2:	4690      	mov	r8, r2
 80019c4:	9302      	str	r3, [sp, #8]
 80019c6:	0413      	lsls	r3, r2, #16
 80019c8:	0432      	lsls	r2, r6, #16
 80019ca:	0c16      	lsrs	r6, r2, #16
 80019cc:	0032      	movs	r2, r6
 80019ce:	0c1b      	lsrs	r3, r3, #16
 80019d0:	435a      	muls	r2, r3
 80019d2:	9603      	str	r6, [sp, #12]
 80019d4:	437b      	muls	r3, r7
 80019d6:	4346      	muls	r6, r0
 80019d8:	4378      	muls	r0, r7
 80019da:	0c17      	lsrs	r7, r2, #16
 80019dc:	46bc      	mov	ip, r7
 80019de:	199b      	adds	r3, r3, r6
 80019e0:	4463      	add	r3, ip
 80019e2:	429e      	cmp	r6, r3
 80019e4:	d903      	bls.n	80019ee <__aeabi_ddiv+0x326>
 80019e6:	2680      	movs	r6, #128	; 0x80
 80019e8:	0276      	lsls	r6, r6, #9
 80019ea:	46b4      	mov	ip, r6
 80019ec:	4460      	add	r0, ip
 80019ee:	0c1e      	lsrs	r6, r3, #16
 80019f0:	1830      	adds	r0, r6, r0
 80019f2:	0416      	lsls	r6, r2, #16
 80019f4:	041b      	lsls	r3, r3, #16
 80019f6:	0c36      	lsrs	r6, r6, #16
 80019f8:	199e      	adds	r6, r3, r6
 80019fa:	4281      	cmp	r1, r0
 80019fc:	d200      	bcs.n	8001a00 <__aeabi_ddiv+0x338>
 80019fe:	e09c      	b.n	8001b3a <__aeabi_ddiv+0x472>
 8001a00:	d100      	bne.n	8001a04 <__aeabi_ddiv+0x33c>
 8001a02:	e097      	b.n	8001b34 <__aeabi_ddiv+0x46c>
 8001a04:	1bae      	subs	r6, r5, r6
 8001a06:	1a09      	subs	r1, r1, r0
 8001a08:	42b5      	cmp	r5, r6
 8001a0a:	4180      	sbcs	r0, r0
 8001a0c:	4240      	negs	r0, r0
 8001a0e:	1a08      	subs	r0, r1, r0
 8001a10:	4284      	cmp	r4, r0
 8001a12:	d100      	bne.n	8001a16 <__aeabi_ddiv+0x34e>
 8001a14:	e111      	b.n	8001c3a <__aeabi_ddiv+0x572>
 8001a16:	4649      	mov	r1, r9
 8001a18:	f7fe fc06 	bl	8000228 <__aeabi_uidivmod>
 8001a1c:	9a01      	ldr	r2, [sp, #4]
 8001a1e:	040b      	lsls	r3, r1, #16
 8001a20:	4342      	muls	r2, r0
 8001a22:	0c31      	lsrs	r1, r6, #16
 8001a24:	0005      	movs	r5, r0
 8001a26:	4319      	orrs	r1, r3
 8001a28:	428a      	cmp	r2, r1
 8001a2a:	d907      	bls.n	8001a3c <__aeabi_ddiv+0x374>
 8001a2c:	1909      	adds	r1, r1, r4
 8001a2e:	3d01      	subs	r5, #1
 8001a30:	428c      	cmp	r4, r1
 8001a32:	d803      	bhi.n	8001a3c <__aeabi_ddiv+0x374>
 8001a34:	428a      	cmp	r2, r1
 8001a36:	d901      	bls.n	8001a3c <__aeabi_ddiv+0x374>
 8001a38:	1e85      	subs	r5, r0, #2
 8001a3a:	1909      	adds	r1, r1, r4
 8001a3c:	1a88      	subs	r0, r1, r2
 8001a3e:	4649      	mov	r1, r9
 8001a40:	f7fe fbf2 	bl	8000228 <__aeabi_uidivmod>
 8001a44:	0409      	lsls	r1, r1, #16
 8001a46:	468c      	mov	ip, r1
 8001a48:	0431      	lsls	r1, r6, #16
 8001a4a:	4666      	mov	r6, ip
 8001a4c:	9a01      	ldr	r2, [sp, #4]
 8001a4e:	0c09      	lsrs	r1, r1, #16
 8001a50:	4342      	muls	r2, r0
 8001a52:	0003      	movs	r3, r0
 8001a54:	4331      	orrs	r1, r6
 8001a56:	428a      	cmp	r2, r1
 8001a58:	d907      	bls.n	8001a6a <__aeabi_ddiv+0x3a2>
 8001a5a:	1909      	adds	r1, r1, r4
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	428c      	cmp	r4, r1
 8001a60:	d803      	bhi.n	8001a6a <__aeabi_ddiv+0x3a2>
 8001a62:	428a      	cmp	r2, r1
 8001a64:	d901      	bls.n	8001a6a <__aeabi_ddiv+0x3a2>
 8001a66:	1e83      	subs	r3, r0, #2
 8001a68:	1909      	adds	r1, r1, r4
 8001a6a:	9e03      	ldr	r6, [sp, #12]
 8001a6c:	1a89      	subs	r1, r1, r2
 8001a6e:	0032      	movs	r2, r6
 8001a70:	042d      	lsls	r5, r5, #16
 8001a72:	431d      	orrs	r5, r3
 8001a74:	9f02      	ldr	r7, [sp, #8]
 8001a76:	042b      	lsls	r3, r5, #16
 8001a78:	0c1b      	lsrs	r3, r3, #16
 8001a7a:	435a      	muls	r2, r3
 8001a7c:	437b      	muls	r3, r7
 8001a7e:	469c      	mov	ip, r3
 8001a80:	0c28      	lsrs	r0, r5, #16
 8001a82:	4346      	muls	r6, r0
 8001a84:	0c13      	lsrs	r3, r2, #16
 8001a86:	44b4      	add	ip, r6
 8001a88:	4463      	add	r3, ip
 8001a8a:	4378      	muls	r0, r7
 8001a8c:	429e      	cmp	r6, r3
 8001a8e:	d903      	bls.n	8001a98 <__aeabi_ddiv+0x3d0>
 8001a90:	2680      	movs	r6, #128	; 0x80
 8001a92:	0276      	lsls	r6, r6, #9
 8001a94:	46b4      	mov	ip, r6
 8001a96:	4460      	add	r0, ip
 8001a98:	0c1e      	lsrs	r6, r3, #16
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	0c12      	lsrs	r2, r2, #16
 8001aa0:	1830      	adds	r0, r6, r0
 8001aa2:	189b      	adds	r3, r3, r2
 8001aa4:	4281      	cmp	r1, r0
 8001aa6:	d306      	bcc.n	8001ab6 <__aeabi_ddiv+0x3ee>
 8001aa8:	d002      	beq.n	8001ab0 <__aeabi_ddiv+0x3e8>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	431d      	orrs	r5, r3
 8001aae:	e6ce      	b.n	800184e <__aeabi_ddiv+0x186>
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_ddiv+0x3ee>
 8001ab4:	e6cb      	b.n	800184e <__aeabi_ddiv+0x186>
 8001ab6:	1861      	adds	r1, r4, r1
 8001ab8:	1e6e      	subs	r6, r5, #1
 8001aba:	42a1      	cmp	r1, r4
 8001abc:	d200      	bcs.n	8001ac0 <__aeabi_ddiv+0x3f8>
 8001abe:	e0a4      	b.n	8001c0a <__aeabi_ddiv+0x542>
 8001ac0:	4281      	cmp	r1, r0
 8001ac2:	d200      	bcs.n	8001ac6 <__aeabi_ddiv+0x3fe>
 8001ac4:	e0c9      	b.n	8001c5a <__aeabi_ddiv+0x592>
 8001ac6:	d100      	bne.n	8001aca <__aeabi_ddiv+0x402>
 8001ac8:	e0d9      	b.n	8001c7e <__aeabi_ddiv+0x5b6>
 8001aca:	0035      	movs	r5, r6
 8001acc:	e7ed      	b.n	8001aaa <__aeabi_ddiv+0x3e2>
 8001ace:	2501      	movs	r5, #1
 8001ad0:	426d      	negs	r5, r5
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	1a89      	subs	r1, r1, r2
 8001ad6:	2938      	cmp	r1, #56	; 0x38
 8001ad8:	dd00      	ble.n	8001adc <__aeabi_ddiv+0x414>
 8001ada:	e64c      	b.n	8001776 <__aeabi_ddiv+0xae>
 8001adc:	291f      	cmp	r1, #31
 8001ade:	dc00      	bgt.n	8001ae2 <__aeabi_ddiv+0x41a>
 8001ae0:	e07f      	b.n	8001be2 <__aeabi_ddiv+0x51a>
 8001ae2:	231f      	movs	r3, #31
 8001ae4:	425b      	negs	r3, r3
 8001ae6:	1a9a      	subs	r2, r3, r2
 8001ae8:	4643      	mov	r3, r8
 8001aea:	40d3      	lsrs	r3, r2
 8001aec:	2920      	cmp	r1, #32
 8001aee:	d004      	beq.n	8001afa <__aeabi_ddiv+0x432>
 8001af0:	4644      	mov	r4, r8
 8001af2:	4a65      	ldr	r2, [pc, #404]	; (8001c88 <__aeabi_ddiv+0x5c0>)
 8001af4:	445a      	add	r2, fp
 8001af6:	4094      	lsls	r4, r2
 8001af8:	4325      	orrs	r5, r4
 8001afa:	1e6a      	subs	r2, r5, #1
 8001afc:	4195      	sbcs	r5, r2
 8001afe:	2207      	movs	r2, #7
 8001b00:	432b      	orrs	r3, r5
 8001b02:	0015      	movs	r5, r2
 8001b04:	2400      	movs	r4, #0
 8001b06:	401d      	ands	r5, r3
 8001b08:	421a      	tst	r2, r3
 8001b0a:	d100      	bne.n	8001b0e <__aeabi_ddiv+0x446>
 8001b0c:	e0a1      	b.n	8001c52 <__aeabi_ddiv+0x58a>
 8001b0e:	220f      	movs	r2, #15
 8001b10:	2400      	movs	r4, #0
 8001b12:	401a      	ands	r2, r3
 8001b14:	2a04      	cmp	r2, #4
 8001b16:	d100      	bne.n	8001b1a <__aeabi_ddiv+0x452>
 8001b18:	e098      	b.n	8001c4c <__aeabi_ddiv+0x584>
 8001b1a:	1d1a      	adds	r2, r3, #4
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	419b      	sbcs	r3, r3
 8001b20:	425b      	negs	r3, r3
 8001b22:	18e4      	adds	r4, r4, r3
 8001b24:	0013      	movs	r3, r2
 8001b26:	0222      	lsls	r2, r4, #8
 8001b28:	d400      	bmi.n	8001b2c <__aeabi_ddiv+0x464>
 8001b2a:	e08f      	b.n	8001c4c <__aeabi_ddiv+0x584>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	2400      	movs	r4, #0
 8001b30:	2500      	movs	r5, #0
 8001b32:	e623      	b.n	800177c <__aeabi_ddiv+0xb4>
 8001b34:	42b5      	cmp	r5, r6
 8001b36:	d300      	bcc.n	8001b3a <__aeabi_ddiv+0x472>
 8001b38:	e764      	b.n	8001a04 <__aeabi_ddiv+0x33c>
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	1e5a      	subs	r2, r3, #1
 8001b3e:	9b00      	ldr	r3, [sp, #0]
 8001b40:	469c      	mov	ip, r3
 8001b42:	4465      	add	r5, ip
 8001b44:	001f      	movs	r7, r3
 8001b46:	429d      	cmp	r5, r3
 8001b48:	419b      	sbcs	r3, r3
 8001b4a:	425b      	negs	r3, r3
 8001b4c:	191b      	adds	r3, r3, r4
 8001b4e:	18c9      	adds	r1, r1, r3
 8001b50:	428c      	cmp	r4, r1
 8001b52:	d23a      	bcs.n	8001bca <__aeabi_ddiv+0x502>
 8001b54:	4288      	cmp	r0, r1
 8001b56:	d863      	bhi.n	8001c20 <__aeabi_ddiv+0x558>
 8001b58:	d060      	beq.n	8001c1c <__aeabi_ddiv+0x554>
 8001b5a:	4690      	mov	r8, r2
 8001b5c:	e752      	b.n	8001a04 <__aeabi_ddiv+0x33c>
 8001b5e:	42aa      	cmp	r2, r5
 8001b60:	d900      	bls.n	8001b64 <__aeabi_ddiv+0x49c>
 8001b62:	e6ea      	b.n	800193a <__aeabi_ddiv+0x272>
 8001b64:	4643      	mov	r3, r8
 8001b66:	07de      	lsls	r6, r3, #31
 8001b68:	0858      	lsrs	r0, r3, #1
 8001b6a:	086b      	lsrs	r3, r5, #1
 8001b6c:	431e      	orrs	r6, r3
 8001b6e:	07ed      	lsls	r5, r5, #31
 8001b70:	e6ea      	b.n	8001948 <__aeabi_ddiv+0x280>
 8001b72:	4648      	mov	r0, r9
 8001b74:	f001 f86e 	bl	8002c54 <__clzsi2>
 8001b78:	0001      	movs	r1, r0
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	3115      	adds	r1, #21
 8001b7e:	3220      	adds	r2, #32
 8001b80:	291c      	cmp	r1, #28
 8001b82:	dc00      	bgt.n	8001b86 <__aeabi_ddiv+0x4be>
 8001b84:	e61a      	b.n	80017bc <__aeabi_ddiv+0xf4>
 8001b86:	464b      	mov	r3, r9
 8001b88:	3808      	subs	r0, #8
 8001b8a:	4083      	lsls	r3, r0
 8001b8c:	2500      	movs	r5, #0
 8001b8e:	4698      	mov	r8, r3
 8001b90:	e620      	b.n	80017d4 <__aeabi_ddiv+0x10c>
 8001b92:	f001 f85f 	bl	8002c54 <__clzsi2>
 8001b96:	0003      	movs	r3, r0
 8001b98:	001a      	movs	r2, r3
 8001b9a:	3215      	adds	r2, #21
 8001b9c:	3020      	adds	r0, #32
 8001b9e:	2a1c      	cmp	r2, #28
 8001ba0:	dc00      	bgt.n	8001ba4 <__aeabi_ddiv+0x4dc>
 8001ba2:	e630      	b.n	8001806 <__aeabi_ddiv+0x13e>
 8001ba4:	4654      	mov	r4, sl
 8001ba6:	3b08      	subs	r3, #8
 8001ba8:	2200      	movs	r2, #0
 8001baa:	409c      	lsls	r4, r3
 8001bac:	e635      	b.n	800181a <__aeabi_ddiv+0x152>
 8001bae:	230f      	movs	r3, #15
 8001bb0:	402b      	ands	r3, r5
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_ddiv+0x4f0>
 8001bb6:	e652      	b.n	800185e <__aeabi_ddiv+0x196>
 8001bb8:	2305      	movs	r3, #5
 8001bba:	425b      	negs	r3, r3
 8001bbc:	42ab      	cmp	r3, r5
 8001bbe:	419b      	sbcs	r3, r3
 8001bc0:	3504      	adds	r5, #4
 8001bc2:	425b      	negs	r3, r3
 8001bc4:	08ed      	lsrs	r5, r5, #3
 8001bc6:	4498      	add	r8, r3
 8001bc8:	e64a      	b.n	8001860 <__aeabi_ddiv+0x198>
 8001bca:	428c      	cmp	r4, r1
 8001bcc:	d1c5      	bne.n	8001b5a <__aeabi_ddiv+0x492>
 8001bce:	42af      	cmp	r7, r5
 8001bd0:	d9c0      	bls.n	8001b54 <__aeabi_ddiv+0x48c>
 8001bd2:	4690      	mov	r8, r2
 8001bd4:	e716      	b.n	8001a04 <__aeabi_ddiv+0x33c>
 8001bd6:	428a      	cmp	r2, r1
 8001bd8:	d800      	bhi.n	8001bdc <__aeabi_ddiv+0x514>
 8001bda:	e6ea      	b.n	80019b2 <__aeabi_ddiv+0x2ea>
 8001bdc:	1e83      	subs	r3, r0, #2
 8001bde:	1909      	adds	r1, r1, r4
 8001be0:	e6e7      	b.n	80019b2 <__aeabi_ddiv+0x2ea>
 8001be2:	4a2a      	ldr	r2, [pc, #168]	; (8001c8c <__aeabi_ddiv+0x5c4>)
 8001be4:	0028      	movs	r0, r5
 8001be6:	445a      	add	r2, fp
 8001be8:	4643      	mov	r3, r8
 8001bea:	4095      	lsls	r5, r2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	40c8      	lsrs	r0, r1
 8001bf0:	1e6a      	subs	r2, r5, #1
 8001bf2:	4195      	sbcs	r5, r2
 8001bf4:	4644      	mov	r4, r8
 8001bf6:	4303      	orrs	r3, r0
 8001bf8:	432b      	orrs	r3, r5
 8001bfa:	40cc      	lsrs	r4, r1
 8001bfc:	075a      	lsls	r2, r3, #29
 8001bfe:	d092      	beq.n	8001b26 <__aeabi_ddiv+0x45e>
 8001c00:	220f      	movs	r2, #15
 8001c02:	401a      	ands	r2, r3
 8001c04:	2a04      	cmp	r2, #4
 8001c06:	d188      	bne.n	8001b1a <__aeabi_ddiv+0x452>
 8001c08:	e78d      	b.n	8001b26 <__aeabi_ddiv+0x45e>
 8001c0a:	0035      	movs	r5, r6
 8001c0c:	4281      	cmp	r1, r0
 8001c0e:	d000      	beq.n	8001c12 <__aeabi_ddiv+0x54a>
 8001c10:	e74b      	b.n	8001aaa <__aeabi_ddiv+0x3e2>
 8001c12:	9a00      	ldr	r2, [sp, #0]
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d000      	beq.n	8001c1a <__aeabi_ddiv+0x552>
 8001c18:	e747      	b.n	8001aaa <__aeabi_ddiv+0x3e2>
 8001c1a:	e618      	b.n	800184e <__aeabi_ddiv+0x186>
 8001c1c:	42ae      	cmp	r6, r5
 8001c1e:	d99c      	bls.n	8001b5a <__aeabi_ddiv+0x492>
 8001c20:	2302      	movs	r3, #2
 8001c22:	425b      	negs	r3, r3
 8001c24:	469c      	mov	ip, r3
 8001c26:	9b00      	ldr	r3, [sp, #0]
 8001c28:	44e0      	add	r8, ip
 8001c2a:	469c      	mov	ip, r3
 8001c2c:	4465      	add	r5, ip
 8001c2e:	429d      	cmp	r5, r3
 8001c30:	419b      	sbcs	r3, r3
 8001c32:	425b      	negs	r3, r3
 8001c34:	191b      	adds	r3, r3, r4
 8001c36:	18c9      	adds	r1, r1, r3
 8001c38:	e6e4      	b.n	8001a04 <__aeabi_ddiv+0x33c>
 8001c3a:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <__aeabi_ddiv+0x5c8>)
 8001c3c:	445a      	add	r2, fp
 8001c3e:	2a00      	cmp	r2, #0
 8001c40:	dc00      	bgt.n	8001c44 <__aeabi_ddiv+0x57c>
 8001c42:	e744      	b.n	8001ace <__aeabi_ddiv+0x406>
 8001c44:	2301      	movs	r3, #1
 8001c46:	2500      	movs	r5, #0
 8001c48:	4498      	add	r8, r3
 8001c4a:	e609      	b.n	8001860 <__aeabi_ddiv+0x198>
 8001c4c:	0765      	lsls	r5, r4, #29
 8001c4e:	0264      	lsls	r4, r4, #9
 8001c50:	0b24      	lsrs	r4, r4, #12
 8001c52:	08db      	lsrs	r3, r3, #3
 8001c54:	431d      	orrs	r5, r3
 8001c56:	2300      	movs	r3, #0
 8001c58:	e590      	b.n	800177c <__aeabi_ddiv+0xb4>
 8001c5a:	9e00      	ldr	r6, [sp, #0]
 8001c5c:	3d02      	subs	r5, #2
 8001c5e:	0072      	lsls	r2, r6, #1
 8001c60:	42b2      	cmp	r2, r6
 8001c62:	41bf      	sbcs	r7, r7
 8001c64:	427f      	negs	r7, r7
 8001c66:	193c      	adds	r4, r7, r4
 8001c68:	1909      	adds	r1, r1, r4
 8001c6a:	9200      	str	r2, [sp, #0]
 8001c6c:	e7ce      	b.n	8001c0c <__aeabi_ddiv+0x544>
 8001c6e:	2480      	movs	r4, #128	; 0x80
 8001c70:	4643      	mov	r3, r8
 8001c72:	0324      	lsls	r4, r4, #12
 8001c74:	431c      	orrs	r4, r3
 8001c76:	0324      	lsls	r4, r4, #12
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <__aeabi_ddiv+0x5cc>)
 8001c7a:	0b24      	lsrs	r4, r4, #12
 8001c7c:	e57e      	b.n	800177c <__aeabi_ddiv+0xb4>
 8001c7e:	9a00      	ldr	r2, [sp, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d3ea      	bcc.n	8001c5a <__aeabi_ddiv+0x592>
 8001c84:	0035      	movs	r5, r6
 8001c86:	e7c4      	b.n	8001c12 <__aeabi_ddiv+0x54a>
 8001c88:	0000043e 	.word	0x0000043e
 8001c8c:	0000041e 	.word	0x0000041e
 8001c90:	000003ff 	.word	0x000003ff
 8001c94:	000007ff 	.word	0x000007ff

08001c98 <__eqdf2>:
 8001c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9a:	464f      	mov	r7, r9
 8001c9c:	4646      	mov	r6, r8
 8001c9e:	46d6      	mov	lr, sl
 8001ca0:	4694      	mov	ip, r2
 8001ca2:	4691      	mov	r9, r2
 8001ca4:	031a      	lsls	r2, r3, #12
 8001ca6:	0b12      	lsrs	r2, r2, #12
 8001ca8:	4d18      	ldr	r5, [pc, #96]	; (8001d0c <__eqdf2+0x74>)
 8001caa:	b5c0      	push	{r6, r7, lr}
 8001cac:	004c      	lsls	r4, r1, #1
 8001cae:	030f      	lsls	r7, r1, #12
 8001cb0:	4692      	mov	sl, r2
 8001cb2:	005a      	lsls	r2, r3, #1
 8001cb4:	0006      	movs	r6, r0
 8001cb6:	4680      	mov	r8, r0
 8001cb8:	0b3f      	lsrs	r7, r7, #12
 8001cba:	2001      	movs	r0, #1
 8001cbc:	0d64      	lsrs	r4, r4, #21
 8001cbe:	0fc9      	lsrs	r1, r1, #31
 8001cc0:	0d52      	lsrs	r2, r2, #21
 8001cc2:	0fdb      	lsrs	r3, r3, #31
 8001cc4:	42ac      	cmp	r4, r5
 8001cc6:	d00a      	beq.n	8001cde <__eqdf2+0x46>
 8001cc8:	42aa      	cmp	r2, r5
 8001cca:	d003      	beq.n	8001cd4 <__eqdf2+0x3c>
 8001ccc:	4294      	cmp	r4, r2
 8001cce:	d101      	bne.n	8001cd4 <__eqdf2+0x3c>
 8001cd0:	4557      	cmp	r7, sl
 8001cd2:	d00d      	beq.n	8001cf0 <__eqdf2+0x58>
 8001cd4:	bce0      	pop	{r5, r6, r7}
 8001cd6:	46ba      	mov	sl, r7
 8001cd8:	46b1      	mov	r9, r6
 8001cda:	46a8      	mov	r8, r5
 8001cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cde:	003d      	movs	r5, r7
 8001ce0:	4335      	orrs	r5, r6
 8001ce2:	d1f7      	bne.n	8001cd4 <__eqdf2+0x3c>
 8001ce4:	42a2      	cmp	r2, r4
 8001ce6:	d1f5      	bne.n	8001cd4 <__eqdf2+0x3c>
 8001ce8:	4652      	mov	r2, sl
 8001cea:	4665      	mov	r5, ip
 8001cec:	432a      	orrs	r2, r5
 8001cee:	d1f1      	bne.n	8001cd4 <__eqdf2+0x3c>
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	45c8      	cmp	r8, r9
 8001cf4:	d1ee      	bne.n	8001cd4 <__eqdf2+0x3c>
 8001cf6:	4299      	cmp	r1, r3
 8001cf8:	d006      	beq.n	8001d08 <__eqdf2+0x70>
 8001cfa:	2c00      	cmp	r4, #0
 8001cfc:	d1ea      	bne.n	8001cd4 <__eqdf2+0x3c>
 8001cfe:	433e      	orrs	r6, r7
 8001d00:	0030      	movs	r0, r6
 8001d02:	1e46      	subs	r6, r0, #1
 8001d04:	41b0      	sbcs	r0, r6
 8001d06:	e7e5      	b.n	8001cd4 <__eqdf2+0x3c>
 8001d08:	2000      	movs	r0, #0
 8001d0a:	e7e3      	b.n	8001cd4 <__eqdf2+0x3c>
 8001d0c:	000007ff 	.word	0x000007ff

08001d10 <__gedf2>:
 8001d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d12:	464e      	mov	r6, r9
 8001d14:	4645      	mov	r5, r8
 8001d16:	4657      	mov	r7, sl
 8001d18:	46de      	mov	lr, fp
 8001d1a:	0004      	movs	r4, r0
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	b5e0      	push	{r5, r6, r7, lr}
 8001d20:	0016      	movs	r6, r2
 8001d22:	031b      	lsls	r3, r3, #12
 8001d24:	0b1b      	lsrs	r3, r3, #12
 8001d26:	4d32      	ldr	r5, [pc, #200]	; (8001df0 <__gedf2+0xe0>)
 8001d28:	030f      	lsls	r7, r1, #12
 8001d2a:	004a      	lsls	r2, r1, #1
 8001d2c:	4699      	mov	r9, r3
 8001d2e:	0043      	lsls	r3, r0, #1
 8001d30:	46a4      	mov	ip, r4
 8001d32:	46b0      	mov	r8, r6
 8001d34:	0b3f      	lsrs	r7, r7, #12
 8001d36:	0d52      	lsrs	r2, r2, #21
 8001d38:	0fc9      	lsrs	r1, r1, #31
 8001d3a:	0d5b      	lsrs	r3, r3, #21
 8001d3c:	0fc0      	lsrs	r0, r0, #31
 8001d3e:	42aa      	cmp	r2, r5
 8001d40:	d029      	beq.n	8001d96 <__gedf2+0x86>
 8001d42:	42ab      	cmp	r3, r5
 8001d44:	d018      	beq.n	8001d78 <__gedf2+0x68>
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d12a      	bne.n	8001da0 <__gedf2+0x90>
 8001d4a:	433c      	orrs	r4, r7
 8001d4c:	46a3      	mov	fp, r4
 8001d4e:	4265      	negs	r5, r4
 8001d50:	4165      	adcs	r5, r4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <__gedf2+0x4c>
 8001d56:	464c      	mov	r4, r9
 8001d58:	4326      	orrs	r6, r4
 8001d5a:	d027      	beq.n	8001dac <__gedf2+0x9c>
 8001d5c:	2d00      	cmp	r5, #0
 8001d5e:	d115      	bne.n	8001d8c <__gedf2+0x7c>
 8001d60:	4281      	cmp	r1, r0
 8001d62:	d028      	beq.n	8001db6 <__gedf2+0xa6>
 8001d64:	2002      	movs	r0, #2
 8001d66:	3901      	subs	r1, #1
 8001d68:	4008      	ands	r0, r1
 8001d6a:	3801      	subs	r0, #1
 8001d6c:	bcf0      	pop	{r4, r5, r6, r7}
 8001d6e:	46bb      	mov	fp, r7
 8001d70:	46b2      	mov	sl, r6
 8001d72:	46a9      	mov	r9, r5
 8001d74:	46a0      	mov	r8, r4
 8001d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d78:	464d      	mov	r5, r9
 8001d7a:	432e      	orrs	r6, r5
 8001d7c:	d12f      	bne.n	8001dde <__gedf2+0xce>
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d1ee      	bne.n	8001d60 <__gedf2+0x50>
 8001d82:	433c      	orrs	r4, r7
 8001d84:	4265      	negs	r5, r4
 8001d86:	4165      	adcs	r5, r4
 8001d88:	2d00      	cmp	r5, #0
 8001d8a:	d0e9      	beq.n	8001d60 <__gedf2+0x50>
 8001d8c:	2800      	cmp	r0, #0
 8001d8e:	d1ed      	bne.n	8001d6c <__gedf2+0x5c>
 8001d90:	2001      	movs	r0, #1
 8001d92:	4240      	negs	r0, r0
 8001d94:	e7ea      	b.n	8001d6c <__gedf2+0x5c>
 8001d96:	003d      	movs	r5, r7
 8001d98:	4325      	orrs	r5, r4
 8001d9a:	d120      	bne.n	8001dde <__gedf2+0xce>
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d0eb      	beq.n	8001d78 <__gedf2+0x68>
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1dd      	bne.n	8001d60 <__gedf2+0x50>
 8001da4:	464c      	mov	r4, r9
 8001da6:	4326      	orrs	r6, r4
 8001da8:	d1da      	bne.n	8001d60 <__gedf2+0x50>
 8001daa:	e7db      	b.n	8001d64 <__gedf2+0x54>
 8001dac:	465b      	mov	r3, fp
 8001dae:	2000      	movs	r0, #0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0db      	beq.n	8001d6c <__gedf2+0x5c>
 8001db4:	e7d6      	b.n	8001d64 <__gedf2+0x54>
 8001db6:	429a      	cmp	r2, r3
 8001db8:	dc0a      	bgt.n	8001dd0 <__gedf2+0xc0>
 8001dba:	dbe7      	blt.n	8001d8c <__gedf2+0x7c>
 8001dbc:	454f      	cmp	r7, r9
 8001dbe:	d8d1      	bhi.n	8001d64 <__gedf2+0x54>
 8001dc0:	d010      	beq.n	8001de4 <__gedf2+0xd4>
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	454f      	cmp	r7, r9
 8001dc6:	d2d1      	bcs.n	8001d6c <__gedf2+0x5c>
 8001dc8:	2900      	cmp	r1, #0
 8001dca:	d0e1      	beq.n	8001d90 <__gedf2+0x80>
 8001dcc:	0008      	movs	r0, r1
 8001dce:	e7cd      	b.n	8001d6c <__gedf2+0x5c>
 8001dd0:	4243      	negs	r3, r0
 8001dd2:	4158      	adcs	r0, r3
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	4240      	negs	r0, r0
 8001dd8:	4018      	ands	r0, r3
 8001dda:	3801      	subs	r0, #1
 8001ddc:	e7c6      	b.n	8001d6c <__gedf2+0x5c>
 8001dde:	2002      	movs	r0, #2
 8001de0:	4240      	negs	r0, r0
 8001de2:	e7c3      	b.n	8001d6c <__gedf2+0x5c>
 8001de4:	45c4      	cmp	ip, r8
 8001de6:	d8bd      	bhi.n	8001d64 <__gedf2+0x54>
 8001de8:	2000      	movs	r0, #0
 8001dea:	45c4      	cmp	ip, r8
 8001dec:	d2be      	bcs.n	8001d6c <__gedf2+0x5c>
 8001dee:	e7eb      	b.n	8001dc8 <__gedf2+0xb8>
 8001df0:	000007ff 	.word	0x000007ff

08001df4 <__ledf2>:
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	464e      	mov	r6, r9
 8001df8:	4645      	mov	r5, r8
 8001dfa:	4657      	mov	r7, sl
 8001dfc:	46de      	mov	lr, fp
 8001dfe:	0004      	movs	r4, r0
 8001e00:	0018      	movs	r0, r3
 8001e02:	b5e0      	push	{r5, r6, r7, lr}
 8001e04:	0016      	movs	r6, r2
 8001e06:	031b      	lsls	r3, r3, #12
 8001e08:	0b1b      	lsrs	r3, r3, #12
 8001e0a:	4d31      	ldr	r5, [pc, #196]	; (8001ed0 <__ledf2+0xdc>)
 8001e0c:	030f      	lsls	r7, r1, #12
 8001e0e:	004a      	lsls	r2, r1, #1
 8001e10:	4699      	mov	r9, r3
 8001e12:	0043      	lsls	r3, r0, #1
 8001e14:	46a4      	mov	ip, r4
 8001e16:	46b0      	mov	r8, r6
 8001e18:	0b3f      	lsrs	r7, r7, #12
 8001e1a:	0d52      	lsrs	r2, r2, #21
 8001e1c:	0fc9      	lsrs	r1, r1, #31
 8001e1e:	0d5b      	lsrs	r3, r3, #21
 8001e20:	0fc0      	lsrs	r0, r0, #31
 8001e22:	42aa      	cmp	r2, r5
 8001e24:	d011      	beq.n	8001e4a <__ledf2+0x56>
 8001e26:	42ab      	cmp	r3, r5
 8001e28:	d014      	beq.n	8001e54 <__ledf2+0x60>
 8001e2a:	2a00      	cmp	r2, #0
 8001e2c:	d12f      	bne.n	8001e8e <__ledf2+0x9a>
 8001e2e:	433c      	orrs	r4, r7
 8001e30:	46a3      	mov	fp, r4
 8001e32:	4265      	negs	r5, r4
 8001e34:	4165      	adcs	r5, r4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d114      	bne.n	8001e64 <__ledf2+0x70>
 8001e3a:	464c      	mov	r4, r9
 8001e3c:	4326      	orrs	r6, r4
 8001e3e:	d111      	bne.n	8001e64 <__ledf2+0x70>
 8001e40:	465b      	mov	r3, fp
 8001e42:	2000      	movs	r0, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d017      	beq.n	8001e78 <__ledf2+0x84>
 8001e48:	e010      	b.n	8001e6c <__ledf2+0x78>
 8001e4a:	003d      	movs	r5, r7
 8001e4c:	4325      	orrs	r5, r4
 8001e4e:	d112      	bne.n	8001e76 <__ledf2+0x82>
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d11c      	bne.n	8001e8e <__ledf2+0x9a>
 8001e54:	464d      	mov	r5, r9
 8001e56:	432e      	orrs	r6, r5
 8001e58:	d10d      	bne.n	8001e76 <__ledf2+0x82>
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d104      	bne.n	8001e68 <__ledf2+0x74>
 8001e5e:	433c      	orrs	r4, r7
 8001e60:	4265      	negs	r5, r4
 8001e62:	4165      	adcs	r5, r4
 8001e64:	2d00      	cmp	r5, #0
 8001e66:	d10d      	bne.n	8001e84 <__ledf2+0x90>
 8001e68:	4281      	cmp	r1, r0
 8001e6a:	d016      	beq.n	8001e9a <__ledf2+0xa6>
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	3901      	subs	r1, #1
 8001e70:	4008      	ands	r0, r1
 8001e72:	3801      	subs	r0, #1
 8001e74:	e000      	b.n	8001e78 <__ledf2+0x84>
 8001e76:	2002      	movs	r0, #2
 8001e78:	bcf0      	pop	{r4, r5, r6, r7}
 8001e7a:	46bb      	mov	fp, r7
 8001e7c:	46b2      	mov	sl, r6
 8001e7e:	46a9      	mov	r9, r5
 8001e80:	46a0      	mov	r8, r4
 8001e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e84:	2800      	cmp	r0, #0
 8001e86:	d1f7      	bne.n	8001e78 <__ledf2+0x84>
 8001e88:	2001      	movs	r0, #1
 8001e8a:	4240      	negs	r0, r0
 8001e8c:	e7f4      	b.n	8001e78 <__ledf2+0x84>
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1ea      	bne.n	8001e68 <__ledf2+0x74>
 8001e92:	464c      	mov	r4, r9
 8001e94:	4326      	orrs	r6, r4
 8001e96:	d1e7      	bne.n	8001e68 <__ledf2+0x74>
 8001e98:	e7e8      	b.n	8001e6c <__ledf2+0x78>
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	dd06      	ble.n	8001eac <__ledf2+0xb8>
 8001e9e:	4243      	negs	r3, r0
 8001ea0:	4158      	adcs	r0, r3
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	4240      	negs	r0, r0
 8001ea6:	4018      	ands	r0, r3
 8001ea8:	3801      	subs	r0, #1
 8001eaa:	e7e5      	b.n	8001e78 <__ledf2+0x84>
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dbe9      	blt.n	8001e84 <__ledf2+0x90>
 8001eb0:	454f      	cmp	r7, r9
 8001eb2:	d8db      	bhi.n	8001e6c <__ledf2+0x78>
 8001eb4:	d006      	beq.n	8001ec4 <__ledf2+0xd0>
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	454f      	cmp	r7, r9
 8001eba:	d2dd      	bcs.n	8001e78 <__ledf2+0x84>
 8001ebc:	2900      	cmp	r1, #0
 8001ebe:	d0e3      	beq.n	8001e88 <__ledf2+0x94>
 8001ec0:	0008      	movs	r0, r1
 8001ec2:	e7d9      	b.n	8001e78 <__ledf2+0x84>
 8001ec4:	45c4      	cmp	ip, r8
 8001ec6:	d8d1      	bhi.n	8001e6c <__ledf2+0x78>
 8001ec8:	2000      	movs	r0, #0
 8001eca:	45c4      	cmp	ip, r8
 8001ecc:	d2d4      	bcs.n	8001e78 <__ledf2+0x84>
 8001ece:	e7f5      	b.n	8001ebc <__ledf2+0xc8>
 8001ed0:	000007ff 	.word	0x000007ff

08001ed4 <__aeabi_dmul>:
 8001ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ed6:	4657      	mov	r7, sl
 8001ed8:	464e      	mov	r6, r9
 8001eda:	4645      	mov	r5, r8
 8001edc:	46de      	mov	lr, fp
 8001ede:	b5e0      	push	{r5, r6, r7, lr}
 8001ee0:	4698      	mov	r8, r3
 8001ee2:	030c      	lsls	r4, r1, #12
 8001ee4:	004b      	lsls	r3, r1, #1
 8001ee6:	0006      	movs	r6, r0
 8001ee8:	4692      	mov	sl, r2
 8001eea:	b087      	sub	sp, #28
 8001eec:	0b24      	lsrs	r4, r4, #12
 8001eee:	0d5b      	lsrs	r3, r3, #21
 8001ef0:	0fcf      	lsrs	r7, r1, #31
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d06c      	beq.n	8001fd0 <__aeabi_dmul+0xfc>
 8001ef6:	4add      	ldr	r2, [pc, #884]	; (800226c <__aeabi_dmul+0x398>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0x2a>
 8001efc:	e086      	b.n	800200c <__aeabi_dmul+0x138>
 8001efe:	0f42      	lsrs	r2, r0, #29
 8001f00:	00e4      	lsls	r4, r4, #3
 8001f02:	4314      	orrs	r4, r2
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	0412      	lsls	r2, r2, #16
 8001f08:	4314      	orrs	r4, r2
 8001f0a:	4ad9      	ldr	r2, [pc, #868]	; (8002270 <__aeabi_dmul+0x39c>)
 8001f0c:	00c5      	lsls	r5, r0, #3
 8001f0e:	4694      	mov	ip, r2
 8001f10:	4463      	add	r3, ip
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2300      	movs	r3, #0
 8001f16:	4699      	mov	r9, r3
 8001f18:	469b      	mov	fp, r3
 8001f1a:	4643      	mov	r3, r8
 8001f1c:	4642      	mov	r2, r8
 8001f1e:	031e      	lsls	r6, r3, #12
 8001f20:	0fd2      	lsrs	r2, r2, #31
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4650      	mov	r0, sl
 8001f26:	4690      	mov	r8, r2
 8001f28:	0b36      	lsrs	r6, r6, #12
 8001f2a:	0d5b      	lsrs	r3, r3, #21
 8001f2c:	d100      	bne.n	8001f30 <__aeabi_dmul+0x5c>
 8001f2e:	e078      	b.n	8002022 <__aeabi_dmul+0x14e>
 8001f30:	4ace      	ldr	r2, [pc, #824]	; (800226c <__aeabi_dmul+0x398>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01d      	beq.n	8001f72 <__aeabi_dmul+0x9e>
 8001f36:	49ce      	ldr	r1, [pc, #824]	; (8002270 <__aeabi_dmul+0x39c>)
 8001f38:	0f42      	lsrs	r2, r0, #29
 8001f3a:	468c      	mov	ip, r1
 8001f3c:	9900      	ldr	r1, [sp, #0]
 8001f3e:	4463      	add	r3, ip
 8001f40:	00f6      	lsls	r6, r6, #3
 8001f42:	468c      	mov	ip, r1
 8001f44:	4316      	orrs	r6, r2
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	449c      	add	ip, r3
 8001f4a:	0412      	lsls	r2, r2, #16
 8001f4c:	4663      	mov	r3, ip
 8001f4e:	4316      	orrs	r6, r2
 8001f50:	00c2      	lsls	r2, r0, #3
 8001f52:	2000      	movs	r0, #0
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	9900      	ldr	r1, [sp, #0]
 8001f58:	4643      	mov	r3, r8
 8001f5a:	3101      	adds	r1, #1
 8001f5c:	468c      	mov	ip, r1
 8001f5e:	4649      	mov	r1, r9
 8001f60:	407b      	eors	r3, r7
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	290f      	cmp	r1, #15
 8001f66:	d900      	bls.n	8001f6a <__aeabi_dmul+0x96>
 8001f68:	e07e      	b.n	8002068 <__aeabi_dmul+0x194>
 8001f6a:	4bc2      	ldr	r3, [pc, #776]	; (8002274 <__aeabi_dmul+0x3a0>)
 8001f6c:	0089      	lsls	r1, r1, #2
 8001f6e:	5859      	ldr	r1, [r3, r1]
 8001f70:	468f      	mov	pc, r1
 8001f72:	4652      	mov	r2, sl
 8001f74:	9b00      	ldr	r3, [sp, #0]
 8001f76:	4332      	orrs	r2, r6
 8001f78:	d000      	beq.n	8001f7c <__aeabi_dmul+0xa8>
 8001f7a:	e156      	b.n	800222a <__aeabi_dmul+0x356>
 8001f7c:	49bb      	ldr	r1, [pc, #748]	; (800226c <__aeabi_dmul+0x398>)
 8001f7e:	2600      	movs	r6, #0
 8001f80:	468c      	mov	ip, r1
 8001f82:	4463      	add	r3, ip
 8001f84:	4649      	mov	r1, r9
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2302      	movs	r3, #2
 8001f8a:	4319      	orrs	r1, r3
 8001f8c:	4689      	mov	r9, r1
 8001f8e:	2002      	movs	r0, #2
 8001f90:	e7e1      	b.n	8001f56 <__aeabi_dmul+0x82>
 8001f92:	4643      	mov	r3, r8
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	0034      	movs	r4, r6
 8001f98:	0015      	movs	r5, r2
 8001f9a:	4683      	mov	fp, r0
 8001f9c:	465b      	mov	r3, fp
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d05e      	beq.n	8002060 <__aeabi_dmul+0x18c>
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d100      	bne.n	8001fa8 <__aeabi_dmul+0xd4>
 8001fa6:	e1f3      	b.n	8002390 <__aeabi_dmul+0x4bc>
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d000      	beq.n	8001fae <__aeabi_dmul+0xda>
 8001fac:	e118      	b.n	80021e0 <__aeabi_dmul+0x30c>
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2400      	movs	r4, #0
 8001fb2:	2500      	movs	r5, #0
 8001fb4:	9b01      	ldr	r3, [sp, #4]
 8001fb6:	0512      	lsls	r2, r2, #20
 8001fb8:	4322      	orrs	r2, r4
 8001fba:	07db      	lsls	r3, r3, #31
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	0028      	movs	r0, r5
 8001fc0:	0011      	movs	r1, r2
 8001fc2:	b007      	add	sp, #28
 8001fc4:	bcf0      	pop	{r4, r5, r6, r7}
 8001fc6:	46bb      	mov	fp, r7
 8001fc8:	46b2      	mov	sl, r6
 8001fca:	46a9      	mov	r9, r5
 8001fcc:	46a0      	mov	r8, r4
 8001fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd0:	0025      	movs	r5, r4
 8001fd2:	4305      	orrs	r5, r0
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dmul+0x104>
 8001fd6:	e141      	b.n	800225c <__aeabi_dmul+0x388>
 8001fd8:	2c00      	cmp	r4, #0
 8001fda:	d100      	bne.n	8001fde <__aeabi_dmul+0x10a>
 8001fdc:	e1ad      	b.n	800233a <__aeabi_dmul+0x466>
 8001fde:	0020      	movs	r0, r4
 8001fe0:	f000 fe38 	bl	8002c54 <__clzsi2>
 8001fe4:	0001      	movs	r1, r0
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	390b      	subs	r1, #11
 8001fea:	231d      	movs	r3, #29
 8001fec:	0010      	movs	r0, r2
 8001fee:	1a5b      	subs	r3, r3, r1
 8001ff0:	0031      	movs	r1, r6
 8001ff2:	0035      	movs	r5, r6
 8001ff4:	3808      	subs	r0, #8
 8001ff6:	4084      	lsls	r4, r0
 8001ff8:	40d9      	lsrs	r1, r3
 8001ffa:	4085      	lsls	r5, r0
 8001ffc:	430c      	orrs	r4, r1
 8001ffe:	489e      	ldr	r0, [pc, #632]	; (8002278 <__aeabi_dmul+0x3a4>)
 8002000:	1a83      	subs	r3, r0, r2
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	2300      	movs	r3, #0
 8002006:	4699      	mov	r9, r3
 8002008:	469b      	mov	fp, r3
 800200a:	e786      	b.n	8001f1a <__aeabi_dmul+0x46>
 800200c:	0005      	movs	r5, r0
 800200e:	4325      	orrs	r5, r4
 8002010:	d000      	beq.n	8002014 <__aeabi_dmul+0x140>
 8002012:	e11c      	b.n	800224e <__aeabi_dmul+0x37a>
 8002014:	2208      	movs	r2, #8
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	2302      	movs	r3, #2
 800201a:	2400      	movs	r4, #0
 800201c:	4691      	mov	r9, r2
 800201e:	469b      	mov	fp, r3
 8002020:	e77b      	b.n	8001f1a <__aeabi_dmul+0x46>
 8002022:	4652      	mov	r2, sl
 8002024:	4332      	orrs	r2, r6
 8002026:	d100      	bne.n	800202a <__aeabi_dmul+0x156>
 8002028:	e10a      	b.n	8002240 <__aeabi_dmul+0x36c>
 800202a:	2e00      	cmp	r6, #0
 800202c:	d100      	bne.n	8002030 <__aeabi_dmul+0x15c>
 800202e:	e176      	b.n	800231e <__aeabi_dmul+0x44a>
 8002030:	0030      	movs	r0, r6
 8002032:	f000 fe0f 	bl	8002c54 <__clzsi2>
 8002036:	0002      	movs	r2, r0
 8002038:	3a0b      	subs	r2, #11
 800203a:	231d      	movs	r3, #29
 800203c:	0001      	movs	r1, r0
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	4652      	mov	r2, sl
 8002042:	3908      	subs	r1, #8
 8002044:	40da      	lsrs	r2, r3
 8002046:	408e      	lsls	r6, r1
 8002048:	4316      	orrs	r6, r2
 800204a:	4652      	mov	r2, sl
 800204c:	408a      	lsls	r2, r1
 800204e:	9b00      	ldr	r3, [sp, #0]
 8002050:	4989      	ldr	r1, [pc, #548]	; (8002278 <__aeabi_dmul+0x3a4>)
 8002052:	1a18      	subs	r0, r3, r0
 8002054:	0003      	movs	r3, r0
 8002056:	468c      	mov	ip, r1
 8002058:	4463      	add	r3, ip
 800205a:	2000      	movs	r0, #0
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	e77a      	b.n	8001f56 <__aeabi_dmul+0x82>
 8002060:	2400      	movs	r4, #0
 8002062:	2500      	movs	r5, #0
 8002064:	4a81      	ldr	r2, [pc, #516]	; (800226c <__aeabi_dmul+0x398>)
 8002066:	e7a5      	b.n	8001fb4 <__aeabi_dmul+0xe0>
 8002068:	0c2f      	lsrs	r7, r5, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	0c2d      	lsrs	r5, r5, #16
 800206e:	002b      	movs	r3, r5
 8002070:	0c11      	lsrs	r1, r2, #16
 8002072:	0412      	lsls	r2, r2, #16
 8002074:	0c12      	lsrs	r2, r2, #16
 8002076:	4353      	muls	r3, r2
 8002078:	4698      	mov	r8, r3
 800207a:	0013      	movs	r3, r2
 800207c:	0028      	movs	r0, r5
 800207e:	437b      	muls	r3, r7
 8002080:	4699      	mov	r9, r3
 8002082:	4348      	muls	r0, r1
 8002084:	4448      	add	r0, r9
 8002086:	4683      	mov	fp, r0
 8002088:	4640      	mov	r0, r8
 800208a:	000b      	movs	r3, r1
 800208c:	0c00      	lsrs	r0, r0, #16
 800208e:	4682      	mov	sl, r0
 8002090:	4658      	mov	r0, fp
 8002092:	437b      	muls	r3, r7
 8002094:	4450      	add	r0, sl
 8002096:	9302      	str	r3, [sp, #8]
 8002098:	4581      	cmp	r9, r0
 800209a:	d906      	bls.n	80020aa <__aeabi_dmul+0x1d6>
 800209c:	469a      	mov	sl, r3
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	025b      	lsls	r3, r3, #9
 80020a2:	4699      	mov	r9, r3
 80020a4:	44ca      	add	sl, r9
 80020a6:	4653      	mov	r3, sl
 80020a8:	9302      	str	r3, [sp, #8]
 80020aa:	0c03      	lsrs	r3, r0, #16
 80020ac:	469b      	mov	fp, r3
 80020ae:	4643      	mov	r3, r8
 80020b0:	041b      	lsls	r3, r3, #16
 80020b2:	0400      	lsls	r0, r0, #16
 80020b4:	0c1b      	lsrs	r3, r3, #16
 80020b6:	4698      	mov	r8, r3
 80020b8:	0003      	movs	r3, r0
 80020ba:	4443      	add	r3, r8
 80020bc:	9304      	str	r3, [sp, #16]
 80020be:	0c33      	lsrs	r3, r6, #16
 80020c0:	4699      	mov	r9, r3
 80020c2:	002b      	movs	r3, r5
 80020c4:	0436      	lsls	r6, r6, #16
 80020c6:	0c36      	lsrs	r6, r6, #16
 80020c8:	4373      	muls	r3, r6
 80020ca:	4698      	mov	r8, r3
 80020cc:	0033      	movs	r3, r6
 80020ce:	437b      	muls	r3, r7
 80020d0:	469a      	mov	sl, r3
 80020d2:	464b      	mov	r3, r9
 80020d4:	435d      	muls	r5, r3
 80020d6:	435f      	muls	r7, r3
 80020d8:	4643      	mov	r3, r8
 80020da:	4455      	add	r5, sl
 80020dc:	0c18      	lsrs	r0, r3, #16
 80020de:	1940      	adds	r0, r0, r5
 80020e0:	4582      	cmp	sl, r0
 80020e2:	d903      	bls.n	80020ec <__aeabi_dmul+0x218>
 80020e4:	2380      	movs	r3, #128	; 0x80
 80020e6:	025b      	lsls	r3, r3, #9
 80020e8:	469a      	mov	sl, r3
 80020ea:	4457      	add	r7, sl
 80020ec:	0c05      	lsrs	r5, r0, #16
 80020ee:	19eb      	adds	r3, r5, r7
 80020f0:	9305      	str	r3, [sp, #20]
 80020f2:	4643      	mov	r3, r8
 80020f4:	041d      	lsls	r5, r3, #16
 80020f6:	0c2d      	lsrs	r5, r5, #16
 80020f8:	0400      	lsls	r0, r0, #16
 80020fa:	1940      	adds	r0, r0, r5
 80020fc:	0c25      	lsrs	r5, r4, #16
 80020fe:	0424      	lsls	r4, r4, #16
 8002100:	0c24      	lsrs	r4, r4, #16
 8002102:	0027      	movs	r7, r4
 8002104:	4357      	muls	r7, r2
 8002106:	436a      	muls	r2, r5
 8002108:	4690      	mov	r8, r2
 800210a:	002a      	movs	r2, r5
 800210c:	0c3b      	lsrs	r3, r7, #16
 800210e:	469a      	mov	sl, r3
 8002110:	434a      	muls	r2, r1
 8002112:	4361      	muls	r1, r4
 8002114:	4441      	add	r1, r8
 8002116:	4451      	add	r1, sl
 8002118:	4483      	add	fp, r0
 800211a:	4588      	cmp	r8, r1
 800211c:	d903      	bls.n	8002126 <__aeabi_dmul+0x252>
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	025b      	lsls	r3, r3, #9
 8002122:	4698      	mov	r8, r3
 8002124:	4442      	add	r2, r8
 8002126:	043f      	lsls	r7, r7, #16
 8002128:	0c0b      	lsrs	r3, r1, #16
 800212a:	0c3f      	lsrs	r7, r7, #16
 800212c:	0409      	lsls	r1, r1, #16
 800212e:	19c9      	adds	r1, r1, r7
 8002130:	0027      	movs	r7, r4
 8002132:	4698      	mov	r8, r3
 8002134:	464b      	mov	r3, r9
 8002136:	4377      	muls	r7, r6
 8002138:	435c      	muls	r4, r3
 800213a:	436e      	muls	r6, r5
 800213c:	435d      	muls	r5, r3
 800213e:	0c3b      	lsrs	r3, r7, #16
 8002140:	4699      	mov	r9, r3
 8002142:	19a4      	adds	r4, r4, r6
 8002144:	444c      	add	r4, r9
 8002146:	4442      	add	r2, r8
 8002148:	9503      	str	r5, [sp, #12]
 800214a:	42a6      	cmp	r6, r4
 800214c:	d904      	bls.n	8002158 <__aeabi_dmul+0x284>
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	025b      	lsls	r3, r3, #9
 8002152:	4698      	mov	r8, r3
 8002154:	4445      	add	r5, r8
 8002156:	9503      	str	r5, [sp, #12]
 8002158:	9b02      	ldr	r3, [sp, #8]
 800215a:	043f      	lsls	r7, r7, #16
 800215c:	445b      	add	r3, fp
 800215e:	001e      	movs	r6, r3
 8002160:	4283      	cmp	r3, r0
 8002162:	4180      	sbcs	r0, r0
 8002164:	0423      	lsls	r3, r4, #16
 8002166:	4698      	mov	r8, r3
 8002168:	9b05      	ldr	r3, [sp, #20]
 800216a:	0c3f      	lsrs	r7, r7, #16
 800216c:	4447      	add	r7, r8
 800216e:	4698      	mov	r8, r3
 8002170:	1876      	adds	r6, r6, r1
 8002172:	428e      	cmp	r6, r1
 8002174:	4189      	sbcs	r1, r1
 8002176:	4447      	add	r7, r8
 8002178:	4240      	negs	r0, r0
 800217a:	183d      	adds	r5, r7, r0
 800217c:	46a8      	mov	r8, r5
 800217e:	4693      	mov	fp, r2
 8002180:	4249      	negs	r1, r1
 8002182:	468a      	mov	sl, r1
 8002184:	44c3      	add	fp, r8
 8002186:	429f      	cmp	r7, r3
 8002188:	41bf      	sbcs	r7, r7
 800218a:	4580      	cmp	r8, r0
 800218c:	4180      	sbcs	r0, r0
 800218e:	9b03      	ldr	r3, [sp, #12]
 8002190:	44da      	add	sl, fp
 8002192:	4698      	mov	r8, r3
 8002194:	4653      	mov	r3, sl
 8002196:	4240      	negs	r0, r0
 8002198:	427f      	negs	r7, r7
 800219a:	4307      	orrs	r7, r0
 800219c:	0c24      	lsrs	r4, r4, #16
 800219e:	4593      	cmp	fp, r2
 80021a0:	4192      	sbcs	r2, r2
 80021a2:	458a      	cmp	sl, r1
 80021a4:	4189      	sbcs	r1, r1
 80021a6:	193f      	adds	r7, r7, r4
 80021a8:	0ddc      	lsrs	r4, r3, #23
 80021aa:	9b04      	ldr	r3, [sp, #16]
 80021ac:	0275      	lsls	r5, r6, #9
 80021ae:	431d      	orrs	r5, r3
 80021b0:	1e68      	subs	r0, r5, #1
 80021b2:	4185      	sbcs	r5, r0
 80021b4:	4653      	mov	r3, sl
 80021b6:	4252      	negs	r2, r2
 80021b8:	4249      	negs	r1, r1
 80021ba:	430a      	orrs	r2, r1
 80021bc:	18bf      	adds	r7, r7, r2
 80021be:	4447      	add	r7, r8
 80021c0:	0df6      	lsrs	r6, r6, #23
 80021c2:	027f      	lsls	r7, r7, #9
 80021c4:	4335      	orrs	r5, r6
 80021c6:	025a      	lsls	r2, r3, #9
 80021c8:	433c      	orrs	r4, r7
 80021ca:	4315      	orrs	r5, r2
 80021cc:	01fb      	lsls	r3, r7, #7
 80021ce:	d400      	bmi.n	80021d2 <__aeabi_dmul+0x2fe>
 80021d0:	e0c1      	b.n	8002356 <__aeabi_dmul+0x482>
 80021d2:	2101      	movs	r1, #1
 80021d4:	086a      	lsrs	r2, r5, #1
 80021d6:	400d      	ands	r5, r1
 80021d8:	4315      	orrs	r5, r2
 80021da:	07e2      	lsls	r2, r4, #31
 80021dc:	4315      	orrs	r5, r2
 80021de:	0864      	lsrs	r4, r4, #1
 80021e0:	4926      	ldr	r1, [pc, #152]	; (800227c <__aeabi_dmul+0x3a8>)
 80021e2:	4461      	add	r1, ip
 80021e4:	2900      	cmp	r1, #0
 80021e6:	dd56      	ble.n	8002296 <__aeabi_dmul+0x3c2>
 80021e8:	076b      	lsls	r3, r5, #29
 80021ea:	d009      	beq.n	8002200 <__aeabi_dmul+0x32c>
 80021ec:	220f      	movs	r2, #15
 80021ee:	402a      	ands	r2, r5
 80021f0:	2a04      	cmp	r2, #4
 80021f2:	d005      	beq.n	8002200 <__aeabi_dmul+0x32c>
 80021f4:	1d2a      	adds	r2, r5, #4
 80021f6:	42aa      	cmp	r2, r5
 80021f8:	41ad      	sbcs	r5, r5
 80021fa:	426d      	negs	r5, r5
 80021fc:	1964      	adds	r4, r4, r5
 80021fe:	0015      	movs	r5, r2
 8002200:	01e3      	lsls	r3, r4, #7
 8002202:	d504      	bpl.n	800220e <__aeabi_dmul+0x33a>
 8002204:	2180      	movs	r1, #128	; 0x80
 8002206:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <__aeabi_dmul+0x3ac>)
 8002208:	00c9      	lsls	r1, r1, #3
 800220a:	4014      	ands	r4, r2
 800220c:	4461      	add	r1, ip
 800220e:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <__aeabi_dmul+0x3b0>)
 8002210:	4291      	cmp	r1, r2
 8002212:	dd00      	ble.n	8002216 <__aeabi_dmul+0x342>
 8002214:	e724      	b.n	8002060 <__aeabi_dmul+0x18c>
 8002216:	0762      	lsls	r2, r4, #29
 8002218:	08ed      	lsrs	r5, r5, #3
 800221a:	0264      	lsls	r4, r4, #9
 800221c:	0549      	lsls	r1, r1, #21
 800221e:	4315      	orrs	r5, r2
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	0d4a      	lsrs	r2, r1, #21
 8002224:	e6c6      	b.n	8001fb4 <__aeabi_dmul+0xe0>
 8002226:	9701      	str	r7, [sp, #4]
 8002228:	e6b8      	b.n	8001f9c <__aeabi_dmul+0xc8>
 800222a:	4a10      	ldr	r2, [pc, #64]	; (800226c <__aeabi_dmul+0x398>)
 800222c:	2003      	movs	r0, #3
 800222e:	4694      	mov	ip, r2
 8002230:	4463      	add	r3, ip
 8002232:	464a      	mov	r2, r9
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2303      	movs	r3, #3
 8002238:	431a      	orrs	r2, r3
 800223a:	4691      	mov	r9, r2
 800223c:	4652      	mov	r2, sl
 800223e:	e68a      	b.n	8001f56 <__aeabi_dmul+0x82>
 8002240:	4649      	mov	r1, r9
 8002242:	2301      	movs	r3, #1
 8002244:	4319      	orrs	r1, r3
 8002246:	4689      	mov	r9, r1
 8002248:	2600      	movs	r6, #0
 800224a:	2001      	movs	r0, #1
 800224c:	e683      	b.n	8001f56 <__aeabi_dmul+0x82>
 800224e:	220c      	movs	r2, #12
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2303      	movs	r3, #3
 8002254:	0005      	movs	r5, r0
 8002256:	4691      	mov	r9, r2
 8002258:	469b      	mov	fp, r3
 800225a:	e65e      	b.n	8001f1a <__aeabi_dmul+0x46>
 800225c:	2304      	movs	r3, #4
 800225e:	4699      	mov	r9, r3
 8002260:	2300      	movs	r3, #0
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	2400      	movs	r4, #0
 8002268:	469b      	mov	fp, r3
 800226a:	e656      	b.n	8001f1a <__aeabi_dmul+0x46>
 800226c:	000007ff 	.word	0x000007ff
 8002270:	fffffc01 	.word	0xfffffc01
 8002274:	080079a8 	.word	0x080079a8
 8002278:	fffffc0d 	.word	0xfffffc0d
 800227c:	000003ff 	.word	0x000003ff
 8002280:	feffffff 	.word	0xfeffffff
 8002284:	000007fe 	.word	0x000007fe
 8002288:	2300      	movs	r3, #0
 800228a:	2480      	movs	r4, #128	; 0x80
 800228c:	2500      	movs	r5, #0
 800228e:	4a44      	ldr	r2, [pc, #272]	; (80023a0 <__aeabi_dmul+0x4cc>)
 8002290:	9301      	str	r3, [sp, #4]
 8002292:	0324      	lsls	r4, r4, #12
 8002294:	e68e      	b.n	8001fb4 <__aeabi_dmul+0xe0>
 8002296:	2001      	movs	r0, #1
 8002298:	1a40      	subs	r0, r0, r1
 800229a:	2838      	cmp	r0, #56	; 0x38
 800229c:	dd00      	ble.n	80022a0 <__aeabi_dmul+0x3cc>
 800229e:	e686      	b.n	8001fae <__aeabi_dmul+0xda>
 80022a0:	281f      	cmp	r0, #31
 80022a2:	dd5b      	ble.n	800235c <__aeabi_dmul+0x488>
 80022a4:	221f      	movs	r2, #31
 80022a6:	0023      	movs	r3, r4
 80022a8:	4252      	negs	r2, r2
 80022aa:	1a51      	subs	r1, r2, r1
 80022ac:	40cb      	lsrs	r3, r1
 80022ae:	0019      	movs	r1, r3
 80022b0:	2820      	cmp	r0, #32
 80022b2:	d003      	beq.n	80022bc <__aeabi_dmul+0x3e8>
 80022b4:	4a3b      	ldr	r2, [pc, #236]	; (80023a4 <__aeabi_dmul+0x4d0>)
 80022b6:	4462      	add	r2, ip
 80022b8:	4094      	lsls	r4, r2
 80022ba:	4325      	orrs	r5, r4
 80022bc:	1e6a      	subs	r2, r5, #1
 80022be:	4195      	sbcs	r5, r2
 80022c0:	002a      	movs	r2, r5
 80022c2:	430a      	orrs	r2, r1
 80022c4:	2107      	movs	r1, #7
 80022c6:	000d      	movs	r5, r1
 80022c8:	2400      	movs	r4, #0
 80022ca:	4015      	ands	r5, r2
 80022cc:	4211      	tst	r1, r2
 80022ce:	d05b      	beq.n	8002388 <__aeabi_dmul+0x4b4>
 80022d0:	210f      	movs	r1, #15
 80022d2:	2400      	movs	r4, #0
 80022d4:	4011      	ands	r1, r2
 80022d6:	2904      	cmp	r1, #4
 80022d8:	d053      	beq.n	8002382 <__aeabi_dmul+0x4ae>
 80022da:	1d11      	adds	r1, r2, #4
 80022dc:	4291      	cmp	r1, r2
 80022de:	4192      	sbcs	r2, r2
 80022e0:	4252      	negs	r2, r2
 80022e2:	18a4      	adds	r4, r4, r2
 80022e4:	000a      	movs	r2, r1
 80022e6:	0223      	lsls	r3, r4, #8
 80022e8:	d54b      	bpl.n	8002382 <__aeabi_dmul+0x4ae>
 80022ea:	2201      	movs	r2, #1
 80022ec:	2400      	movs	r4, #0
 80022ee:	2500      	movs	r5, #0
 80022f0:	e660      	b.n	8001fb4 <__aeabi_dmul+0xe0>
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	031b      	lsls	r3, r3, #12
 80022f6:	421c      	tst	r4, r3
 80022f8:	d009      	beq.n	800230e <__aeabi_dmul+0x43a>
 80022fa:	421e      	tst	r6, r3
 80022fc:	d107      	bne.n	800230e <__aeabi_dmul+0x43a>
 80022fe:	4333      	orrs	r3, r6
 8002300:	031c      	lsls	r4, r3, #12
 8002302:	4643      	mov	r3, r8
 8002304:	0015      	movs	r5, r2
 8002306:	0b24      	lsrs	r4, r4, #12
 8002308:	4a25      	ldr	r2, [pc, #148]	; (80023a0 <__aeabi_dmul+0x4cc>)
 800230a:	9301      	str	r3, [sp, #4]
 800230c:	e652      	b.n	8001fb4 <__aeabi_dmul+0xe0>
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	0312      	lsls	r2, r2, #12
 8002312:	4314      	orrs	r4, r2
 8002314:	0324      	lsls	r4, r4, #12
 8002316:	4a22      	ldr	r2, [pc, #136]	; (80023a0 <__aeabi_dmul+0x4cc>)
 8002318:	0b24      	lsrs	r4, r4, #12
 800231a:	9701      	str	r7, [sp, #4]
 800231c:	e64a      	b.n	8001fb4 <__aeabi_dmul+0xe0>
 800231e:	f000 fc99 	bl	8002c54 <__clzsi2>
 8002322:	0003      	movs	r3, r0
 8002324:	001a      	movs	r2, r3
 8002326:	3215      	adds	r2, #21
 8002328:	3020      	adds	r0, #32
 800232a:	2a1c      	cmp	r2, #28
 800232c:	dc00      	bgt.n	8002330 <__aeabi_dmul+0x45c>
 800232e:	e684      	b.n	800203a <__aeabi_dmul+0x166>
 8002330:	4656      	mov	r6, sl
 8002332:	3b08      	subs	r3, #8
 8002334:	2200      	movs	r2, #0
 8002336:	409e      	lsls	r6, r3
 8002338:	e689      	b.n	800204e <__aeabi_dmul+0x17a>
 800233a:	f000 fc8b 	bl	8002c54 <__clzsi2>
 800233e:	0001      	movs	r1, r0
 8002340:	0002      	movs	r2, r0
 8002342:	3115      	adds	r1, #21
 8002344:	3220      	adds	r2, #32
 8002346:	291c      	cmp	r1, #28
 8002348:	dc00      	bgt.n	800234c <__aeabi_dmul+0x478>
 800234a:	e64e      	b.n	8001fea <__aeabi_dmul+0x116>
 800234c:	0034      	movs	r4, r6
 800234e:	3808      	subs	r0, #8
 8002350:	2500      	movs	r5, #0
 8002352:	4084      	lsls	r4, r0
 8002354:	e653      	b.n	8001ffe <__aeabi_dmul+0x12a>
 8002356:	9b00      	ldr	r3, [sp, #0]
 8002358:	469c      	mov	ip, r3
 800235a:	e741      	b.n	80021e0 <__aeabi_dmul+0x30c>
 800235c:	4912      	ldr	r1, [pc, #72]	; (80023a8 <__aeabi_dmul+0x4d4>)
 800235e:	0022      	movs	r2, r4
 8002360:	4461      	add	r1, ip
 8002362:	002e      	movs	r6, r5
 8002364:	408d      	lsls	r5, r1
 8002366:	408a      	lsls	r2, r1
 8002368:	40c6      	lsrs	r6, r0
 800236a:	1e69      	subs	r1, r5, #1
 800236c:	418d      	sbcs	r5, r1
 800236e:	4332      	orrs	r2, r6
 8002370:	432a      	orrs	r2, r5
 8002372:	40c4      	lsrs	r4, r0
 8002374:	0753      	lsls	r3, r2, #29
 8002376:	d0b6      	beq.n	80022e6 <__aeabi_dmul+0x412>
 8002378:	210f      	movs	r1, #15
 800237a:	4011      	ands	r1, r2
 800237c:	2904      	cmp	r1, #4
 800237e:	d1ac      	bne.n	80022da <__aeabi_dmul+0x406>
 8002380:	e7b1      	b.n	80022e6 <__aeabi_dmul+0x412>
 8002382:	0765      	lsls	r5, r4, #29
 8002384:	0264      	lsls	r4, r4, #9
 8002386:	0b24      	lsrs	r4, r4, #12
 8002388:	08d2      	lsrs	r2, r2, #3
 800238a:	4315      	orrs	r5, r2
 800238c:	2200      	movs	r2, #0
 800238e:	e611      	b.n	8001fb4 <__aeabi_dmul+0xe0>
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	0312      	lsls	r2, r2, #12
 8002394:	4314      	orrs	r4, r2
 8002396:	0324      	lsls	r4, r4, #12
 8002398:	4a01      	ldr	r2, [pc, #4]	; (80023a0 <__aeabi_dmul+0x4cc>)
 800239a:	0b24      	lsrs	r4, r4, #12
 800239c:	e60a      	b.n	8001fb4 <__aeabi_dmul+0xe0>
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	000007ff 	.word	0x000007ff
 80023a4:	0000043e 	.word	0x0000043e
 80023a8:	0000041e 	.word	0x0000041e

080023ac <__aeabi_dsub>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	4657      	mov	r7, sl
 80023b0:	464e      	mov	r6, r9
 80023b2:	4645      	mov	r5, r8
 80023b4:	46de      	mov	lr, fp
 80023b6:	0004      	movs	r4, r0
 80023b8:	b5e0      	push	{r5, r6, r7, lr}
 80023ba:	001f      	movs	r7, r3
 80023bc:	0010      	movs	r0, r2
 80023be:	030b      	lsls	r3, r1, #12
 80023c0:	0f62      	lsrs	r2, r4, #29
 80023c2:	004e      	lsls	r6, r1, #1
 80023c4:	0fcd      	lsrs	r5, r1, #31
 80023c6:	0a5b      	lsrs	r3, r3, #9
 80023c8:	0339      	lsls	r1, r7, #12
 80023ca:	4313      	orrs	r3, r2
 80023cc:	0a49      	lsrs	r1, r1, #9
 80023ce:	00e2      	lsls	r2, r4, #3
 80023d0:	0f44      	lsrs	r4, r0, #29
 80023d2:	4321      	orrs	r1, r4
 80023d4:	4cc2      	ldr	r4, [pc, #776]	; (80026e0 <__aeabi_dsub+0x334>)
 80023d6:	4691      	mov	r9, r2
 80023d8:	4692      	mov	sl, r2
 80023da:	00c0      	lsls	r0, r0, #3
 80023dc:	007a      	lsls	r2, r7, #1
 80023de:	4680      	mov	r8, r0
 80023e0:	0d76      	lsrs	r6, r6, #21
 80023e2:	0d52      	lsrs	r2, r2, #21
 80023e4:	0fff      	lsrs	r7, r7, #31
 80023e6:	42a2      	cmp	r2, r4
 80023e8:	d100      	bne.n	80023ec <__aeabi_dsub+0x40>
 80023ea:	e0b4      	b.n	8002556 <__aeabi_dsub+0x1aa>
 80023ec:	2401      	movs	r4, #1
 80023ee:	4067      	eors	r7, r4
 80023f0:	46bb      	mov	fp, r7
 80023f2:	42bd      	cmp	r5, r7
 80023f4:	d100      	bne.n	80023f8 <__aeabi_dsub+0x4c>
 80023f6:	e088      	b.n	800250a <__aeabi_dsub+0x15e>
 80023f8:	1ab4      	subs	r4, r6, r2
 80023fa:	46a4      	mov	ip, r4
 80023fc:	2c00      	cmp	r4, #0
 80023fe:	dc00      	bgt.n	8002402 <__aeabi_dsub+0x56>
 8002400:	e0b2      	b.n	8002568 <__aeabi_dsub+0x1bc>
 8002402:	2a00      	cmp	r2, #0
 8002404:	d100      	bne.n	8002408 <__aeabi_dsub+0x5c>
 8002406:	e0c5      	b.n	8002594 <__aeabi_dsub+0x1e8>
 8002408:	4ab5      	ldr	r2, [pc, #724]	; (80026e0 <__aeabi_dsub+0x334>)
 800240a:	4296      	cmp	r6, r2
 800240c:	d100      	bne.n	8002410 <__aeabi_dsub+0x64>
 800240e:	e28b      	b.n	8002928 <__aeabi_dsub+0x57c>
 8002410:	2280      	movs	r2, #128	; 0x80
 8002412:	0412      	lsls	r2, r2, #16
 8002414:	4311      	orrs	r1, r2
 8002416:	4662      	mov	r2, ip
 8002418:	2a38      	cmp	r2, #56	; 0x38
 800241a:	dd00      	ble.n	800241e <__aeabi_dsub+0x72>
 800241c:	e1a1      	b.n	8002762 <__aeabi_dsub+0x3b6>
 800241e:	2a1f      	cmp	r2, #31
 8002420:	dd00      	ble.n	8002424 <__aeabi_dsub+0x78>
 8002422:	e216      	b.n	8002852 <__aeabi_dsub+0x4a6>
 8002424:	2720      	movs	r7, #32
 8002426:	000c      	movs	r4, r1
 8002428:	1abf      	subs	r7, r7, r2
 800242a:	40bc      	lsls	r4, r7
 800242c:	0002      	movs	r2, r0
 800242e:	46a0      	mov	r8, r4
 8002430:	4664      	mov	r4, ip
 8002432:	40b8      	lsls	r0, r7
 8002434:	40e2      	lsrs	r2, r4
 8002436:	4644      	mov	r4, r8
 8002438:	4314      	orrs	r4, r2
 800243a:	0002      	movs	r2, r0
 800243c:	1e50      	subs	r0, r2, #1
 800243e:	4182      	sbcs	r2, r0
 8002440:	4660      	mov	r0, ip
 8002442:	40c1      	lsrs	r1, r0
 8002444:	4322      	orrs	r2, r4
 8002446:	1a5b      	subs	r3, r3, r1
 8002448:	4649      	mov	r1, r9
 800244a:	1a8c      	subs	r4, r1, r2
 800244c:	45a1      	cmp	r9, r4
 800244e:	4192      	sbcs	r2, r2
 8002450:	4252      	negs	r2, r2
 8002452:	1a9b      	subs	r3, r3, r2
 8002454:	4698      	mov	r8, r3
 8002456:	4643      	mov	r3, r8
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	d400      	bmi.n	800245e <__aeabi_dsub+0xb2>
 800245c:	e117      	b.n	800268e <__aeabi_dsub+0x2e2>
 800245e:	4643      	mov	r3, r8
 8002460:	025b      	lsls	r3, r3, #9
 8002462:	0a5b      	lsrs	r3, r3, #9
 8002464:	4698      	mov	r8, r3
 8002466:	4643      	mov	r3, r8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d100      	bne.n	800246e <__aeabi_dsub+0xc2>
 800246c:	e16c      	b.n	8002748 <__aeabi_dsub+0x39c>
 800246e:	4640      	mov	r0, r8
 8002470:	f000 fbf0 	bl	8002c54 <__clzsi2>
 8002474:	0002      	movs	r2, r0
 8002476:	3a08      	subs	r2, #8
 8002478:	2120      	movs	r1, #32
 800247a:	0020      	movs	r0, r4
 800247c:	4643      	mov	r3, r8
 800247e:	1a89      	subs	r1, r1, r2
 8002480:	4093      	lsls	r3, r2
 8002482:	40c8      	lsrs	r0, r1
 8002484:	4094      	lsls	r4, r2
 8002486:	4303      	orrs	r3, r0
 8002488:	4296      	cmp	r6, r2
 800248a:	dd00      	ble.n	800248e <__aeabi_dsub+0xe2>
 800248c:	e157      	b.n	800273e <__aeabi_dsub+0x392>
 800248e:	1b96      	subs	r6, r2, r6
 8002490:	1c71      	adds	r1, r6, #1
 8002492:	291f      	cmp	r1, #31
 8002494:	dd00      	ble.n	8002498 <__aeabi_dsub+0xec>
 8002496:	e1cb      	b.n	8002830 <__aeabi_dsub+0x484>
 8002498:	2220      	movs	r2, #32
 800249a:	0018      	movs	r0, r3
 800249c:	0026      	movs	r6, r4
 800249e:	1a52      	subs	r2, r2, r1
 80024a0:	4094      	lsls	r4, r2
 80024a2:	4090      	lsls	r0, r2
 80024a4:	40ce      	lsrs	r6, r1
 80024a6:	40cb      	lsrs	r3, r1
 80024a8:	1e62      	subs	r2, r4, #1
 80024aa:	4194      	sbcs	r4, r2
 80024ac:	4330      	orrs	r0, r6
 80024ae:	4698      	mov	r8, r3
 80024b0:	2600      	movs	r6, #0
 80024b2:	4304      	orrs	r4, r0
 80024b4:	0763      	lsls	r3, r4, #29
 80024b6:	d009      	beq.n	80024cc <__aeabi_dsub+0x120>
 80024b8:	230f      	movs	r3, #15
 80024ba:	4023      	ands	r3, r4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d005      	beq.n	80024cc <__aeabi_dsub+0x120>
 80024c0:	1d23      	adds	r3, r4, #4
 80024c2:	42a3      	cmp	r3, r4
 80024c4:	41a4      	sbcs	r4, r4
 80024c6:	4264      	negs	r4, r4
 80024c8:	44a0      	add	r8, r4
 80024ca:	001c      	movs	r4, r3
 80024cc:	4643      	mov	r3, r8
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	d400      	bmi.n	80024d4 <__aeabi_dsub+0x128>
 80024d2:	e0df      	b.n	8002694 <__aeabi_dsub+0x2e8>
 80024d4:	4b82      	ldr	r3, [pc, #520]	; (80026e0 <__aeabi_dsub+0x334>)
 80024d6:	3601      	adds	r6, #1
 80024d8:	429e      	cmp	r6, r3
 80024da:	d100      	bne.n	80024de <__aeabi_dsub+0x132>
 80024dc:	e0fb      	b.n	80026d6 <__aeabi_dsub+0x32a>
 80024de:	4642      	mov	r2, r8
 80024e0:	4b80      	ldr	r3, [pc, #512]	; (80026e4 <__aeabi_dsub+0x338>)
 80024e2:	08e4      	lsrs	r4, r4, #3
 80024e4:	401a      	ands	r2, r3
 80024e6:	0013      	movs	r3, r2
 80024e8:	0571      	lsls	r1, r6, #21
 80024ea:	0752      	lsls	r2, r2, #29
 80024ec:	025b      	lsls	r3, r3, #9
 80024ee:	4322      	orrs	r2, r4
 80024f0:	0b1b      	lsrs	r3, r3, #12
 80024f2:	0d49      	lsrs	r1, r1, #21
 80024f4:	0509      	lsls	r1, r1, #20
 80024f6:	07ed      	lsls	r5, r5, #31
 80024f8:	4319      	orrs	r1, r3
 80024fa:	4329      	orrs	r1, r5
 80024fc:	0010      	movs	r0, r2
 80024fe:	bcf0      	pop	{r4, r5, r6, r7}
 8002500:	46bb      	mov	fp, r7
 8002502:	46b2      	mov	sl, r6
 8002504:	46a9      	mov	r9, r5
 8002506:	46a0      	mov	r8, r4
 8002508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800250a:	1ab4      	subs	r4, r6, r2
 800250c:	46a4      	mov	ip, r4
 800250e:	2c00      	cmp	r4, #0
 8002510:	dd58      	ble.n	80025c4 <__aeabi_dsub+0x218>
 8002512:	2a00      	cmp	r2, #0
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x16c>
 8002516:	e09e      	b.n	8002656 <__aeabi_dsub+0x2aa>
 8002518:	4a71      	ldr	r2, [pc, #452]	; (80026e0 <__aeabi_dsub+0x334>)
 800251a:	4296      	cmp	r6, r2
 800251c:	d100      	bne.n	8002520 <__aeabi_dsub+0x174>
 800251e:	e13b      	b.n	8002798 <__aeabi_dsub+0x3ec>
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	0412      	lsls	r2, r2, #16
 8002524:	4311      	orrs	r1, r2
 8002526:	4662      	mov	r2, ip
 8002528:	2a38      	cmp	r2, #56	; 0x38
 800252a:	dd00      	ble.n	800252e <__aeabi_dsub+0x182>
 800252c:	e0c1      	b.n	80026b2 <__aeabi_dsub+0x306>
 800252e:	2a1f      	cmp	r2, #31
 8002530:	dc00      	bgt.n	8002534 <__aeabi_dsub+0x188>
 8002532:	e1bb      	b.n	80028ac <__aeabi_dsub+0x500>
 8002534:	000c      	movs	r4, r1
 8002536:	3a20      	subs	r2, #32
 8002538:	40d4      	lsrs	r4, r2
 800253a:	0022      	movs	r2, r4
 800253c:	4664      	mov	r4, ip
 800253e:	2c20      	cmp	r4, #32
 8002540:	d004      	beq.n	800254c <__aeabi_dsub+0x1a0>
 8002542:	2740      	movs	r7, #64	; 0x40
 8002544:	1b3f      	subs	r7, r7, r4
 8002546:	40b9      	lsls	r1, r7
 8002548:	4308      	orrs	r0, r1
 800254a:	4680      	mov	r8, r0
 800254c:	4644      	mov	r4, r8
 800254e:	1e61      	subs	r1, r4, #1
 8002550:	418c      	sbcs	r4, r1
 8002552:	4314      	orrs	r4, r2
 8002554:	e0b1      	b.n	80026ba <__aeabi_dsub+0x30e>
 8002556:	000c      	movs	r4, r1
 8002558:	4304      	orrs	r4, r0
 800255a:	d02a      	beq.n	80025b2 <__aeabi_dsub+0x206>
 800255c:	46bb      	mov	fp, r7
 800255e:	42bd      	cmp	r5, r7
 8002560:	d02d      	beq.n	80025be <__aeabi_dsub+0x212>
 8002562:	4c61      	ldr	r4, [pc, #388]	; (80026e8 <__aeabi_dsub+0x33c>)
 8002564:	46a4      	mov	ip, r4
 8002566:	44b4      	add	ip, r6
 8002568:	4664      	mov	r4, ip
 800256a:	2c00      	cmp	r4, #0
 800256c:	d05c      	beq.n	8002628 <__aeabi_dsub+0x27c>
 800256e:	1b94      	subs	r4, r2, r6
 8002570:	46a4      	mov	ip, r4
 8002572:	2e00      	cmp	r6, #0
 8002574:	d000      	beq.n	8002578 <__aeabi_dsub+0x1cc>
 8002576:	e115      	b.n	80027a4 <__aeabi_dsub+0x3f8>
 8002578:	464d      	mov	r5, r9
 800257a:	431d      	orrs	r5, r3
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x1d4>
 800257e:	e1c3      	b.n	8002908 <__aeabi_dsub+0x55c>
 8002580:	1e65      	subs	r5, r4, #1
 8002582:	2c01      	cmp	r4, #1
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x1dc>
 8002586:	e20c      	b.n	80029a2 <__aeabi_dsub+0x5f6>
 8002588:	4e55      	ldr	r6, [pc, #340]	; (80026e0 <__aeabi_dsub+0x334>)
 800258a:	42b4      	cmp	r4, r6
 800258c:	d100      	bne.n	8002590 <__aeabi_dsub+0x1e4>
 800258e:	e1f8      	b.n	8002982 <__aeabi_dsub+0x5d6>
 8002590:	46ac      	mov	ip, r5
 8002592:	e10e      	b.n	80027b2 <__aeabi_dsub+0x406>
 8002594:	000a      	movs	r2, r1
 8002596:	4302      	orrs	r2, r0
 8002598:	d100      	bne.n	800259c <__aeabi_dsub+0x1f0>
 800259a:	e136      	b.n	800280a <__aeabi_dsub+0x45e>
 800259c:	0022      	movs	r2, r4
 800259e:	3a01      	subs	r2, #1
 80025a0:	2c01      	cmp	r4, #1
 80025a2:	d100      	bne.n	80025a6 <__aeabi_dsub+0x1fa>
 80025a4:	e1c6      	b.n	8002934 <__aeabi_dsub+0x588>
 80025a6:	4c4e      	ldr	r4, [pc, #312]	; (80026e0 <__aeabi_dsub+0x334>)
 80025a8:	45a4      	cmp	ip, r4
 80025aa:	d100      	bne.n	80025ae <__aeabi_dsub+0x202>
 80025ac:	e0f4      	b.n	8002798 <__aeabi_dsub+0x3ec>
 80025ae:	4694      	mov	ip, r2
 80025b0:	e731      	b.n	8002416 <__aeabi_dsub+0x6a>
 80025b2:	2401      	movs	r4, #1
 80025b4:	4067      	eors	r7, r4
 80025b6:	46bb      	mov	fp, r7
 80025b8:	42bd      	cmp	r5, r7
 80025ba:	d000      	beq.n	80025be <__aeabi_dsub+0x212>
 80025bc:	e71c      	b.n	80023f8 <__aeabi_dsub+0x4c>
 80025be:	4c4a      	ldr	r4, [pc, #296]	; (80026e8 <__aeabi_dsub+0x33c>)
 80025c0:	46a4      	mov	ip, r4
 80025c2:	44b4      	add	ip, r6
 80025c4:	4664      	mov	r4, ip
 80025c6:	2c00      	cmp	r4, #0
 80025c8:	d100      	bne.n	80025cc <__aeabi_dsub+0x220>
 80025ca:	e0cf      	b.n	800276c <__aeabi_dsub+0x3c0>
 80025cc:	1b94      	subs	r4, r2, r6
 80025ce:	46a4      	mov	ip, r4
 80025d0:	2e00      	cmp	r6, #0
 80025d2:	d100      	bne.n	80025d6 <__aeabi_dsub+0x22a>
 80025d4:	e15c      	b.n	8002890 <__aeabi_dsub+0x4e4>
 80025d6:	4e42      	ldr	r6, [pc, #264]	; (80026e0 <__aeabi_dsub+0x334>)
 80025d8:	42b2      	cmp	r2, r6
 80025da:	d100      	bne.n	80025de <__aeabi_dsub+0x232>
 80025dc:	e1ec      	b.n	80029b8 <__aeabi_dsub+0x60c>
 80025de:	2680      	movs	r6, #128	; 0x80
 80025e0:	0436      	lsls	r6, r6, #16
 80025e2:	4333      	orrs	r3, r6
 80025e4:	4664      	mov	r4, ip
 80025e6:	2c38      	cmp	r4, #56	; 0x38
 80025e8:	dd00      	ble.n	80025ec <__aeabi_dsub+0x240>
 80025ea:	e1b3      	b.n	8002954 <__aeabi_dsub+0x5a8>
 80025ec:	2c1f      	cmp	r4, #31
 80025ee:	dd00      	ble.n	80025f2 <__aeabi_dsub+0x246>
 80025f0:	e238      	b.n	8002a64 <__aeabi_dsub+0x6b8>
 80025f2:	2620      	movs	r6, #32
 80025f4:	1b36      	subs	r6, r6, r4
 80025f6:	001c      	movs	r4, r3
 80025f8:	40b4      	lsls	r4, r6
 80025fa:	464f      	mov	r7, r9
 80025fc:	46a0      	mov	r8, r4
 80025fe:	4664      	mov	r4, ip
 8002600:	40e7      	lsrs	r7, r4
 8002602:	4644      	mov	r4, r8
 8002604:	433c      	orrs	r4, r7
 8002606:	464f      	mov	r7, r9
 8002608:	40b7      	lsls	r7, r6
 800260a:	003e      	movs	r6, r7
 800260c:	1e77      	subs	r7, r6, #1
 800260e:	41be      	sbcs	r6, r7
 8002610:	4334      	orrs	r4, r6
 8002612:	4666      	mov	r6, ip
 8002614:	40f3      	lsrs	r3, r6
 8002616:	18c9      	adds	r1, r1, r3
 8002618:	1824      	adds	r4, r4, r0
 800261a:	4284      	cmp	r4, r0
 800261c:	419b      	sbcs	r3, r3
 800261e:	425b      	negs	r3, r3
 8002620:	4698      	mov	r8, r3
 8002622:	0016      	movs	r6, r2
 8002624:	4488      	add	r8, r1
 8002626:	e04e      	b.n	80026c6 <__aeabi_dsub+0x31a>
 8002628:	4a30      	ldr	r2, [pc, #192]	; (80026ec <__aeabi_dsub+0x340>)
 800262a:	1c74      	adds	r4, r6, #1
 800262c:	4214      	tst	r4, r2
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x286>
 8002630:	e0d6      	b.n	80027e0 <__aeabi_dsub+0x434>
 8002632:	464a      	mov	r2, r9
 8002634:	431a      	orrs	r2, r3
 8002636:	2e00      	cmp	r6, #0
 8002638:	d000      	beq.n	800263c <__aeabi_dsub+0x290>
 800263a:	e15b      	b.n	80028f4 <__aeabi_dsub+0x548>
 800263c:	2a00      	cmp	r2, #0
 800263e:	d100      	bne.n	8002642 <__aeabi_dsub+0x296>
 8002640:	e1a5      	b.n	800298e <__aeabi_dsub+0x5e2>
 8002642:	000a      	movs	r2, r1
 8002644:	4302      	orrs	r2, r0
 8002646:	d000      	beq.n	800264a <__aeabi_dsub+0x29e>
 8002648:	e1bb      	b.n	80029c2 <__aeabi_dsub+0x616>
 800264a:	464a      	mov	r2, r9
 800264c:	0759      	lsls	r1, r3, #29
 800264e:	08d2      	lsrs	r2, r2, #3
 8002650:	430a      	orrs	r2, r1
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	e027      	b.n	80026a6 <__aeabi_dsub+0x2fa>
 8002656:	000a      	movs	r2, r1
 8002658:	4302      	orrs	r2, r0
 800265a:	d100      	bne.n	800265e <__aeabi_dsub+0x2b2>
 800265c:	e174      	b.n	8002948 <__aeabi_dsub+0x59c>
 800265e:	0022      	movs	r2, r4
 8002660:	3a01      	subs	r2, #1
 8002662:	2c01      	cmp	r4, #1
 8002664:	d005      	beq.n	8002672 <__aeabi_dsub+0x2c6>
 8002666:	4c1e      	ldr	r4, [pc, #120]	; (80026e0 <__aeabi_dsub+0x334>)
 8002668:	45a4      	cmp	ip, r4
 800266a:	d100      	bne.n	800266e <__aeabi_dsub+0x2c2>
 800266c:	e094      	b.n	8002798 <__aeabi_dsub+0x3ec>
 800266e:	4694      	mov	ip, r2
 8002670:	e759      	b.n	8002526 <__aeabi_dsub+0x17a>
 8002672:	4448      	add	r0, r9
 8002674:	4548      	cmp	r0, r9
 8002676:	4192      	sbcs	r2, r2
 8002678:	185b      	adds	r3, r3, r1
 800267a:	4698      	mov	r8, r3
 800267c:	0004      	movs	r4, r0
 800267e:	4252      	negs	r2, r2
 8002680:	4490      	add	r8, r2
 8002682:	4643      	mov	r3, r8
 8002684:	2602      	movs	r6, #2
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	d500      	bpl.n	800268c <__aeabi_dsub+0x2e0>
 800268a:	e0c4      	b.n	8002816 <__aeabi_dsub+0x46a>
 800268c:	3e01      	subs	r6, #1
 800268e:	0763      	lsls	r3, r4, #29
 8002690:	d000      	beq.n	8002694 <__aeabi_dsub+0x2e8>
 8002692:	e711      	b.n	80024b8 <__aeabi_dsub+0x10c>
 8002694:	4643      	mov	r3, r8
 8002696:	46b4      	mov	ip, r6
 8002698:	0759      	lsls	r1, r3, #29
 800269a:	08e2      	lsrs	r2, r4, #3
 800269c:	430a      	orrs	r2, r1
 800269e:	08db      	lsrs	r3, r3, #3
 80026a0:	490f      	ldr	r1, [pc, #60]	; (80026e0 <__aeabi_dsub+0x334>)
 80026a2:	458c      	cmp	ip, r1
 80026a4:	d040      	beq.n	8002728 <__aeabi_dsub+0x37c>
 80026a6:	4661      	mov	r1, ip
 80026a8:	031b      	lsls	r3, r3, #12
 80026aa:	0549      	lsls	r1, r1, #21
 80026ac:	0b1b      	lsrs	r3, r3, #12
 80026ae:	0d49      	lsrs	r1, r1, #21
 80026b0:	e720      	b.n	80024f4 <__aeabi_dsub+0x148>
 80026b2:	4301      	orrs	r1, r0
 80026b4:	000c      	movs	r4, r1
 80026b6:	1e61      	subs	r1, r4, #1
 80026b8:	418c      	sbcs	r4, r1
 80026ba:	444c      	add	r4, r9
 80026bc:	454c      	cmp	r4, r9
 80026be:	4192      	sbcs	r2, r2
 80026c0:	4252      	negs	r2, r2
 80026c2:	4690      	mov	r8, r2
 80026c4:	4498      	add	r8, r3
 80026c6:	4643      	mov	r3, r8
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	d5e0      	bpl.n	800268e <__aeabi_dsub+0x2e2>
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <__aeabi_dsub+0x334>)
 80026ce:	3601      	adds	r6, #1
 80026d0:	429e      	cmp	r6, r3
 80026d2:	d000      	beq.n	80026d6 <__aeabi_dsub+0x32a>
 80026d4:	e09f      	b.n	8002816 <__aeabi_dsub+0x46a>
 80026d6:	0031      	movs	r1, r6
 80026d8:	2300      	movs	r3, #0
 80026da:	2200      	movs	r2, #0
 80026dc:	e70a      	b.n	80024f4 <__aeabi_dsub+0x148>
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	000007ff 	.word	0x000007ff
 80026e4:	ff7fffff 	.word	0xff7fffff
 80026e8:	fffff801 	.word	0xfffff801
 80026ec:	000007fe 	.word	0x000007fe
 80026f0:	2a00      	cmp	r2, #0
 80026f2:	d100      	bne.n	80026f6 <__aeabi_dsub+0x34a>
 80026f4:	e160      	b.n	80029b8 <__aeabi_dsub+0x60c>
 80026f6:	000a      	movs	r2, r1
 80026f8:	4302      	orrs	r2, r0
 80026fa:	d04d      	beq.n	8002798 <__aeabi_dsub+0x3ec>
 80026fc:	464a      	mov	r2, r9
 80026fe:	075c      	lsls	r4, r3, #29
 8002700:	08d2      	lsrs	r2, r2, #3
 8002702:	4322      	orrs	r2, r4
 8002704:	2480      	movs	r4, #128	; 0x80
 8002706:	08db      	lsrs	r3, r3, #3
 8002708:	0324      	lsls	r4, r4, #12
 800270a:	4223      	tst	r3, r4
 800270c:	d007      	beq.n	800271e <__aeabi_dsub+0x372>
 800270e:	08ce      	lsrs	r6, r1, #3
 8002710:	4226      	tst	r6, r4
 8002712:	d104      	bne.n	800271e <__aeabi_dsub+0x372>
 8002714:	465d      	mov	r5, fp
 8002716:	0033      	movs	r3, r6
 8002718:	08c2      	lsrs	r2, r0, #3
 800271a:	0749      	lsls	r1, r1, #29
 800271c:	430a      	orrs	r2, r1
 800271e:	0f51      	lsrs	r1, r2, #29
 8002720:	00d2      	lsls	r2, r2, #3
 8002722:	08d2      	lsrs	r2, r2, #3
 8002724:	0749      	lsls	r1, r1, #29
 8002726:	430a      	orrs	r2, r1
 8002728:	0011      	movs	r1, r2
 800272a:	4319      	orrs	r1, r3
 800272c:	d100      	bne.n	8002730 <__aeabi_dsub+0x384>
 800272e:	e1c8      	b.n	8002ac2 <__aeabi_dsub+0x716>
 8002730:	2180      	movs	r1, #128	; 0x80
 8002732:	0309      	lsls	r1, r1, #12
 8002734:	430b      	orrs	r3, r1
 8002736:	031b      	lsls	r3, r3, #12
 8002738:	49d5      	ldr	r1, [pc, #852]	; (8002a90 <__aeabi_dsub+0x6e4>)
 800273a:	0b1b      	lsrs	r3, r3, #12
 800273c:	e6da      	b.n	80024f4 <__aeabi_dsub+0x148>
 800273e:	49d5      	ldr	r1, [pc, #852]	; (8002a94 <__aeabi_dsub+0x6e8>)
 8002740:	1ab6      	subs	r6, r6, r2
 8002742:	400b      	ands	r3, r1
 8002744:	4698      	mov	r8, r3
 8002746:	e6b5      	b.n	80024b4 <__aeabi_dsub+0x108>
 8002748:	0020      	movs	r0, r4
 800274a:	f000 fa83 	bl	8002c54 <__clzsi2>
 800274e:	0002      	movs	r2, r0
 8002750:	3218      	adds	r2, #24
 8002752:	2a1f      	cmp	r2, #31
 8002754:	dc00      	bgt.n	8002758 <__aeabi_dsub+0x3ac>
 8002756:	e68f      	b.n	8002478 <__aeabi_dsub+0xcc>
 8002758:	0023      	movs	r3, r4
 800275a:	3808      	subs	r0, #8
 800275c:	4083      	lsls	r3, r0
 800275e:	2400      	movs	r4, #0
 8002760:	e692      	b.n	8002488 <__aeabi_dsub+0xdc>
 8002762:	4308      	orrs	r0, r1
 8002764:	0002      	movs	r2, r0
 8002766:	1e50      	subs	r0, r2, #1
 8002768:	4182      	sbcs	r2, r0
 800276a:	e66d      	b.n	8002448 <__aeabi_dsub+0x9c>
 800276c:	4cca      	ldr	r4, [pc, #808]	; (8002a98 <__aeabi_dsub+0x6ec>)
 800276e:	1c72      	adds	r2, r6, #1
 8002770:	4222      	tst	r2, r4
 8002772:	d000      	beq.n	8002776 <__aeabi_dsub+0x3ca>
 8002774:	e0ad      	b.n	80028d2 <__aeabi_dsub+0x526>
 8002776:	464a      	mov	r2, r9
 8002778:	431a      	orrs	r2, r3
 800277a:	2e00      	cmp	r6, #0
 800277c:	d1b8      	bne.n	80026f0 <__aeabi_dsub+0x344>
 800277e:	2a00      	cmp	r2, #0
 8002780:	d100      	bne.n	8002784 <__aeabi_dsub+0x3d8>
 8002782:	e158      	b.n	8002a36 <__aeabi_dsub+0x68a>
 8002784:	000a      	movs	r2, r1
 8002786:	4302      	orrs	r2, r0
 8002788:	d000      	beq.n	800278c <__aeabi_dsub+0x3e0>
 800278a:	e159      	b.n	8002a40 <__aeabi_dsub+0x694>
 800278c:	464a      	mov	r2, r9
 800278e:	0759      	lsls	r1, r3, #29
 8002790:	08d2      	lsrs	r2, r2, #3
 8002792:	430a      	orrs	r2, r1
 8002794:	08db      	lsrs	r3, r3, #3
 8002796:	e786      	b.n	80026a6 <__aeabi_dsub+0x2fa>
 8002798:	464a      	mov	r2, r9
 800279a:	0759      	lsls	r1, r3, #29
 800279c:	08d2      	lsrs	r2, r2, #3
 800279e:	430a      	orrs	r2, r1
 80027a0:	08db      	lsrs	r3, r3, #3
 80027a2:	e7c1      	b.n	8002728 <__aeabi_dsub+0x37c>
 80027a4:	4dba      	ldr	r5, [pc, #744]	; (8002a90 <__aeabi_dsub+0x6e4>)
 80027a6:	42aa      	cmp	r2, r5
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x400>
 80027aa:	e11e      	b.n	80029ea <__aeabi_dsub+0x63e>
 80027ac:	2580      	movs	r5, #128	; 0x80
 80027ae:	042d      	lsls	r5, r5, #16
 80027b0:	432b      	orrs	r3, r5
 80027b2:	4664      	mov	r4, ip
 80027b4:	2c38      	cmp	r4, #56	; 0x38
 80027b6:	dc5d      	bgt.n	8002874 <__aeabi_dsub+0x4c8>
 80027b8:	2c1f      	cmp	r4, #31
 80027ba:	dd00      	ble.n	80027be <__aeabi_dsub+0x412>
 80027bc:	e0d0      	b.n	8002960 <__aeabi_dsub+0x5b4>
 80027be:	2520      	movs	r5, #32
 80027c0:	4667      	mov	r7, ip
 80027c2:	1b2d      	subs	r5, r5, r4
 80027c4:	464e      	mov	r6, r9
 80027c6:	001c      	movs	r4, r3
 80027c8:	40fe      	lsrs	r6, r7
 80027ca:	40ac      	lsls	r4, r5
 80027cc:	4334      	orrs	r4, r6
 80027ce:	464e      	mov	r6, r9
 80027d0:	40ae      	lsls	r6, r5
 80027d2:	0035      	movs	r5, r6
 80027d4:	40fb      	lsrs	r3, r7
 80027d6:	1e6e      	subs	r6, r5, #1
 80027d8:	41b5      	sbcs	r5, r6
 80027da:	1ac9      	subs	r1, r1, r3
 80027dc:	432c      	orrs	r4, r5
 80027de:	e04e      	b.n	800287e <__aeabi_dsub+0x4d2>
 80027e0:	464a      	mov	r2, r9
 80027e2:	1a14      	subs	r4, r2, r0
 80027e4:	45a1      	cmp	r9, r4
 80027e6:	4192      	sbcs	r2, r2
 80027e8:	4252      	negs	r2, r2
 80027ea:	4690      	mov	r8, r2
 80027ec:	1a5f      	subs	r7, r3, r1
 80027ee:	003a      	movs	r2, r7
 80027f0:	4647      	mov	r7, r8
 80027f2:	1bd2      	subs	r2, r2, r7
 80027f4:	4690      	mov	r8, r2
 80027f6:	0212      	lsls	r2, r2, #8
 80027f8:	d500      	bpl.n	80027fc <__aeabi_dsub+0x450>
 80027fa:	e08b      	b.n	8002914 <__aeabi_dsub+0x568>
 80027fc:	4642      	mov	r2, r8
 80027fe:	4322      	orrs	r2, r4
 8002800:	d000      	beq.n	8002804 <__aeabi_dsub+0x458>
 8002802:	e630      	b.n	8002466 <__aeabi_dsub+0xba>
 8002804:	2300      	movs	r3, #0
 8002806:	2500      	movs	r5, #0
 8002808:	e74d      	b.n	80026a6 <__aeabi_dsub+0x2fa>
 800280a:	464a      	mov	r2, r9
 800280c:	0759      	lsls	r1, r3, #29
 800280e:	08d2      	lsrs	r2, r2, #3
 8002810:	430a      	orrs	r2, r1
 8002812:	08db      	lsrs	r3, r3, #3
 8002814:	e744      	b.n	80026a0 <__aeabi_dsub+0x2f4>
 8002816:	4642      	mov	r2, r8
 8002818:	4b9e      	ldr	r3, [pc, #632]	; (8002a94 <__aeabi_dsub+0x6e8>)
 800281a:	0861      	lsrs	r1, r4, #1
 800281c:	401a      	ands	r2, r3
 800281e:	0013      	movs	r3, r2
 8002820:	2201      	movs	r2, #1
 8002822:	4014      	ands	r4, r2
 8002824:	430c      	orrs	r4, r1
 8002826:	07da      	lsls	r2, r3, #31
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	4698      	mov	r8, r3
 800282c:	4314      	orrs	r4, r2
 800282e:	e641      	b.n	80024b4 <__aeabi_dsub+0x108>
 8002830:	001a      	movs	r2, r3
 8002832:	3e1f      	subs	r6, #31
 8002834:	40f2      	lsrs	r2, r6
 8002836:	0016      	movs	r6, r2
 8002838:	2920      	cmp	r1, #32
 800283a:	d003      	beq.n	8002844 <__aeabi_dsub+0x498>
 800283c:	2240      	movs	r2, #64	; 0x40
 800283e:	1a51      	subs	r1, r2, r1
 8002840:	408b      	lsls	r3, r1
 8002842:	431c      	orrs	r4, r3
 8002844:	1e62      	subs	r2, r4, #1
 8002846:	4194      	sbcs	r4, r2
 8002848:	2300      	movs	r3, #0
 800284a:	4334      	orrs	r4, r6
 800284c:	4698      	mov	r8, r3
 800284e:	2600      	movs	r6, #0
 8002850:	e71d      	b.n	800268e <__aeabi_dsub+0x2e2>
 8002852:	000c      	movs	r4, r1
 8002854:	3a20      	subs	r2, #32
 8002856:	40d4      	lsrs	r4, r2
 8002858:	0022      	movs	r2, r4
 800285a:	4664      	mov	r4, ip
 800285c:	2c20      	cmp	r4, #32
 800285e:	d004      	beq.n	800286a <__aeabi_dsub+0x4be>
 8002860:	2740      	movs	r7, #64	; 0x40
 8002862:	1b3f      	subs	r7, r7, r4
 8002864:	40b9      	lsls	r1, r7
 8002866:	4308      	orrs	r0, r1
 8002868:	4680      	mov	r8, r0
 800286a:	4644      	mov	r4, r8
 800286c:	1e61      	subs	r1, r4, #1
 800286e:	418c      	sbcs	r4, r1
 8002870:	4322      	orrs	r2, r4
 8002872:	e5e9      	b.n	8002448 <__aeabi_dsub+0x9c>
 8002874:	464c      	mov	r4, r9
 8002876:	4323      	orrs	r3, r4
 8002878:	001c      	movs	r4, r3
 800287a:	1e63      	subs	r3, r4, #1
 800287c:	419c      	sbcs	r4, r3
 800287e:	1b04      	subs	r4, r0, r4
 8002880:	42a0      	cmp	r0, r4
 8002882:	419b      	sbcs	r3, r3
 8002884:	425b      	negs	r3, r3
 8002886:	1acb      	subs	r3, r1, r3
 8002888:	4698      	mov	r8, r3
 800288a:	465d      	mov	r5, fp
 800288c:	0016      	movs	r6, r2
 800288e:	e5e2      	b.n	8002456 <__aeabi_dsub+0xaa>
 8002890:	464e      	mov	r6, r9
 8002892:	431e      	orrs	r6, r3
 8002894:	d100      	bne.n	8002898 <__aeabi_dsub+0x4ec>
 8002896:	e0ae      	b.n	80029f6 <__aeabi_dsub+0x64a>
 8002898:	1e66      	subs	r6, r4, #1
 800289a:	2c01      	cmp	r4, #1
 800289c:	d100      	bne.n	80028a0 <__aeabi_dsub+0x4f4>
 800289e:	e0fd      	b.n	8002a9c <__aeabi_dsub+0x6f0>
 80028a0:	4f7b      	ldr	r7, [pc, #492]	; (8002a90 <__aeabi_dsub+0x6e4>)
 80028a2:	42bc      	cmp	r4, r7
 80028a4:	d100      	bne.n	80028a8 <__aeabi_dsub+0x4fc>
 80028a6:	e107      	b.n	8002ab8 <__aeabi_dsub+0x70c>
 80028a8:	46b4      	mov	ip, r6
 80028aa:	e69b      	b.n	80025e4 <__aeabi_dsub+0x238>
 80028ac:	4664      	mov	r4, ip
 80028ae:	2220      	movs	r2, #32
 80028b0:	1b12      	subs	r2, r2, r4
 80028b2:	000c      	movs	r4, r1
 80028b4:	4094      	lsls	r4, r2
 80028b6:	0007      	movs	r7, r0
 80028b8:	4090      	lsls	r0, r2
 80028ba:	46a0      	mov	r8, r4
 80028bc:	4664      	mov	r4, ip
 80028be:	1e42      	subs	r2, r0, #1
 80028c0:	4190      	sbcs	r0, r2
 80028c2:	4662      	mov	r2, ip
 80028c4:	40e7      	lsrs	r7, r4
 80028c6:	4644      	mov	r4, r8
 80028c8:	40d1      	lsrs	r1, r2
 80028ca:	433c      	orrs	r4, r7
 80028cc:	4304      	orrs	r4, r0
 80028ce:	185b      	adds	r3, r3, r1
 80028d0:	e6f3      	b.n	80026ba <__aeabi_dsub+0x30e>
 80028d2:	4c6f      	ldr	r4, [pc, #444]	; (8002a90 <__aeabi_dsub+0x6e4>)
 80028d4:	42a2      	cmp	r2, r4
 80028d6:	d100      	bne.n	80028da <__aeabi_dsub+0x52e>
 80028d8:	e0d5      	b.n	8002a86 <__aeabi_dsub+0x6da>
 80028da:	4448      	add	r0, r9
 80028dc:	185b      	adds	r3, r3, r1
 80028de:	4548      	cmp	r0, r9
 80028e0:	4189      	sbcs	r1, r1
 80028e2:	4249      	negs	r1, r1
 80028e4:	185b      	adds	r3, r3, r1
 80028e6:	07dc      	lsls	r4, r3, #31
 80028e8:	0840      	lsrs	r0, r0, #1
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	4698      	mov	r8, r3
 80028ee:	0016      	movs	r6, r2
 80028f0:	4304      	orrs	r4, r0
 80028f2:	e6cc      	b.n	800268e <__aeabi_dsub+0x2e2>
 80028f4:	2a00      	cmp	r2, #0
 80028f6:	d000      	beq.n	80028fa <__aeabi_dsub+0x54e>
 80028f8:	e082      	b.n	8002a00 <__aeabi_dsub+0x654>
 80028fa:	000a      	movs	r2, r1
 80028fc:	4302      	orrs	r2, r0
 80028fe:	d140      	bne.n	8002982 <__aeabi_dsub+0x5d6>
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	2500      	movs	r5, #0
 8002904:	031b      	lsls	r3, r3, #12
 8002906:	e713      	b.n	8002730 <__aeabi_dsub+0x384>
 8002908:	074b      	lsls	r3, r1, #29
 800290a:	08c2      	lsrs	r2, r0, #3
 800290c:	431a      	orrs	r2, r3
 800290e:	465d      	mov	r5, fp
 8002910:	08cb      	lsrs	r3, r1, #3
 8002912:	e6c5      	b.n	80026a0 <__aeabi_dsub+0x2f4>
 8002914:	464a      	mov	r2, r9
 8002916:	1a84      	subs	r4, r0, r2
 8002918:	42a0      	cmp	r0, r4
 800291a:	4192      	sbcs	r2, r2
 800291c:	1acb      	subs	r3, r1, r3
 800291e:	4252      	negs	r2, r2
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	4698      	mov	r8, r3
 8002924:	465d      	mov	r5, fp
 8002926:	e59e      	b.n	8002466 <__aeabi_dsub+0xba>
 8002928:	464a      	mov	r2, r9
 800292a:	0759      	lsls	r1, r3, #29
 800292c:	08d2      	lsrs	r2, r2, #3
 800292e:	430a      	orrs	r2, r1
 8002930:	08db      	lsrs	r3, r3, #3
 8002932:	e6f9      	b.n	8002728 <__aeabi_dsub+0x37c>
 8002934:	464a      	mov	r2, r9
 8002936:	1a14      	subs	r4, r2, r0
 8002938:	45a1      	cmp	r9, r4
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a5b      	subs	r3, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	4698      	mov	r8, r3
 8002944:	2601      	movs	r6, #1
 8002946:	e586      	b.n	8002456 <__aeabi_dsub+0xaa>
 8002948:	464a      	mov	r2, r9
 800294a:	0759      	lsls	r1, r3, #29
 800294c:	08d2      	lsrs	r2, r2, #3
 800294e:	430a      	orrs	r2, r1
 8002950:	08db      	lsrs	r3, r3, #3
 8002952:	e6a5      	b.n	80026a0 <__aeabi_dsub+0x2f4>
 8002954:	464c      	mov	r4, r9
 8002956:	4323      	orrs	r3, r4
 8002958:	001c      	movs	r4, r3
 800295a:	1e63      	subs	r3, r4, #1
 800295c:	419c      	sbcs	r4, r3
 800295e:	e65b      	b.n	8002618 <__aeabi_dsub+0x26c>
 8002960:	4665      	mov	r5, ip
 8002962:	001e      	movs	r6, r3
 8002964:	3d20      	subs	r5, #32
 8002966:	40ee      	lsrs	r6, r5
 8002968:	2c20      	cmp	r4, #32
 800296a:	d005      	beq.n	8002978 <__aeabi_dsub+0x5cc>
 800296c:	2540      	movs	r5, #64	; 0x40
 800296e:	1b2d      	subs	r5, r5, r4
 8002970:	40ab      	lsls	r3, r5
 8002972:	464c      	mov	r4, r9
 8002974:	431c      	orrs	r4, r3
 8002976:	46a2      	mov	sl, r4
 8002978:	4654      	mov	r4, sl
 800297a:	1e63      	subs	r3, r4, #1
 800297c:	419c      	sbcs	r4, r3
 800297e:	4334      	orrs	r4, r6
 8002980:	e77d      	b.n	800287e <__aeabi_dsub+0x4d2>
 8002982:	074b      	lsls	r3, r1, #29
 8002984:	08c2      	lsrs	r2, r0, #3
 8002986:	431a      	orrs	r2, r3
 8002988:	465d      	mov	r5, fp
 800298a:	08cb      	lsrs	r3, r1, #3
 800298c:	e6cc      	b.n	8002728 <__aeabi_dsub+0x37c>
 800298e:	000a      	movs	r2, r1
 8002990:	4302      	orrs	r2, r0
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x5ea>
 8002994:	e736      	b.n	8002804 <__aeabi_dsub+0x458>
 8002996:	074b      	lsls	r3, r1, #29
 8002998:	08c2      	lsrs	r2, r0, #3
 800299a:	431a      	orrs	r2, r3
 800299c:	465d      	mov	r5, fp
 800299e:	08cb      	lsrs	r3, r1, #3
 80029a0:	e681      	b.n	80026a6 <__aeabi_dsub+0x2fa>
 80029a2:	464a      	mov	r2, r9
 80029a4:	1a84      	subs	r4, r0, r2
 80029a6:	42a0      	cmp	r0, r4
 80029a8:	4192      	sbcs	r2, r2
 80029aa:	1acb      	subs	r3, r1, r3
 80029ac:	4252      	negs	r2, r2
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	4698      	mov	r8, r3
 80029b2:	465d      	mov	r5, fp
 80029b4:	2601      	movs	r6, #1
 80029b6:	e54e      	b.n	8002456 <__aeabi_dsub+0xaa>
 80029b8:	074b      	lsls	r3, r1, #29
 80029ba:	08c2      	lsrs	r2, r0, #3
 80029bc:	431a      	orrs	r2, r3
 80029be:	08cb      	lsrs	r3, r1, #3
 80029c0:	e6b2      	b.n	8002728 <__aeabi_dsub+0x37c>
 80029c2:	464a      	mov	r2, r9
 80029c4:	1a14      	subs	r4, r2, r0
 80029c6:	45a1      	cmp	r9, r4
 80029c8:	4192      	sbcs	r2, r2
 80029ca:	1a5f      	subs	r7, r3, r1
 80029cc:	4252      	negs	r2, r2
 80029ce:	1aba      	subs	r2, r7, r2
 80029d0:	4690      	mov	r8, r2
 80029d2:	0212      	lsls	r2, r2, #8
 80029d4:	d56b      	bpl.n	8002aae <__aeabi_dsub+0x702>
 80029d6:	464a      	mov	r2, r9
 80029d8:	1a84      	subs	r4, r0, r2
 80029da:	42a0      	cmp	r0, r4
 80029dc:	4192      	sbcs	r2, r2
 80029de:	1acb      	subs	r3, r1, r3
 80029e0:	4252      	negs	r2, r2
 80029e2:	1a9b      	subs	r3, r3, r2
 80029e4:	4698      	mov	r8, r3
 80029e6:	465d      	mov	r5, fp
 80029e8:	e564      	b.n	80024b4 <__aeabi_dsub+0x108>
 80029ea:	074b      	lsls	r3, r1, #29
 80029ec:	08c2      	lsrs	r2, r0, #3
 80029ee:	431a      	orrs	r2, r3
 80029f0:	465d      	mov	r5, fp
 80029f2:	08cb      	lsrs	r3, r1, #3
 80029f4:	e698      	b.n	8002728 <__aeabi_dsub+0x37c>
 80029f6:	074b      	lsls	r3, r1, #29
 80029f8:	08c2      	lsrs	r2, r0, #3
 80029fa:	431a      	orrs	r2, r3
 80029fc:	08cb      	lsrs	r3, r1, #3
 80029fe:	e64f      	b.n	80026a0 <__aeabi_dsub+0x2f4>
 8002a00:	000a      	movs	r2, r1
 8002a02:	4302      	orrs	r2, r0
 8002a04:	d090      	beq.n	8002928 <__aeabi_dsub+0x57c>
 8002a06:	464a      	mov	r2, r9
 8002a08:	075c      	lsls	r4, r3, #29
 8002a0a:	08d2      	lsrs	r2, r2, #3
 8002a0c:	4314      	orrs	r4, r2
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	0312      	lsls	r2, r2, #12
 8002a14:	4213      	tst	r3, r2
 8002a16:	d008      	beq.n	8002a2a <__aeabi_dsub+0x67e>
 8002a18:	08ce      	lsrs	r6, r1, #3
 8002a1a:	4216      	tst	r6, r2
 8002a1c:	d105      	bne.n	8002a2a <__aeabi_dsub+0x67e>
 8002a1e:	08c0      	lsrs	r0, r0, #3
 8002a20:	0749      	lsls	r1, r1, #29
 8002a22:	4308      	orrs	r0, r1
 8002a24:	0004      	movs	r4, r0
 8002a26:	465d      	mov	r5, fp
 8002a28:	0033      	movs	r3, r6
 8002a2a:	0f61      	lsrs	r1, r4, #29
 8002a2c:	00e2      	lsls	r2, r4, #3
 8002a2e:	0749      	lsls	r1, r1, #29
 8002a30:	08d2      	lsrs	r2, r2, #3
 8002a32:	430a      	orrs	r2, r1
 8002a34:	e678      	b.n	8002728 <__aeabi_dsub+0x37c>
 8002a36:	074b      	lsls	r3, r1, #29
 8002a38:	08c2      	lsrs	r2, r0, #3
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	08cb      	lsrs	r3, r1, #3
 8002a3e:	e632      	b.n	80026a6 <__aeabi_dsub+0x2fa>
 8002a40:	4448      	add	r0, r9
 8002a42:	185b      	adds	r3, r3, r1
 8002a44:	4548      	cmp	r0, r9
 8002a46:	4192      	sbcs	r2, r2
 8002a48:	4698      	mov	r8, r3
 8002a4a:	4252      	negs	r2, r2
 8002a4c:	4490      	add	r8, r2
 8002a4e:	4643      	mov	r3, r8
 8002a50:	0004      	movs	r4, r0
 8002a52:	021b      	lsls	r3, r3, #8
 8002a54:	d400      	bmi.n	8002a58 <__aeabi_dsub+0x6ac>
 8002a56:	e61a      	b.n	800268e <__aeabi_dsub+0x2e2>
 8002a58:	4642      	mov	r2, r8
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <__aeabi_dsub+0x6e8>)
 8002a5c:	2601      	movs	r6, #1
 8002a5e:	401a      	ands	r2, r3
 8002a60:	4690      	mov	r8, r2
 8002a62:	e614      	b.n	800268e <__aeabi_dsub+0x2e2>
 8002a64:	4666      	mov	r6, ip
 8002a66:	001f      	movs	r7, r3
 8002a68:	3e20      	subs	r6, #32
 8002a6a:	40f7      	lsrs	r7, r6
 8002a6c:	2c20      	cmp	r4, #32
 8002a6e:	d005      	beq.n	8002a7c <__aeabi_dsub+0x6d0>
 8002a70:	2640      	movs	r6, #64	; 0x40
 8002a72:	1b36      	subs	r6, r6, r4
 8002a74:	40b3      	lsls	r3, r6
 8002a76:	464c      	mov	r4, r9
 8002a78:	431c      	orrs	r4, r3
 8002a7a:	46a2      	mov	sl, r4
 8002a7c:	4654      	mov	r4, sl
 8002a7e:	1e63      	subs	r3, r4, #1
 8002a80:	419c      	sbcs	r4, r3
 8002a82:	433c      	orrs	r4, r7
 8002a84:	e5c8      	b.n	8002618 <__aeabi_dsub+0x26c>
 8002a86:	0011      	movs	r1, r2
 8002a88:	2300      	movs	r3, #0
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	e532      	b.n	80024f4 <__aeabi_dsub+0x148>
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	000007ff 	.word	0x000007ff
 8002a94:	ff7fffff 	.word	0xff7fffff
 8002a98:	000007fe 	.word	0x000007fe
 8002a9c:	464a      	mov	r2, r9
 8002a9e:	1814      	adds	r4, r2, r0
 8002aa0:	4284      	cmp	r4, r0
 8002aa2:	4192      	sbcs	r2, r2
 8002aa4:	185b      	adds	r3, r3, r1
 8002aa6:	4698      	mov	r8, r3
 8002aa8:	4252      	negs	r2, r2
 8002aaa:	4490      	add	r8, r2
 8002aac:	e5e9      	b.n	8002682 <__aeabi_dsub+0x2d6>
 8002aae:	4642      	mov	r2, r8
 8002ab0:	4322      	orrs	r2, r4
 8002ab2:	d100      	bne.n	8002ab6 <__aeabi_dsub+0x70a>
 8002ab4:	e6a6      	b.n	8002804 <__aeabi_dsub+0x458>
 8002ab6:	e5ea      	b.n	800268e <__aeabi_dsub+0x2e2>
 8002ab8:	074b      	lsls	r3, r1, #29
 8002aba:	08c2      	lsrs	r2, r0, #3
 8002abc:	431a      	orrs	r2, r3
 8002abe:	08cb      	lsrs	r3, r1, #3
 8002ac0:	e632      	b.n	8002728 <__aeabi_dsub+0x37c>
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	4901      	ldr	r1, [pc, #4]	; (8002acc <__aeabi_dsub+0x720>)
 8002ac6:	0013      	movs	r3, r2
 8002ac8:	e514      	b.n	80024f4 <__aeabi_dsub+0x148>
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	000007ff 	.word	0x000007ff

08002ad0 <__aeabi_dcmpun>:
 8002ad0:	b570      	push	{r4, r5, r6, lr}
 8002ad2:	0005      	movs	r5, r0
 8002ad4:	480c      	ldr	r0, [pc, #48]	; (8002b08 <__aeabi_dcmpun+0x38>)
 8002ad6:	030c      	lsls	r4, r1, #12
 8002ad8:	0016      	movs	r6, r2
 8002ada:	0049      	lsls	r1, r1, #1
 8002adc:	031a      	lsls	r2, r3, #12
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	0b24      	lsrs	r4, r4, #12
 8002ae2:	0d49      	lsrs	r1, r1, #21
 8002ae4:	0b12      	lsrs	r2, r2, #12
 8002ae6:	0d5b      	lsrs	r3, r3, #21
 8002ae8:	4281      	cmp	r1, r0
 8002aea:	d008      	beq.n	8002afe <__aeabi_dcmpun+0x2e>
 8002aec:	4906      	ldr	r1, [pc, #24]	; (8002b08 <__aeabi_dcmpun+0x38>)
 8002aee:	2000      	movs	r0, #0
 8002af0:	428b      	cmp	r3, r1
 8002af2:	d103      	bne.n	8002afc <__aeabi_dcmpun+0x2c>
 8002af4:	4332      	orrs	r2, r6
 8002af6:	0010      	movs	r0, r2
 8002af8:	1e42      	subs	r2, r0, #1
 8002afa:	4190      	sbcs	r0, r2
 8002afc:	bd70      	pop	{r4, r5, r6, pc}
 8002afe:	2001      	movs	r0, #1
 8002b00:	432c      	orrs	r4, r5
 8002b02:	d1fb      	bne.n	8002afc <__aeabi_dcmpun+0x2c>
 8002b04:	e7f2      	b.n	8002aec <__aeabi_dcmpun+0x1c>
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	000007ff 	.word	0x000007ff

08002b0c <__aeabi_d2iz>:
 8002b0c:	000a      	movs	r2, r1
 8002b0e:	b530      	push	{r4, r5, lr}
 8002b10:	4c13      	ldr	r4, [pc, #76]	; (8002b60 <__aeabi_d2iz+0x54>)
 8002b12:	0053      	lsls	r3, r2, #1
 8002b14:	0309      	lsls	r1, r1, #12
 8002b16:	0005      	movs	r5, r0
 8002b18:	0b09      	lsrs	r1, r1, #12
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	0d5b      	lsrs	r3, r3, #21
 8002b1e:	0fd2      	lsrs	r2, r2, #31
 8002b20:	42a3      	cmp	r3, r4
 8002b22:	dd04      	ble.n	8002b2e <__aeabi_d2iz+0x22>
 8002b24:	480f      	ldr	r0, [pc, #60]	; (8002b64 <__aeabi_d2iz+0x58>)
 8002b26:	4283      	cmp	r3, r0
 8002b28:	dd02      	ble.n	8002b30 <__aeabi_d2iz+0x24>
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	; (8002b68 <__aeabi_d2iz+0x5c>)
 8002b2c:	18d0      	adds	r0, r2, r3
 8002b2e:	bd30      	pop	{r4, r5, pc}
 8002b30:	2080      	movs	r0, #128	; 0x80
 8002b32:	0340      	lsls	r0, r0, #13
 8002b34:	4301      	orrs	r1, r0
 8002b36:	480d      	ldr	r0, [pc, #52]	; (8002b6c <__aeabi_d2iz+0x60>)
 8002b38:	1ac0      	subs	r0, r0, r3
 8002b3a:	281f      	cmp	r0, #31
 8002b3c:	dd08      	ble.n	8002b50 <__aeabi_d2iz+0x44>
 8002b3e:	480c      	ldr	r0, [pc, #48]	; (8002b70 <__aeabi_d2iz+0x64>)
 8002b40:	1ac3      	subs	r3, r0, r3
 8002b42:	40d9      	lsrs	r1, r3
 8002b44:	000b      	movs	r3, r1
 8002b46:	4258      	negs	r0, r3
 8002b48:	2a00      	cmp	r2, #0
 8002b4a:	d1f0      	bne.n	8002b2e <__aeabi_d2iz+0x22>
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	e7ee      	b.n	8002b2e <__aeabi_d2iz+0x22>
 8002b50:	4c08      	ldr	r4, [pc, #32]	; (8002b74 <__aeabi_d2iz+0x68>)
 8002b52:	40c5      	lsrs	r5, r0
 8002b54:	46a4      	mov	ip, r4
 8002b56:	4463      	add	r3, ip
 8002b58:	4099      	lsls	r1, r3
 8002b5a:	000b      	movs	r3, r1
 8002b5c:	432b      	orrs	r3, r5
 8002b5e:	e7f2      	b.n	8002b46 <__aeabi_d2iz+0x3a>
 8002b60:	000003fe 	.word	0x000003fe
 8002b64:	0000041d 	.word	0x0000041d
 8002b68:	7fffffff 	.word	0x7fffffff
 8002b6c:	00000433 	.word	0x00000433
 8002b70:	00000413 	.word	0x00000413
 8002b74:	fffffbed 	.word	0xfffffbed

08002b78 <__aeabi_ui2d>:
 8002b78:	b510      	push	{r4, lr}
 8002b7a:	1e04      	subs	r4, r0, #0
 8002b7c:	d010      	beq.n	8002ba0 <__aeabi_ui2d+0x28>
 8002b7e:	f000 f869 	bl	8002c54 <__clzsi2>
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_ui2d+0x48>)
 8002b84:	1a1b      	subs	r3, r3, r0
 8002b86:	280a      	cmp	r0, #10
 8002b88:	dc11      	bgt.n	8002bae <__aeabi_ui2d+0x36>
 8002b8a:	220b      	movs	r2, #11
 8002b8c:	0021      	movs	r1, r4
 8002b8e:	1a12      	subs	r2, r2, r0
 8002b90:	40d1      	lsrs	r1, r2
 8002b92:	3015      	adds	r0, #21
 8002b94:	030a      	lsls	r2, r1, #12
 8002b96:	055b      	lsls	r3, r3, #21
 8002b98:	4084      	lsls	r4, r0
 8002b9a:	0b12      	lsrs	r2, r2, #12
 8002b9c:	0d5b      	lsrs	r3, r3, #21
 8002b9e:	e001      	b.n	8002ba4 <__aeabi_ui2d+0x2c>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	051b      	lsls	r3, r3, #20
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	0020      	movs	r0, r4
 8002baa:	0019      	movs	r1, r3
 8002bac:	bd10      	pop	{r4, pc}
 8002bae:	0022      	movs	r2, r4
 8002bb0:	380b      	subs	r0, #11
 8002bb2:	4082      	lsls	r2, r0
 8002bb4:	055b      	lsls	r3, r3, #21
 8002bb6:	0312      	lsls	r2, r2, #12
 8002bb8:	2400      	movs	r4, #0
 8002bba:	0b12      	lsrs	r2, r2, #12
 8002bbc:	0d5b      	lsrs	r3, r3, #21
 8002bbe:	e7f1      	b.n	8002ba4 <__aeabi_ui2d+0x2c>
 8002bc0:	0000041e 	.word	0x0000041e

08002bc4 <__aeabi_f2d>:
 8002bc4:	b570      	push	{r4, r5, r6, lr}
 8002bc6:	0043      	lsls	r3, r0, #1
 8002bc8:	0246      	lsls	r6, r0, #9
 8002bca:	0fc4      	lsrs	r4, r0, #31
 8002bcc:	20fe      	movs	r0, #254	; 0xfe
 8002bce:	0e1b      	lsrs	r3, r3, #24
 8002bd0:	1c59      	adds	r1, r3, #1
 8002bd2:	0a75      	lsrs	r5, r6, #9
 8002bd4:	4208      	tst	r0, r1
 8002bd6:	d00c      	beq.n	8002bf2 <__aeabi_f2d+0x2e>
 8002bd8:	22e0      	movs	r2, #224	; 0xe0
 8002bda:	0092      	lsls	r2, r2, #2
 8002bdc:	4694      	mov	ip, r2
 8002bde:	076d      	lsls	r5, r5, #29
 8002be0:	0b36      	lsrs	r6, r6, #12
 8002be2:	4463      	add	r3, ip
 8002be4:	051b      	lsls	r3, r3, #20
 8002be6:	4333      	orrs	r3, r6
 8002be8:	07e4      	lsls	r4, r4, #31
 8002bea:	4323      	orrs	r3, r4
 8002bec:	0028      	movs	r0, r5
 8002bee:	0019      	movs	r1, r3
 8002bf0:	bd70      	pop	{r4, r5, r6, pc}
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d114      	bne.n	8002c20 <__aeabi_f2d+0x5c>
 8002bf6:	2d00      	cmp	r5, #0
 8002bf8:	d01b      	beq.n	8002c32 <__aeabi_f2d+0x6e>
 8002bfa:	0028      	movs	r0, r5
 8002bfc:	f000 f82a 	bl	8002c54 <__clzsi2>
 8002c00:	280a      	cmp	r0, #10
 8002c02:	dc1c      	bgt.n	8002c3e <__aeabi_f2d+0x7a>
 8002c04:	230b      	movs	r3, #11
 8002c06:	002a      	movs	r2, r5
 8002c08:	1a1b      	subs	r3, r3, r0
 8002c0a:	40da      	lsrs	r2, r3
 8002c0c:	0003      	movs	r3, r0
 8002c0e:	3315      	adds	r3, #21
 8002c10:	409d      	lsls	r5, r3
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <__aeabi_f2d+0x88>)
 8002c14:	0312      	lsls	r2, r2, #12
 8002c16:	1a1b      	subs	r3, r3, r0
 8002c18:	055b      	lsls	r3, r3, #21
 8002c1a:	0b16      	lsrs	r6, r2, #12
 8002c1c:	0d5b      	lsrs	r3, r3, #21
 8002c1e:	e7e1      	b.n	8002be4 <__aeabi_f2d+0x20>
 8002c20:	2d00      	cmp	r5, #0
 8002c22:	d009      	beq.n	8002c38 <__aeabi_f2d+0x74>
 8002c24:	0b32      	lsrs	r2, r6, #12
 8002c26:	2680      	movs	r6, #128	; 0x80
 8002c28:	0336      	lsls	r6, r6, #12
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <__aeabi_f2d+0x8c>)
 8002c2c:	076d      	lsls	r5, r5, #29
 8002c2e:	4316      	orrs	r6, r2
 8002c30:	e7d8      	b.n	8002be4 <__aeabi_f2d+0x20>
 8002c32:	2300      	movs	r3, #0
 8002c34:	2600      	movs	r6, #0
 8002c36:	e7d5      	b.n	8002be4 <__aeabi_f2d+0x20>
 8002c38:	2600      	movs	r6, #0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <__aeabi_f2d+0x8c>)
 8002c3c:	e7d2      	b.n	8002be4 <__aeabi_f2d+0x20>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	002a      	movs	r2, r5
 8002c42:	3b0b      	subs	r3, #11
 8002c44:	409a      	lsls	r2, r3
 8002c46:	2500      	movs	r5, #0
 8002c48:	e7e3      	b.n	8002c12 <__aeabi_f2d+0x4e>
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	00000389 	.word	0x00000389
 8002c50:	000007ff 	.word	0x000007ff

08002c54 <__clzsi2>:
 8002c54:	211c      	movs	r1, #28
 8002c56:	2301      	movs	r3, #1
 8002c58:	041b      	lsls	r3, r3, #16
 8002c5a:	4298      	cmp	r0, r3
 8002c5c:	d301      	bcc.n	8002c62 <__clzsi2+0xe>
 8002c5e:	0c00      	lsrs	r0, r0, #16
 8002c60:	3910      	subs	r1, #16
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	4298      	cmp	r0, r3
 8002c66:	d301      	bcc.n	8002c6c <__clzsi2+0x18>
 8002c68:	0a00      	lsrs	r0, r0, #8
 8002c6a:	3908      	subs	r1, #8
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	4298      	cmp	r0, r3
 8002c70:	d301      	bcc.n	8002c76 <__clzsi2+0x22>
 8002c72:	0900      	lsrs	r0, r0, #4
 8002c74:	3904      	subs	r1, #4
 8002c76:	a202      	add	r2, pc, #8	; (adr r2, 8002c80 <__clzsi2+0x2c>)
 8002c78:	5c10      	ldrb	r0, [r2, r0]
 8002c7a:	1840      	adds	r0, r0, r1
 8002c7c:	4770      	bx	lr
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	02020304 	.word	0x02020304
 8002c84:	01010101 	.word	0x01010101
	...

08002c90 <__clzdi2>:
 8002c90:	b510      	push	{r4, lr}
 8002c92:	2900      	cmp	r1, #0
 8002c94:	d103      	bne.n	8002c9e <__clzdi2+0xe>
 8002c96:	f7ff ffdd 	bl	8002c54 <__clzsi2>
 8002c9a:	3020      	adds	r0, #32
 8002c9c:	e002      	b.n	8002ca4 <__clzdi2+0x14>
 8002c9e:	1c08      	adds	r0, r1, #0
 8002ca0:	f7ff ffd8 	bl	8002c54 <__clzsi2>
 8002ca4:	bd10      	pop	{r4, pc}
 8002ca6:	46c0      	nop			; (mov r8, r8)

08002ca8 <__io_putchar>:

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */

int __io_putchar(int ch){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <__io_putchar+0x20>)
 8002cb2:	1d39      	adds	r1, r7, #4
 8002cb4:	4805      	ldr	r0, [pc, #20]	; (8002ccc <__io_putchar+0x24>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f003 f8da 	bl	8005e70 <HAL_UART_Transmit>
}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	46c0      	nop			; (mov r8, r8)
 8002cc8:	0000ffff 	.word	0x0000ffff
 8002ccc:	20000a9c 	.word	0x20000a9c

08002cd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b087      	sub	sp, #28
 8002cd4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002cd6:	f001 f9dd 	bl	8004094 <HAL_Init>
  MX_GPIO_Init();
 8002cda:	f000 ffc3 	bl	8003c64 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002cde:	f000 ff51 	bl	8003b84 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002ce2:	f000 ff8f 	bl	8003c04 <MX_USART1_UART_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ce6:	f000 fef3 	bl	8003ad0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  printf("Hello, dear user\r\n");
 8002cea:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <main+0x138>)
 8002cec:	0018      	movs	r0, r3
 8002cee:	f003 fce1 	bl	80066b4 <puts>

  max30102_init();
 8002cf2:	f000 f893 	bl	8002e1c <max30102_init>

  uint8_t flag = 0;
 8002cf6:	1dfb      	adds	r3, r7, #7
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
  uint8_t tstflag = 0;
 8002cfc:	1dbb      	adds	r3, r7, #6
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
  uint8_t spo2s = 0;
 8002d02:	1d7b      	adds	r3, r7, #5
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  uint8_t part_id = 0;
 8002d08:	1cbb      	adds	r3, r7, #2
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
  uint8_t disflag = 0;
 8002d0e:	1d3b      	adds	r3, r7, #4
 8002d10:	2200      	movs	r2, #0
 8002d12:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WLE */

	  while(HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, PART_ID, I2C_MEMADD_SIZE_8BIT, &part_id, 1, 10)){
 8002d14:	e016      	b.n	8002d44 <main+0x74>
			if(disflag == 0){
 8002d16:	1d3b      	adds	r3, r7, #4
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d103      	bne.n	8002d26 <main+0x56>
				printf("MAX30102 is disconnected\r\n");
 8002d1e:	4b3b      	ldr	r3, [pc, #236]	; (8002e0c <main+0x13c>)
 8002d20:	0018      	movs	r0, r3
 8002d22:	f003 fcc7 	bl	80066b4 <puts>
			}
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002d26:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <main+0x140>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2110      	movs	r1, #16
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f001 fc72 	bl	8004616 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <main+0x140>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	2108      	movs	r1, #8
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f001 fc6c 	bl	8004616 <HAL_GPIO_WritePin>
			disflag = 1;
 8002d3e:	1d3b      	adds	r3, r7, #4
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
	  while(HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, PART_ID, I2C_MEMADD_SIZE_8BIT, &part_id, 1, 10)){
 8002d44:	4833      	ldr	r0, [pc, #204]	; (8002e14 <main+0x144>)
 8002d46:	230a      	movs	r3, #10
 8002d48:	9302      	str	r3, [sp, #8]
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	1cbb      	adds	r3, r7, #2
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	2301      	movs	r3, #1
 8002d54:	22ff      	movs	r2, #255	; 0xff
 8002d56:	21af      	movs	r1, #175	; 0xaf
 8002d58:	f001 fe3e 	bl	80049d8 <HAL_I2C_Mem_Read>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d1da      	bne.n	8002d16 <main+0x46>
	  }
	  disflag = 0;
 8002d60:	1d3b      	adds	r3, r7, #4
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]


		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_RESET) {
 8002d66:	4b2a      	ldr	r3, [pc, #168]	; (8002e10 <main+0x140>)
 8002d68:	2120      	movs	r1, #32
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f001 fc36 	bl	80045dc <HAL_GPIO_ReadPin>
 8002d70:	1e03      	subs	r3, r0, #0
 8002d72:	d1e7      	bne.n	8002d44 <main+0x74>


			max30102_cal();
 8002d74:	f000 fd3a 	bl	80037ec <max30102_cal>
			uint8_t spo2 = max30102_getSpO2();
 8002d78:	1cfc      	adds	r4, r7, #3
 8002d7a:	f000 fe9f 	bl	8003abc <max30102_getSpO2>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	7023      	strb	r3, [r4, #0]

			if(spo2 != 0){
 8002d82:	1cfb      	adds	r3, r7, #3
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d032      	beq.n	8002df0 <main+0x120>

				if(spo2 > 89){
 8002d8a:	1cfb      	adds	r3, r7, #3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b59      	cmp	r3, #89	; 0x59
 8002d90:	d923      	bls.n	8002dda <main+0x10a>
					if(spo2s != spo2){
 8002d92:	1d7a      	adds	r2, r7, #5
 8002d94:	1cfb      	adds	r3, r7, #3
 8002d96:	7812      	ldrb	r2, [r2, #0]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d019      	beq.n	8002dd2 <main+0x102>
						printf("Oxygen level: %d percent\r\n", spo2);
 8002d9e:	1cfb      	adds	r3, r7, #3
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <main+0x148>)
 8002da4:	0011      	movs	r1, r2
 8002da6:	0018      	movs	r0, r3
 8002da8:	f003 fbf8 	bl	800659c <iprintf>

						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <main+0x140>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	2108      	movs	r1, #8
 8002db2:	0018      	movs	r0, r3
 8002db4:	f001 fc2f 	bl	8004616 <HAL_GPIO_WritePin>
						spo2s = spo2;
 8002db8:	1d7b      	adds	r3, r7, #5
 8002dba:	1cfa      	adds	r2, r7, #3
 8002dbc:	7812      	ldrb	r2, [r2, #0]
 8002dbe:	701a      	strb	r2, [r3, #0]
						HAL_Delay(10);
 8002dc0:	200a      	movs	r0, #10
 8002dc2:	f001 f9cb 	bl	800415c <HAL_Delay>
						HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <main+0x140>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2108      	movs	r1, #8
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f001 fc22 	bl	8004616 <HAL_GPIO_WritePin>
					}
					tstflag = 0;
 8002dd2:	1dbb      	adds	r3, r7, #6
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e006      	b.n	8002de8 <main+0x118>
				}else if(tstflag == 0){
 8002dda:	1dbb      	adds	r3, r7, #6
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d102      	bne.n	8002de8 <main+0x118>
					tstflag = 1;
 8002de2:	1dbb      	adds	r3, r7, #6
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
				}
				flag = 0;
 8002de8:	1dfb      	adds	r3, r7, #7
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	e7a9      	b.n	8002d44 <main+0x74>
			}else if(spo2 == 0 && flag == 0){
 8002df0:	1cfb      	adds	r3, r7, #3
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1a5      	bne.n	8002d44 <main+0x74>
 8002df8:	1dfb      	adds	r3, r7, #7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1a1      	bne.n	8002d44 <main+0x74>
				flag = 1;
 8002e00:	1dfb      	adds	r3, r7, #7
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
	  while(HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, PART_ID, I2C_MEMADD_SIZE_8BIT, &part_id, 1, 10)){
 8002e06:	e79d      	b.n	8002d44 <main+0x74>
 8002e08:	080077ac 	.word	0x080077ac
 8002e0c:	080077c0 	.word	0x080077c0
 8002e10:	48000400 	.word	0x48000400
 8002e14:	20000410 	.word	0x20000410
 8002e18:	080077dc 	.word	0x080077dc

08002e1c <max30102_init>:




void max30102_init()
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af04      	add	r7, sp, #16
	  uint8_t part_id = 0;
 8002e22:	1dbb      	adds	r3, r7, #6
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
	  uint8_t data;
	  uint8_t onflag = 0;
 8002e28:	1dfb      	adds	r3, r7, #7
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]

	  while(part_id != 0x15){
 8002e2e:	e01a      	b.n	8002e66 <max30102_init+0x4a>
		  HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, PART_ID, I2C_MEMADD_SIZE_8BIT, &part_id, 1, 10);
 8002e30:	4887      	ldr	r0, [pc, #540]	; (8003050 <max30102_init+0x234>)
 8002e32:	230a      	movs	r3, #10
 8002e34:	9302      	str	r3, [sp, #8]
 8002e36:	2301      	movs	r3, #1
 8002e38:	9301      	str	r3, [sp, #4]
 8002e3a:	1dbb      	adds	r3, r7, #6
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	2301      	movs	r3, #1
 8002e40:	22ff      	movs	r2, #255	; 0xff
 8002e42:	21af      	movs	r1, #175	; 0xaf
 8002e44:	f001 fdc8 	bl	80049d8 <HAL_I2C_Mem_Read>
		  if(onflag == 0 && part_id != 0x15){
 8002e48:	1dfb      	adds	r3, r7, #7
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <max30102_init+0x44>
 8002e50:	1dbb      	adds	r3, r7, #6
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b15      	cmp	r3, #21
 8002e56:	d003      	beq.n	8002e60 <max30102_init+0x44>
			   printf("MAX30102 is not available\r\n");
 8002e58:	4b7e      	ldr	r3, [pc, #504]	; (8003054 <max30102_init+0x238>)
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f003 fc2a 	bl	80066b4 <puts>
		  }
		  onflag = 1;
 8002e60:	1dfb      	adds	r3, r7, #7
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
	  while(part_id != 0x15){
 8002e66:	1dbb      	adds	r3, r7, #6
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b15      	cmp	r3, #21
 8002e6c:	d1e0      	bne.n	8002e30 <max30102_init+0x14>
	  }

     printf("MAX30102 is connected\r\n");
 8002e6e:	4b7a      	ldr	r3, [pc, #488]	; (8003058 <max30102_init+0x23c>)
 8002e70:	0018      	movs	r0, r3
 8002e72:	f003 fc1f 	bl	80066b4 <puts>

	 uint8_t mode = 0;
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	2200      	movs	r2, #0
 8002e7a:	701a      	strb	r2, [r3, #0]

	 //MAX check

	 HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, REG_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &mode, 1, 10);
 8002e7c:	4874      	ldr	r0, [pc, #464]	; (8003050 <max30102_init+0x234>)
 8002e7e:	230a      	movs	r3, #10
 8002e80:	9302      	str	r3, [sp, #8]
 8002e82:	2301      	movs	r3, #1
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	2209      	movs	r2, #9
 8002e8e:	21af      	movs	r1, #175	; 0xaf
 8002e90:	f001 fda2 	bl	80049d8 <HAL_I2C_Mem_Read>
	 if(mode == 0x00){
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d127      	bne.n	8002eec <max30102_init+0xd0>
		 printf("MAX30102 is OFF\r\n");
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	; (800305c <max30102_init+0x240>)
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f003 fc08 	bl	80066b4 <puts>
		 while (mode == 0x00){
 8002ea4:	e01e      	b.n	8002ee4 <max30102_init+0xc8>
			 printf("proceccing...\r\n");
 8002ea6:	4b6e      	ldr	r3, [pc, #440]	; (8003060 <max30102_init+0x244>)
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f003 fc03 	bl	80066b4 <puts>
			 mode = 0x03;
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	701a      	strb	r2, [r3, #0]
			 HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, REG_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &mode, 1, 10);
 8002eb4:	4866      	ldr	r0, [pc, #408]	; (8003050 <max30102_init+0x234>)
 8002eb6:	230a      	movs	r3, #10
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	2301      	movs	r3, #1
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	2209      	movs	r2, #9
 8002ec6:	21ae      	movs	r1, #174	; 0xae
 8002ec8:	f001 fc58 	bl	800477c <HAL_I2C_Mem_Write>
			 HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, REG_MODE_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &mode, 1, 10);
 8002ecc:	4860      	ldr	r0, [pc, #384]	; (8003050 <max30102_init+0x234>)
 8002ece:	230a      	movs	r3, #10
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2301      	movs	r3, #1
 8002edc:	2209      	movs	r2, #9
 8002ede:	21af      	movs	r1, #175	; 0xaf
 8002ee0:	f001 fd7a 	bl	80049d8 <HAL_I2C_Mem_Read>
		 while (mode == 0x00){
 8002ee4:	1d3b      	adds	r3, r7, #4
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0dc      	beq.n	8002ea6 <max30102_init+0x8a>
		 }
	 }

	 //LED CONF
	data = 0x47;
 8002eec:	1d7b      	adds	r3, r7, #5
 8002eee:	2247      	movs	r2, #71	; 0x47
 8002ef0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, REG_LED_PLUSE_AMPLITUDE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002ef2:	4857      	ldr	r0, [pc, #348]	; (8003050 <max30102_init+0x234>)
 8002ef4:	230a      	movs	r3, #10
 8002ef6:	9302      	str	r3, [sp, #8]
 8002ef8:	2301      	movs	r3, #1
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	1d7b      	adds	r3, r7, #5
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	2301      	movs	r3, #1
 8002f02:	220c      	movs	r2, #12
 8002f04:	21ae      	movs	r1, #174	; 0xae
 8002f06:	f001 fc39 	bl	800477c <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, REG_LED_PLUSE_AMPLITUDE_2, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002f0a:	4851      	ldr	r0, [pc, #324]	; (8003050 <max30102_init+0x234>)
 8002f0c:	230a      	movs	r3, #10
 8002f0e:	9302      	str	r3, [sp, #8]
 8002f10:	2301      	movs	r3, #1
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	1d7b      	adds	r3, r7, #5
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2301      	movs	r3, #1
 8002f1a:	220d      	movs	r2, #13
 8002f1c:	21ae      	movs	r1, #174	; 0xae
 8002f1e:	f001 fc2d 	bl	800477c <HAL_I2C_Mem_Write>
	//data = 0x7f;
	HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, REG_PROXIMITY_MODE_LED_PLUSE_AMPLITUDE, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002f22:	484b      	ldr	r0, [pc, #300]	; (8003050 <max30102_init+0x234>)
 8002f24:	230a      	movs	r3, #10
 8002f26:	9302      	str	r3, [sp, #8]
 8002f28:	2301      	movs	r3, #1
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	1d7b      	adds	r3, r7, #5
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2301      	movs	r3, #1
 8002f32:	2210      	movs	r2, #16
 8002f34:	21ae      	movs	r1, #174	; 0xae
 8002f36:	f001 fc21 	bl	800477c <HAL_I2C_Mem_Write>

	//Spo2 CONF
	data = 0x63;
 8002f3a:	1d7b      	adds	r3, r7, #5
 8002f3c:	2263      	movs	r2, #99	; 0x63
 8002f3e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, REG_SPO2_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002f40:	4843      	ldr	r0, [pc, #268]	; (8003050 <max30102_init+0x234>)
 8002f42:	230a      	movs	r3, #10
 8002f44:	9302      	str	r3, [sp, #8]
 8002f46:	2301      	movs	r3, #1
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	1d7b      	adds	r3, r7, #5
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2301      	movs	r3, #1
 8002f50:	220a      	movs	r2, #10
 8002f52:	21ae      	movs	r1, #174	; 0xae
 8002f54:	f001 fc12 	bl	800477c <HAL_I2C_Mem_Write>

    //FIFO conf
    data = 0x10;
 8002f58:	1d7b      	adds	r3, r7, #5
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, REG_FIFO_CONFIGURATION, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002f5e:	483c      	ldr	r0, [pc, #240]	; (8003050 <max30102_init+0x234>)
 8002f60:	230a      	movs	r3, #10
 8002f62:	9302      	str	r3, [sp, #8]
 8002f64:	2301      	movs	r3, #1
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	1d7b      	adds	r3, r7, #5
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	2208      	movs	r2, #8
 8002f70:	21ae      	movs	r1, #174	; 0xae
 8002f72:	f001 fc03 	bl	800477c <HAL_I2C_Mem_Write>

    //INTERRUPT
    data= 0xc0;
 8002f76:	1d7b      	adds	r3, r7, #5
 8002f78:	22c0      	movs	r2, #192	; 0xc0
 8002f7a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, REG_INTERRUPT_ENABLE_1, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002f7c:	4834      	ldr	r0, [pc, #208]	; (8003050 <max30102_init+0x234>)
 8002f7e:	230a      	movs	r3, #10
 8002f80:	9302      	str	r3, [sp, #8]
 8002f82:	2301      	movs	r3, #1
 8002f84:	9301      	str	r3, [sp, #4]
 8002f86:	1d7b      	adds	r3, r7, #5
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	21ae      	movs	r1, #174	; 0xae
 8002f90:	f001 fbf4 	bl	800477c <HAL_I2C_Mem_Write>
    //INTERRUPT2
    data= 0x00;
 8002f94:	1d7b      	adds	r3, r7, #5
 8002f96:	2200      	movs	r2, #0
 8002f98:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, REG_INTERRUPT_ENABLE_2, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002f9a:	482d      	ldr	r0, [pc, #180]	; (8003050 <max30102_init+0x234>)
 8002f9c:	230a      	movs	r3, #10
 8002f9e:	9302      	str	r3, [sp, #8]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	9301      	str	r3, [sp, #4]
 8002fa4:	1d7b      	adds	r3, r7, #5
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	2301      	movs	r3, #1
 8002faa:	2203      	movs	r2, #3
 8002fac:	21ae      	movs	r1, #174	; 0xae
 8002fae:	f001 fbe5 	bl	800477c <HAL_I2C_Mem_Write>

	// FIFO CLEAR
    data = 0;
 8002fb2:	1d7b      	adds	r3, r7, #5
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, REG_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002fb8:	4825      	ldr	r0, [pc, #148]	; (8003050 <max30102_init+0x234>)
 8002fba:	230a      	movs	r3, #10
 8002fbc:	9302      	str	r3, [sp, #8]
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	1d7b      	adds	r3, r7, #5
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	2204      	movs	r2, #4
 8002fca:	21ae      	movs	r1, #174	; 0xae
 8002fcc:	f001 fbd6 	bl	800477c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, REG_OVERFLOW_COUNTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002fd0:	481f      	ldr	r0, [pc, #124]	; (8003050 <max30102_init+0x234>)
 8002fd2:	230a      	movs	r3, #10
 8002fd4:	9302      	str	r3, [sp, #8]
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	9301      	str	r3, [sp, #4]
 8002fda:	1d7b      	adds	r3, r7, #5
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	2301      	movs	r3, #1
 8002fe0:	2205      	movs	r2, #5
 8002fe2:	21ae      	movs	r1, #174	; 0xae
 8002fe4:	f001 fbca 	bl	800477c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, MAX30102_ADDR_WRITE, REG_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &data, 1, 10);
 8002fe8:	4819      	ldr	r0, [pc, #100]	; (8003050 <max30102_init+0x234>)
 8002fea:	230a      	movs	r3, #10
 8002fec:	9302      	str	r3, [sp, #8]
 8002fee:	2301      	movs	r3, #1
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	1d7b      	adds	r3, r7, #5
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	2206      	movs	r2, #6
 8002ffa:	21ae      	movs	r1, #174	; 0xae
 8002ffc:	f001 fbbe 	bl	800477c <HAL_I2C_Mem_Write>

    // STATUS CLEAR
    uint8_t dataTemp = 0;
 8003000:	1cfb      	adds	r3, r7, #3
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, REG_INTERRUPT_STATUS_1, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 8003006:	4812      	ldr	r0, [pc, #72]	; (8003050 <max30102_init+0x234>)
 8003008:	230a      	movs	r3, #10
 800300a:	9302      	str	r3, [sp, #8]
 800300c:	2301      	movs	r3, #1
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	1cfb      	adds	r3, r7, #3
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2301      	movs	r3, #1
 8003016:	2200      	movs	r2, #0
 8003018:	21af      	movs	r1, #175	; 0xaf
 800301a:	f001 fcdd 	bl	80049d8 <HAL_I2C_Mem_Read>
    data = dataTemp;
 800301e:	1cfb      	adds	r3, r7, #3
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	1d7b      	adds	r3, r7, #5
 8003024:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, REG_INTERRUPT_STATUS_2, I2C_MEMADD_SIZE_8BIT, &dataTemp, 1, 10);
 8003026:	480a      	ldr	r0, [pc, #40]	; (8003050 <max30102_init+0x234>)
 8003028:	230a      	movs	r3, #10
 800302a:	9302      	str	r3, [sp, #8]
 800302c:	2301      	movs	r3, #1
 800302e:	9301      	str	r3, [sp, #4]
 8003030:	1cfb      	adds	r3, r7, #3
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2301      	movs	r3, #1
 8003036:	2201      	movs	r2, #1
 8003038:	21af      	movs	r1, #175	; 0xaf
 800303a:	f001 fccd 	bl	80049d8 <HAL_I2C_Mem_Read>

	printf("MAX30102 is ON\r\n");
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <max30102_init+0x248>)
 8003040:	0018      	movs	r0, r3
 8003042:	f003 fb37 	bl	80066b4 <puts>
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b002      	add	sp, #8
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	20000410 	.word	0x20000410
 8003054:	080077f8 	.word	0x080077f8
 8003058:	08007814 	.word	0x08007814
 800305c:	0800782c 	.word	0x0800782c
 8003060:	08007840 	.word	0x08007840
 8003064:	08007850 	.word	0x08007850

08003068 <max30102_getUnreadSampleCount>:

uint8_t max30102_getUnreadSampleCount()
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af04      	add	r7, sp, #16
	uint8_t wr = 0, rd = 0;
 800306e:	1dfb      	adds	r3, r7, #7
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	1dbb      	adds	r3, r7, #6
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, REG_FIFO_WRITE_POINTER, I2C_MEMADD_SIZE_8BIT, &wr, 1, 10);
 800307a:	4819      	ldr	r0, [pc, #100]	; (80030e0 <max30102_getUnreadSampleCount+0x78>)
 800307c:	230a      	movs	r3, #10
 800307e:	9302      	str	r3, [sp, #8]
 8003080:	2301      	movs	r3, #1
 8003082:	9301      	str	r3, [sp, #4]
 8003084:	1dfb      	adds	r3, r7, #7
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2301      	movs	r3, #1
 800308a:	2204      	movs	r2, #4
 800308c:	21af      	movs	r1, #175	; 0xaf
 800308e:	f001 fca3 	bl	80049d8 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, REG_FIFO_READ_POINTER, I2C_MEMADD_SIZE_8BIT, &rd, 1, 10);
 8003092:	4813      	ldr	r0, [pc, #76]	; (80030e0 <max30102_getUnreadSampleCount+0x78>)
 8003094:	230a      	movs	r3, #10
 8003096:	9302      	str	r3, [sp, #8]
 8003098:	2301      	movs	r3, #1
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	1dbb      	adds	r3, r7, #6
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2301      	movs	r3, #1
 80030a2:	2206      	movs	r2, #6
 80030a4:	21af      	movs	r1, #175	; 0xaf
 80030a6:	f001 fc97 	bl	80049d8 <HAL_I2C_Mem_Read>

    if ((wr - rd) < 0)
 80030aa:	1dfb      	adds	r3, r7, #7
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	001a      	movs	r2, r3
 80030b0:	1dbb      	adds	r3, r7, #6
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	d508      	bpl.n	80030ca <max30102_getUnreadSampleCount+0x62>
        return wr - rd + 32;
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	1dbb      	adds	r3, r7, #6
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	3320      	adds	r3, #32
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	e005      	b.n	80030d6 <max30102_getUnreadSampleCount+0x6e>
    else
        return wr - rd;
 80030ca:	1dfb      	adds	r3, r7, #7
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	1dbb      	adds	r3, r7, #6
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	b2db      	uxtb	r3, r3
}
 80030d6:	0018      	movs	r0, r3
 80030d8:	46bd      	mov	sp, r7
 80030da:	b002      	add	sp, #8
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	46c0      	nop			; (mov r8, r8)
 80030e0:	20000410 	.word	0x20000410

080030e4 <max30102_getFIFO>:


uint8_t flagput = 0;
uint8_t flagproc = 0;

void max30102_getFIFO(SAMPLE *data, uint8_t sampleCount){
 80030e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030e6:	b091      	sub	sp, #68	; 0x44
 80030e8:	af04      	add	r7, sp, #16
 80030ea:	61f8      	str	r0, [r7, #28]
 80030ec:	0008      	movs	r0, r1
 80030ee:	231b      	movs	r3, #27
 80030f0:	18f9      	adds	r1, r7, r3
 80030f2:	7008      	strb	r0, [r1, #0]
 80030f4:	4669      	mov	r1, sp
 80030f6:	000e      	movs	r6, r1

    uint8_t dataTemp[sampleCount * 6];
 80030f8:	231b      	movs	r3, #27
 80030fa:	18f9      	adds	r1, r7, r3
 80030fc:	7808      	ldrb	r0, [r1, #0]
 80030fe:	0001      	movs	r1, r0
 8003100:	0049      	lsls	r1, r1, #1
 8003102:	1809      	adds	r1, r1, r0
 8003104:	0049      	lsls	r1, r1, #1
 8003106:	1e48      	subs	r0, r1, #1
 8003108:	62b8      	str	r0, [r7, #40]	; 0x28
 800310a:	0008      	movs	r0, r1
 800310c:	6138      	str	r0, [r7, #16]
 800310e:	2000      	movs	r0, #0
 8003110:	6178      	str	r0, [r7, #20]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	0010      	movs	r0, r2
 8003118:	0f40      	lsrs	r0, r0, #29
 800311a:	613a      	str	r2, [r7, #16]
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	00dd      	lsls	r5, r3, #3
 8003120:	4305      	orrs	r5, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	00dc      	lsls	r4, r3, #3
 8003126:	0008      	movs	r0, r1
 8003128:	6038      	str	r0, [r7, #0]
 800312a:	2000      	movs	r0, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	683c      	ldr	r4, [r7, #0]
 8003130:	687d      	ldr	r5, [r7, #4]
 8003132:	0023      	movs	r3, r4
 8003134:	0f58      	lsrs	r0, r3, #29
 8003136:	002b      	movs	r3, r5
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4303      	orrs	r3, r0
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	0023      	movs	r3, r4
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	000b      	movs	r3, r1
 800314a:	3307      	adds	r3, #7
 800314c:	08db      	lsrs	r3, r3, #3
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	466a      	mov	r2, sp
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	469d      	mov	sp, r3
 8003156:	ab04      	add	r3, sp, #16
 8003158:	3300      	adds	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_I2C_Mem_Read(&hi2c1, MAX30102_ADDR_READ, REG_FIFO_DATA_REGISTER, I2C_MEMADD_SIZE_8BIT, dataTemp, 6 * sampleCount, 25);
 800315c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315e:	231b      	movs	r3, #27
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b29b      	uxth	r3, r3
 8003166:	1c19      	adds	r1, r3, #0
 8003168:	1c0b      	adds	r3, r1, #0
 800316a:	18db      	adds	r3, r3, r3
 800316c:	185b      	adds	r3, r3, r1
 800316e:	18db      	adds	r3, r3, r3
 8003170:	b29b      	uxth	r3, r3
 8003172:	485c      	ldr	r0, [pc, #368]	; (80032e4 <max30102_getFIFO+0x200>)
 8003174:	2119      	movs	r1, #25
 8003176:	9102      	str	r1, [sp, #8]
 8003178:	9301      	str	r3, [sp, #4]
 800317a:	9200      	str	r2, [sp, #0]
 800317c:	2301      	movs	r3, #1
 800317e:	2207      	movs	r2, #7
 8003180:	21af      	movs	r1, #175	; 0xaf
 8003182:	f001 fc29 	bl	80049d8 <HAL_I2C_Mem_Read>

    if(dataTemp[0] != 0){
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d014      	beq.n	80031b8 <max30102_getFIFO+0xd4>
		flagput = 0;
 800318e:	4b56      	ldr	r3, [pc, #344]	; (80032e8 <max30102_getFIFO+0x204>)
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8003194:	4b55      	ldr	r3, [pc, #340]	; (80032ec <max30102_getFIFO+0x208>)
 8003196:	2201      	movs	r2, #1
 8003198:	2110      	movs	r1, #16
 800319a:	0018      	movs	r0, r3
 800319c:	f001 fa3b 	bl	8004616 <HAL_GPIO_WritePin>
		if(flagproc == 0){
 80031a0:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <max30102_getFIFO+0x20c>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d11b      	bne.n	80031e0 <max30102_getFIFO+0xfc>
			printf("Processing...\r\n");
 80031a8:	4b52      	ldr	r3, [pc, #328]	; (80032f4 <max30102_getFIFO+0x210>)
 80031aa:	0018      	movs	r0, r3
 80031ac:	f003 fa82 	bl	80066b4 <puts>
			flagproc = 1;
 80031b0:	4b4f      	ldr	r3, [pc, #316]	; (80032f0 <max30102_getFIFO+0x20c>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e013      	b.n	80031e0 <max30102_getFIFO+0xfc>
		}
    }else{
    	flagproc = 0;
 80031b8:	4b4d      	ldr	r3, [pc, #308]	; (80032f0 <max30102_getFIFO+0x20c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80031be:	4b4b      	ldr	r3, [pc, #300]	; (80032ec <max30102_getFIFO+0x208>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	2110      	movs	r1, #16
 80031c4:	0018      	movs	r0, r3
 80031c6:	f001 fa26 	bl	8004616 <HAL_GPIO_WritePin>
		if(flagput == 0){
 80031ca:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <max30102_getFIFO+0x204>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <max30102_getFIFO+0xfc>
			printf("Put your finger please\r\n");
 80031d2:	4b49      	ldr	r3, [pc, #292]	; (80032f8 <max30102_getFIFO+0x214>)
 80031d4:	0018      	movs	r0, r3
 80031d6:	f003 fa6d 	bl	80066b4 <puts>
			flagput = 1;
 80031da:	4b43      	ldr	r3, [pc, #268]	; (80032e8 <max30102_getFIFO+0x204>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
		}
    }

    uint8_t i;
    for (i = 0; i < sampleCount; i++)
 80031e0:	2317      	movs	r3, #23
 80031e2:	2218      	movs	r2, #24
 80031e4:	4694      	mov	ip, r2
 80031e6:	44bc      	add	ip, r7
 80031e8:	4463      	add	r3, ip
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e069      	b.n	80032c4 <max30102_getFIFO+0x1e0>
    {
        data[i].red = (((uint32_t)dataTemp[i * 6]) << 16 | ((uint32_t)dataTemp[i * 6 + 1]) << 8 | dataTemp[i * 6 + 2]) & 0x3ffff;
 80031f0:	2017      	movs	r0, #23
 80031f2:	2318      	movs	r3, #24
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	181b      	adds	r3, r3, r0
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	0013      	movs	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	001a      	movs	r2, r3
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	5c9b      	ldrb	r3, [r3, r2]
 8003208:	0419      	lsls	r1, r3, #16
 800320a:	2318      	movs	r3, #24
 800320c:	18fb      	adds	r3, r7, r3
 800320e:	181b      	adds	r3, r3, r0
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	0013      	movs	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	189b      	adds	r3, r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	3301      	adds	r3, #1
 800321c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321e:	5cd3      	ldrb	r3, [r2, r3]
 8003220:	021b      	lsls	r3, r3, #8
 8003222:	4319      	orrs	r1, r3
 8003224:	2318      	movs	r3, #24
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	181b      	adds	r3, r3, r0
 800322a:	781a      	ldrb	r2, [r3, #0]
 800322c:	0013      	movs	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	189b      	adds	r3, r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	3302      	adds	r3, #2
 8003236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003238:	5cd3      	ldrb	r3, [r2, r3]
 800323a:	000a      	movs	r2, r1
 800323c:	431a      	orrs	r2, r3
 800323e:	2318      	movs	r3, #24
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	181b      	adds	r3, r3, r0
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	69f9      	ldr	r1, [r7, #28]
 800324a:	18cb      	adds	r3, r1, r3
 800324c:	0392      	lsls	r2, r2, #14
 800324e:	0b92      	lsrs	r2, r2, #14
 8003250:	601a      	str	r2, [r3, #0]
        data[i].iRed = (((uint32_t)dataTemp[i * 6 + 3]) << 16 | ((uint32_t)dataTemp[i * 6 + 4]) << 8 | dataTemp[i * 6 + 5]) & 0x3ffff;
 8003252:	2318      	movs	r3, #24
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	181b      	adds	r3, r3, r0
 8003258:	781a      	ldrb	r2, [r3, #0]
 800325a:	0013      	movs	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	189b      	adds	r3, r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	3303      	adds	r3, #3
 8003264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003266:	5cd3      	ldrb	r3, [r2, r3]
 8003268:	0419      	lsls	r1, r3, #16
 800326a:	2318      	movs	r3, #24
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	181b      	adds	r3, r3, r0
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	0013      	movs	r3, r2
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	189b      	adds	r3, r3, r2
 8003278:	005b      	lsls	r3, r3, #1
 800327a:	3304      	adds	r3, #4
 800327c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327e:	5cd3      	ldrb	r3, [r2, r3]
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	4319      	orrs	r1, r3
 8003284:	2318      	movs	r3, #24
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	181b      	adds	r3, r3, r0
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	0013      	movs	r3, r2
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	189b      	adds	r3, r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	3305      	adds	r3, #5
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	5cd3      	ldrb	r3, [r2, r3]
 800329a:	000a      	movs	r2, r1
 800329c:	431a      	orrs	r2, r3
 800329e:	2318      	movs	r3, #24
 80032a0:	18fb      	adds	r3, r7, r3
 80032a2:	181b      	adds	r3, r3, r0
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	69f9      	ldr	r1, [r7, #28]
 80032aa:	18cb      	adds	r3, r1, r3
 80032ac:	0392      	lsls	r2, r2, #14
 80032ae:	0b92      	lsrs	r2, r2, #14
 80032b0:	605a      	str	r2, [r3, #4]
    for (i = 0; i < sampleCount; i++)
 80032b2:	2318      	movs	r3, #24
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	181b      	adds	r3, r3, r0
 80032b8:	781a      	ldrb	r2, [r3, #0]
 80032ba:	2318      	movs	r3, #24
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	181b      	adds	r3, r3, r0
 80032c0:	3201      	adds	r2, #1
 80032c2:	701a      	strb	r2, [r3, #0]
 80032c4:	2317      	movs	r3, #23
 80032c6:	2218      	movs	r2, #24
 80032c8:	18ba      	adds	r2, r7, r2
 80032ca:	18d2      	adds	r2, r2, r3
 80032cc:	231b      	movs	r3, #27
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	7812      	ldrb	r2, [r2, #0]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d38b      	bcc.n	80031f0 <max30102_getFIFO+0x10c>
 80032d8:	46b5      	mov	sp, r6
    }

}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	46bd      	mov	sp, r7
 80032de:	b00d      	add	sp, #52	; 0x34
 80032e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	20000410 	.word	0x20000410
 80032e8:	200000a0 	.word	0x200000a0
 80032ec:	48000400 	.word	0x48000400
 80032f0:	200000a1 	.word	0x200000a1
 80032f4:	08007860 	.word	0x08007860
 80032f8:	08007870 	.word	0x08007870

080032fc <filter>:
uint32_t iRedDC_prev = 0;

#define FILTER_LEVEL 8

void filter(SAMPLE *s)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
    uint8_t i;
    uint32_t red = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
    uint32_t ired = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 800330c:	2317      	movs	r3, #23
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e017      	b.n	8003346 <filter+0x4a>
    {
        red += sampleBuff[i].red;
 8003316:	2117      	movs	r1, #23
 8003318:	187b      	adds	r3, r7, r1
 800331a:	781a      	ldrb	r2, [r3, #0]
 800331c:	4b15      	ldr	r3, [pc, #84]	; (8003374 <filter+0x78>)
 800331e:	00d2      	lsls	r2, r2, #3
 8003320:	58d3      	ldr	r3, [r2, r3]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	18d3      	adds	r3, r2, r3
 8003326:	613b      	str	r3, [r7, #16]
        ired += sampleBuff[i].iRed;
 8003328:	187b      	adds	r3, r7, r1
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	4a11      	ldr	r2, [pc, #68]	; (8003374 <filter+0x78>)
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	18d3      	adds	r3, r2, r3
 8003332:	3304      	adds	r3, #4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	18d3      	adds	r3, r2, r3
 800333a:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < FILTER_LEVEL - 1; i++)
 800333c:	187b      	adds	r3, r7, r1
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	187b      	adds	r3, r7, r1
 8003342:	3201      	adds	r2, #1
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	2317      	movs	r3, #23
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d9e2      	bls.n	8003316 <filter+0x1a>
    }
    s->red = (red + s->red) / FILTER_LEVEL;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	18d3      	adds	r3, r2, r3
 8003358:	08da      	lsrs	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]
    s->iRed = (ired + s->iRed) / FILTER_LEVEL;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	18d3      	adds	r3, r2, r3
 8003366:	08da      	lsrs	r2, r3, #3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	605a      	str	r2, [r3, #4]
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b006      	add	sp, #24
 8003372:	bd80      	pop	{r7, pc}
 8003374:	2000045c 	.word	0x2000045c

08003378 <calcAcDcFIFO>:
uint32_t	lenghtWave[2] = {0,0};

#define MIDDLEBUUF BUFF_SIZE
uint32_t middle_ir[1 + 1 + 1 + MIDDLEBUUF];

void calcAcDcFIFO(SAMPLE s, uint16_t *rac, uint32_t *rdc, uint16_t *iac, uint32_t *idc) {
 8003378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800337a:	46c6      	mov	lr, r8
 800337c:	b500      	push	{lr}
 800337e:	b094      	sub	sp, #80	; 0x50
 8003380:	af00      	add	r7, sp, #0
 8003382:	2408      	movs	r4, #8
 8003384:	2508      	movs	r5, #8
 8003386:	46ac      	mov	ip, r5
 8003388:	2508      	movs	r5, #8
 800338a:	46a8      	mov	r8, r5
 800338c:	44b8      	add	r8, r7
 800338e:	44c4      	add	ip, r8
 8003390:	4464      	add	r4, ip
 8003392:	6020      	str	r0, [r4, #0]
 8003394:	6061      	str	r1, [r4, #4]
 8003396:	617a      	str	r2, [r7, #20]
 8003398:	613b      	str	r3, [r7, #16]
	// Уровень с ик диода выше чем с красного
    uint8_t i;
	for (i = BUFF_SIZE - 1; i > 0; i--) {
 800339a:	233f      	movs	r3, #63	; 0x3f
 800339c:	2208      	movs	r2, #8
 800339e:	4694      	mov	ip, r2
 80033a0:	2208      	movs	r2, #8
 80033a2:	4690      	mov	r8, r2
 80033a4:	44b8      	add	r8, r7
 80033a6:	44c4      	add	ip, r8
 80033a8:	4463      	add	r3, ip
 80033aa:	22c7      	movs	r2, #199	; 0xc7
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e046      	b.n	800343e <calcAcDcFIFO+0xc6>
		sampleBuff[i].red = sampleBuff[i - 1].red;
 80033b0:	243f      	movs	r4, #63	; 0x3f
 80033b2:	2008      	movs	r0, #8
 80033b4:	2308      	movs	r3, #8
 80033b6:	18fb      	adds	r3, r7, r3
 80033b8:	181b      	adds	r3, r3, r0
 80033ba:	191b      	adds	r3, r3, r4
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	1e59      	subs	r1, r3, #1
 80033c0:	2308      	movs	r3, #8
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	181b      	adds	r3, r3, r0
 80033c6:	191b      	adds	r3, r3, r4
 80033c8:	781a      	ldrb	r2, [r3, #0]
 80033ca:	4bcf      	ldr	r3, [pc, #828]	; (8003708 <calcAcDcFIFO+0x390>)
 80033cc:	00c9      	lsls	r1, r1, #3
 80033ce:	58c9      	ldr	r1, [r1, r3]
 80033d0:	4bcd      	ldr	r3, [pc, #820]	; (8003708 <calcAcDcFIFO+0x390>)
 80033d2:	00d2      	lsls	r2, r2, #3
 80033d4:	50d1      	str	r1, [r2, r3]
		sampleBuff[i].iRed = sampleBuff[i - 1].iRed;
 80033d6:	2308      	movs	r3, #8
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	181b      	adds	r3, r3, r0
 80033dc:	191b      	adds	r3, r3, r4
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	0005      	movs	r5, r0
 80033e4:	2208      	movs	r2, #8
 80033e6:	18ba      	adds	r2, r7, r2
 80033e8:	1812      	adds	r2, r2, r0
 80033ea:	1912      	adds	r2, r2, r4
 80033ec:	7810      	ldrb	r0, [r2, #0]
 80033ee:	4ac6      	ldr	r2, [pc, #792]	; (8003708 <calcAcDcFIFO+0x390>)
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	18d3      	adds	r3, r2, r3
 80033f4:	3304      	adds	r3, #4
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	49c3      	ldr	r1, [pc, #780]	; (8003708 <calcAcDcFIFO+0x390>)
 80033fa:	00c3      	lsls	r3, r0, #3
 80033fc:	18cb      	adds	r3, r1, r3
 80033fe:	3304      	adds	r3, #4
 8003400:	601a      	str	r2, [r3, #0]
		middle_ir[3 + i] = middle_ir[3 + i - 1];
 8003402:	0028      	movs	r0, r5
 8003404:	2308      	movs	r3, #8
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	181b      	adds	r3, r3, r0
 800340a:	191b      	adds	r3, r3, r4
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	1c99      	adds	r1, r3, #2
 8003410:	2308      	movs	r3, #8
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	181b      	adds	r3, r3, r0
 8003416:	191b      	adds	r3, r3, r4
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	1cda      	adds	r2, r3, #3
 800341c:	4bbb      	ldr	r3, [pc, #748]	; (800370c <calcAcDcFIFO+0x394>)
 800341e:	0089      	lsls	r1, r1, #2
 8003420:	58c9      	ldr	r1, [r1, r3]
 8003422:	4bba      	ldr	r3, [pc, #744]	; (800370c <calcAcDcFIFO+0x394>)
 8003424:	0092      	lsls	r2, r2, #2
 8003426:	50d1      	str	r1, [r2, r3]
	for (i = BUFF_SIZE - 1; i > 0; i--) {
 8003428:	2308      	movs	r3, #8
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	181b      	adds	r3, r3, r0
 800342e:	191b      	adds	r3, r3, r4
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	2308      	movs	r3, #8
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	181b      	adds	r3, r3, r0
 8003438:	191b      	adds	r3, r3, r4
 800343a:	3a01      	subs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	233f      	movs	r3, #63	; 0x3f
 8003440:	2208      	movs	r2, #8
 8003442:	4694      	mov	ip, r2
 8003444:	2208      	movs	r2, #8
 8003446:	4690      	mov	r8, r2
 8003448:	44b8      	add	r8, r7
 800344a:	44c4      	add	ip, r8
 800344c:	4463      	add	r3, ip
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d1ad      	bne.n	80033b0 <calcAcDcFIFO+0x38>
	}
	if(s.red > s.iRed) {	// Уровень с ик диода выше чем с красного
 8003454:	2108      	movs	r1, #8
 8003456:	2008      	movs	r0, #8
 8003458:	2308      	movs	r3, #8
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	181b      	adds	r3, r3, r0
 800345e:	185b      	adds	r3, r3, r1
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2308      	movs	r3, #8
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	181b      	adds	r3, r3, r0
 8003468:	185b      	adds	r3, r3, r1
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	d915      	bls.n	800349c <calcAcDcFIFO+0x124>
		sampleBuff[0].red = s.iRed;
 8003470:	2308      	movs	r3, #8
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	181b      	adds	r3, r3, r0
 8003476:	185b      	adds	r3, r3, r1
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	4ba3      	ldr	r3, [pc, #652]	; (8003708 <calcAcDcFIFO+0x390>)
 800347c:	601a      	str	r2, [r3, #0]
		sampleBuff[0].iRed = s.red;
 800347e:	2308      	movs	r3, #8
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	181b      	adds	r3, r3, r0
 8003484:	185b      	adds	r3, r3, r1
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b9f      	ldr	r3, [pc, #636]	; (8003708 <calcAcDcFIFO+0x390>)
 800348a:	605a      	str	r2, [r3, #4]
		middle_ir[3] = s.red;
 800348c:	2308      	movs	r3, #8
 800348e:	18fb      	adds	r3, r7, r3
 8003490:	181b      	adds	r3, r3, r0
 8003492:	185b      	adds	r3, r3, r1
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b9d      	ldr	r3, [pc, #628]	; (800370c <calcAcDcFIFO+0x394>)
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	e016      	b.n	80034ca <calcAcDcFIFO+0x152>
	} else {
		sampleBuff[0].red = s.red;
 800349c:	2108      	movs	r1, #8
 800349e:	2008      	movs	r0, #8
 80034a0:	2308      	movs	r3, #8
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	181b      	adds	r3, r3, r0
 80034a6:	185b      	adds	r3, r3, r1
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4b97      	ldr	r3, [pc, #604]	; (8003708 <calcAcDcFIFO+0x390>)
 80034ac:	601a      	str	r2, [r3, #0]
		sampleBuff[0].iRed = s.iRed;
 80034ae:	2308      	movs	r3, #8
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	181b      	adds	r3, r3, r0
 80034b4:	185b      	adds	r3, r3, r1
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	4b93      	ldr	r3, [pc, #588]	; (8003708 <calcAcDcFIFO+0x390>)
 80034ba:	605a      	str	r2, [r3, #4]
		middle_ir[3] = s.iRed;
 80034bc:	2308      	movs	r3, #8
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	181b      	adds	r3, r3, r0
 80034c2:	185b      	adds	r3, r3, r1
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	4b91      	ldr	r3, [pc, #580]	; (800370c <calcAcDcFIFO+0x394>)
 80034c8:	60da      	str	r2, [r3, #12]
	}

	{	// фильтрация
		uint32_t acc32 = (middle_ir[3] + middle_ir[4] + middle_ir[5]) / 3;// + middle_ir[6] + middle_ir[7]) / 5;
 80034ca:	4b90      	ldr	r3, [pc, #576]	; (800370c <calcAcDcFIFO+0x394>)
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	4b8f      	ldr	r3, [pc, #572]	; (800370c <calcAcDcFIFO+0x394>)
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	18d2      	adds	r2, r2, r3
 80034d4:	4b8d      	ldr	r3, [pc, #564]	; (800370c <calcAcDcFIFO+0x394>)
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	18d3      	adds	r3, r2, r3
 80034da:	2103      	movs	r1, #3
 80034dc:	0018      	movs	r0, r3
 80034de:	f7fc fe1d 	bl	800011c <__udivsi3>
 80034e2:	0003      	movs	r3, r0
 80034e4:	623b      	str	r3, [r7, #32]
		middle_ir[3] = acc32;
 80034e6:	4b89      	ldr	r3, [pc, #548]	; (800370c <calcAcDcFIFO+0x394>)
 80034e8:	6a3a      	ldr	r2, [r7, #32]
 80034ea:	60da      	str	r2, [r3, #12]

		// среднеарифметическое значение в middle_ir[0]
		uint64_t acc64=0;
 80034ec:	2200      	movs	r2, #0
 80034ee:	2300      	movs	r3, #0
 80034f0:	643a      	str	r2, [r7, #64]	; 0x40
 80034f2:	647b      	str	r3, [r7, #68]	; 0x44
		for(uint32_t k=3; k<(MIDDLEBUUF+3); k++)
 80034f4:	2303      	movs	r3, #3
 80034f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f8:	e020      	b.n	800353c <calcAcDcFIFO+0x1c4>
			acc64 += ((uint64_t)middle_ir[k]*(uint64_t)middle_ir[k]);
 80034fa:	4b84      	ldr	r3, [pc, #528]	; (800370c <calcAcDcFIFO+0x394>)
 80034fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034fe:	0092      	lsls	r2, r2, #2
 8003500:	58d3      	ldr	r3, [r2, r3]
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	2300      	movs	r3, #0
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	4b80      	ldr	r3, [pc, #512]	; (800370c <calcAcDcFIFO+0x394>)
 800350a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800350c:	0092      	lsls	r2, r2, #2
 800350e:	58d3      	ldr	r3, [r2, r3]
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6838      	ldr	r0, [r7, #0]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	f7fc ff21 	bl	8000364 <__aeabi_lmul>
 8003522:	0002      	movs	r2, r0
 8003524:	000b      	movs	r3, r1
 8003526:	0010      	movs	r0, r2
 8003528:	0019      	movs	r1, r3
 800352a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800352c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800352e:	1812      	adds	r2, r2, r0
 8003530:	414b      	adcs	r3, r1
 8003532:	643a      	str	r2, [r7, #64]	; 0x40
 8003534:	647b      	str	r3, [r7, #68]	; 0x44
		for(uint32_t k=3; k<(MIDDLEBUUF+3); k++)
 8003536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003538:	3301      	adds	r3, #1
 800353a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800353c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800353e:	2bca      	cmp	r3, #202	; 0xca
 8003540:	d9db      	bls.n	80034fa <calcAcDcFIFO+0x182>
		acc64 = acc64/MIDDLEBUUF;
 8003542:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003544:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003546:	22c8      	movs	r2, #200	; 0xc8
 8003548:	2300      	movs	r3, #0
 800354a:	f7fc feeb 	bl	8000324 <__aeabi_uldivmod>
 800354e:	0002      	movs	r2, r0
 8003550:	000b      	movs	r3, r1
 8003552:	643a      	str	r2, [r7, #64]	; 0x40
 8003554:	647b      	str	r3, [r7, #68]	; 0x44
		middle_ir[0] = ( ((uint32_t)sqrt(acc64)));
 8003556:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003558:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800355a:	f7fc ff61 	bl	8000420 <__aeabi_ul2d>
 800355e:	0002      	movs	r2, r0
 8003560:	000b      	movs	r3, r1
 8003562:	0010      	movs	r0, r2
 8003564:	0019      	movs	r1, r3
 8003566:	f004 f833 	bl	80075d0 <sqrt>
 800356a:	0002      	movs	r2, r0
 800356c:	000b      	movs	r3, r1
 800356e:	0010      	movs	r0, r2
 8003570:	0019      	movs	r1, r3
 8003572:	f7fc ff37 	bl	80003e4 <__aeabi_d2uiz>
 8003576:	0002      	movs	r2, r0
 8003578:	4b64      	ldr	r3, [pc, #400]	; (800370c <calcAcDcFIFO+0x394>)
 800357a:	601a      	str	r2, [r3, #0]
	}

	if( (middle_ir[0] < middle_ir[3+BUFF_SIZE_half]) && (middle_ir[0] > middle_ir[3+BUFF_SIZE_half+2]) ) { // рост максимума
 800357c:	4b63      	ldr	r3, [pc, #396]	; (800370c <calcAcDcFIFO+0x394>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4962      	ldr	r1, [pc, #392]	; (800370c <calcAcDcFIFO+0x394>)
 8003582:	23ce      	movs	r3, #206	; 0xce
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	58cb      	ldr	r3, [r1, r3]
 8003588:	429a      	cmp	r2, r3
 800358a:	d300      	bcc.n	800358e <calcAcDcFIFO+0x216>
 800358c:	e0f4      	b.n	8003778 <calcAcDcFIFO+0x400>
 800358e:	4b5f      	ldr	r3, [pc, #380]	; (800370c <calcAcDcFIFO+0x394>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	495e      	ldr	r1, [pc, #376]	; (800370c <calcAcDcFIFO+0x394>)
 8003594:	23d2      	movs	r3, #210	; 0xd2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	58cb      	ldr	r3, [r1, r3]
 800359a:	429a      	cmp	r2, r3
 800359c:	d800      	bhi.n	80035a0 <calcAcDcFIFO+0x228>
 800359e:	e0eb      	b.n	8003778 <calcAcDcFIFO+0x400>
		maxFindSteep = 0;
 80035a0:	4b5b      	ldr	r3, [pc, #364]	; (8003710 <calcAcDcFIFO+0x398>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	601a      	str	r2, [r3, #0]
		minFindSteep = 0;
 80035a6:	4b5b      	ldr	r3, [pc, #364]	; (8003714 <calcAcDcFIFO+0x39c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

    	iMax = 0;
 80035ac:	4b5a      	ldr	r3, [pc, #360]	; (8003718 <calcAcDcFIFO+0x3a0>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
    	iMin = 0xffffffff;
 80035b2:	4b5a      	ldr	r3, [pc, #360]	; (800371c <calcAcDcFIFO+0x3a4>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	4252      	negs	r2, r2
 80035b8:	601a      	str	r2, [r3, #0]
    	rMax = 0;
 80035ba:	4b59      	ldr	r3, [pc, #356]	; (8003720 <calcAcDcFIFO+0x3a8>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
    	rMin = 0xffffffff;
 80035c0:	4b58      	ldr	r3, [pc, #352]	; (8003724 <calcAcDcFIFO+0x3ac>)
 80035c2:	2201      	movs	r2, #1
 80035c4:	4252      	negs	r2, r2
 80035c6:	601a      	str	r2, [r3, #0]

		uint32_t max_num = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	63bb      	str	r3, [r7, #56]	; 0x38
		for(uint32_t k=0; k<BUFF_SIZE_half; k++) {// поиск максимума
 80035cc:	2300      	movs	r3, #0
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
 80035d0:	e031      	b.n	8003636 <calcAcDcFIFO+0x2be>
			if( (middle_ir[0] > middle_ir[3+BUFF_SIZE_half-k]) && (middle_ir[0] < middle_ir[3+BUFF_SIZE_half+2-k]) )
 80035d2:	4b4e      	ldr	r3, [pc, #312]	; (800370c <calcAcDcFIFO+0x394>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	2167      	movs	r1, #103	; 0x67
 80035da:	1ac9      	subs	r1, r1, r3
 80035dc:	4b4b      	ldr	r3, [pc, #300]	; (800370c <calcAcDcFIFO+0x394>)
 80035de:	0089      	lsls	r1, r1, #2
 80035e0:	58cb      	ldr	r3, [r1, r3]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d909      	bls.n	80035fa <calcAcDcFIFO+0x282>
 80035e6:	4b49      	ldr	r3, [pc, #292]	; (800370c <calcAcDcFIFO+0x394>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ec:	2169      	movs	r1, #105	; 0x69
 80035ee:	1ac9      	subs	r1, r1, r3
 80035f0:	4b46      	ldr	r3, [pc, #280]	; (800370c <calcAcDcFIFO+0x394>)
 80035f2:	0089      	lsls	r1, r1, #2
 80035f4:	58cb      	ldr	r3, [r1, r3]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d321      	bcc.n	800363e <calcAcDcFIFO+0x2c6>
				break; // уход в минус относительно средней
			if (middle_ir[3+BUFF_SIZE_half-k] > iMax){
 80035fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fc:	2267      	movs	r2, #103	; 0x67
 80035fe:	1ad2      	subs	r2, r2, r3
 8003600:	4b42      	ldr	r3, [pc, #264]	; (800370c <calcAcDcFIFO+0x394>)
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	58d2      	ldr	r2, [r2, r3]
 8003606:	4b44      	ldr	r3, [pc, #272]	; (8003718 <calcAcDcFIFO+0x3a0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d90b      	bls.n	8003626 <calcAcDcFIFO+0x2ae>
				iMax = middle_ir[3+BUFF_SIZE_half-k];
 800360e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003610:	2267      	movs	r2, #103	; 0x67
 8003612:	1ad2      	subs	r2, r2, r3
 8003614:	4b3d      	ldr	r3, [pc, #244]	; (800370c <calcAcDcFIFO+0x394>)
 8003616:	0092      	lsls	r2, r2, #2
 8003618:	58d2      	ldr	r2, [r2, r3]
 800361a:	4b3f      	ldr	r3, [pc, #252]	; (8003718 <calcAcDcFIFO+0x3a0>)
 800361c:	601a      	str	r2, [r3, #0]
				max_num = BUFF_SIZE_half-k;
 800361e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003620:	2264      	movs	r2, #100	; 0x64
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
			}
			maxFindSteep++;
 8003626:	4b3a      	ldr	r3, [pc, #232]	; (8003710 <calcAcDcFIFO+0x398>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	4b38      	ldr	r3, [pc, #224]	; (8003710 <calcAcDcFIFO+0x398>)
 800362e:	601a      	str	r2, [r3, #0]
		for(uint32_t k=0; k<BUFF_SIZE_half; k++) {// поиск максимума
 8003630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003632:	3301      	adds	r3, #1
 8003634:	637b      	str	r3, [r7, #52]	; 0x34
 8003636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003638:	2b63      	cmp	r3, #99	; 0x63
 800363a:	d9ca      	bls.n	80035d2 <calcAcDcFIFO+0x25a>
 800363c:	e000      	b.n	8003640 <calcAcDcFIFO+0x2c8>
				break; // уход в минус относительно средней
 800363e:	46c0      	nop			; (mov r8, r8)
		}
		for(uint32_t k=(max_num-10); k < (max_num+10); k++) {// уточнение максимума
 8003640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003642:	3b0a      	subs	r3, #10
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
 8003646:	e01a      	b.n	800367e <calcAcDcFIFO+0x306>
			if (sampleBuff[k].iRed > iMax){
 8003648:	4a2f      	ldr	r2, [pc, #188]	; (8003708 <calcAcDcFIFO+0x390>)
 800364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	18d3      	adds	r3, r2, r3
 8003650:	3304      	adds	r3, #4
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b30      	ldr	r3, [pc, #192]	; (8003718 <calcAcDcFIFO+0x3a0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d90d      	bls.n	8003678 <calcAcDcFIFO+0x300>
				iMax = sampleBuff[k].iRed;
 800365c:	4a2a      	ldr	r2, [pc, #168]	; (8003708 <calcAcDcFIFO+0x390>)
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	18d3      	adds	r3, r2, r3
 8003664:	3304      	adds	r3, #4
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <calcAcDcFIFO+0x3a0>)
 800366a:	601a      	str	r2, [r3, #0]
				rMax = sampleBuff[k].red;
 800366c:	4b26      	ldr	r3, [pc, #152]	; (8003708 <calcAcDcFIFO+0x390>)
 800366e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003670:	00d2      	lsls	r2, r2, #3
 8003672:	58d2      	ldr	r2, [r2, r3]
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <calcAcDcFIFO+0x3a8>)
 8003676:	601a      	str	r2, [r3, #0]
		for(uint32_t k=(max_num-10); k < (max_num+10); k++) {// уточнение максимума
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	3301      	adds	r3, #1
 800367c:	633b      	str	r3, [r7, #48]	; 0x30
 800367e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003680:	330a      	adds	r3, #10
 8003682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003684:	429a      	cmp	r2, r3
 8003686:	d3df      	bcc.n	8003648 <calcAcDcFIFO+0x2d0>
			}
		}
		uint32_t min_num=0;
 8003688:	2300      	movs	r3, #0
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
		for(uint32_t k=0; k<(BUFF_SIZE_half-2); k++) {// поиск минимума
 800368c:	2300      	movs	r3, #0
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003690:	e030      	b.n	80036f4 <calcAcDcFIFO+0x37c>
			if( (middle_ir[0] > middle_ir[3+BUFF_SIZE_half+k]) && (middle_ir[0] < middle_ir[3+BUFF_SIZE_half+2+k]) )
 8003692:	4b1e      	ldr	r3, [pc, #120]	; (800370c <calcAcDcFIFO+0x394>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	3367      	adds	r3, #103	; 0x67
 800369a:	0019      	movs	r1, r3
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <calcAcDcFIFO+0x394>)
 800369e:	0089      	lsls	r1, r1, #2
 80036a0:	58cb      	ldr	r3, [r1, r3]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d909      	bls.n	80036ba <calcAcDcFIFO+0x342>
 80036a6:	4b19      	ldr	r3, [pc, #100]	; (800370c <calcAcDcFIFO+0x394>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	3369      	adds	r3, #105	; 0x69
 80036ae:	0019      	movs	r1, r3
 80036b0:	4b16      	ldr	r3, [pc, #88]	; (800370c <calcAcDcFIFO+0x394>)
 80036b2:	0089      	lsls	r1, r1, #2
 80036b4:	58cb      	ldr	r3, [r1, r3]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d320      	bcc.n	80036fc <calcAcDcFIFO+0x384>
				break;
			if (middle_ir[3+BUFF_SIZE_half+k] < iMin){
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	3367      	adds	r3, #103	; 0x67
 80036be:	001a      	movs	r2, r3
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <calcAcDcFIFO+0x394>)
 80036c2:	0092      	lsls	r2, r2, #2
 80036c4:	58d2      	ldr	r2, [r2, r3]
 80036c6:	4b15      	ldr	r3, [pc, #84]	; (800371c <calcAcDcFIFO+0x3a4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d20a      	bcs.n	80036e4 <calcAcDcFIFO+0x36c>
				iMin = middle_ir[3+BUFF_SIZE_half+k];
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	3367      	adds	r3, #103	; 0x67
 80036d2:	001a      	movs	r2, r3
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <calcAcDcFIFO+0x394>)
 80036d6:	0092      	lsls	r2, r2, #2
 80036d8:	58d2      	ldr	r2, [r2, r3]
 80036da:	4b10      	ldr	r3, [pc, #64]	; (800371c <calcAcDcFIFO+0x3a4>)
 80036dc:	601a      	str	r2, [r3, #0]
				min_num = BUFF_SIZE_half+k;
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	3364      	adds	r3, #100	; 0x64
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			minFindSteep++;
 80036e4:	4b0b      	ldr	r3, [pc, #44]	; (8003714 <calcAcDcFIFO+0x39c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <calcAcDcFIFO+0x39c>)
 80036ec:	601a      	str	r2, [r3, #0]
		for(uint32_t k=0; k<(BUFF_SIZE_half-2); k++) {// поиск минимума
 80036ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f0:	3301      	adds	r3, #1
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f6:	2b61      	cmp	r3, #97	; 0x61
 80036f8:	d9cb      	bls.n	8003692 <calcAcDcFIFO+0x31a>
 80036fa:	e000      	b.n	80036fe <calcAcDcFIFO+0x386>
				break;
 80036fc:	46c0      	nop			; (mov r8, r8)
		}
		for(uint32_t k=(min_num-10); k < (min_num+10); k++) {// уточнение минимума
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	3b0a      	subs	r3, #10
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
 8003704:	e02b      	b.n	800375e <calcAcDcFIFO+0x3e6>
 8003706:	46c0      	nop			; (mov r8, r8)
 8003708:	2000045c 	.word	0x2000045c
 800370c:	200000e4 	.word	0x200000e4
 8003710:	200000c4 	.word	0x200000c4
 8003714:	200000c8 	.word	0x200000c8
 8003718:	20000008 	.word	0x20000008
 800371c:	2000000c 	.word	0x2000000c
 8003720:	20000000 	.word	0x20000000
 8003724:	20000004 	.word	0x20000004
			if (sampleBuff[k].iRed < iMin){
 8003728:	4a28      	ldr	r2, [pc, #160]	; (80037cc <calcAcDcFIFO+0x454>)
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	18d3      	adds	r3, r2, r3
 8003730:	3304      	adds	r3, #4
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <calcAcDcFIFO+0x458>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d20d      	bcs.n	8003758 <calcAcDcFIFO+0x3e0>
				iMin = sampleBuff[k].iRed;
 800373c:	4a23      	ldr	r2, [pc, #140]	; (80037cc <calcAcDcFIFO+0x454>)
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	18d3      	adds	r3, r2, r3
 8003744:	3304      	adds	r3, #4
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b21      	ldr	r3, [pc, #132]	; (80037d0 <calcAcDcFIFO+0x458>)
 800374a:	601a      	str	r2, [r3, #0]
				rMin = sampleBuff[k].red;
 800374c:	4b1f      	ldr	r3, [pc, #124]	; (80037cc <calcAcDcFIFO+0x454>)
 800374e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003750:	00d2      	lsls	r2, r2, #3
 8003752:	58d2      	ldr	r2, [r2, r3]
 8003754:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <calcAcDcFIFO+0x45c>)
 8003756:	601a      	str	r2, [r3, #0]
		for(uint32_t k=(min_num-10); k < (min_num+10); k++) {// уточнение минимума
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	3301      	adds	r3, #1
 800375c:	627b      	str	r3, [r7, #36]	; 0x24
 800375e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003760:	330a      	adds	r3, #10
 8003762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003764:	429a      	cmp	r2, r3
 8003766:	d3df      	bcc.n	8003728 <calcAcDcFIFO+0x3b0>
			}
		}

		lenghtWave[0] = (maxFindSteep);
 8003768:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <calcAcDcFIFO+0x460>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <calcAcDcFIFO+0x464>)
 800376e:	601a      	str	r2, [r3, #0]
		lenghtWave[1] = (minFindSteep);
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <calcAcDcFIFO+0x468>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <calcAcDcFIFO+0x464>)
 8003776:	605a      	str	r2, [r3, #4]
	}

    *rac = rMax - rMin;
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <calcAcDcFIFO+0x46c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b29a      	uxth	r2, r3
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <calcAcDcFIFO+0x45c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	b29b      	uxth	r3, r3
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	b29a      	uxth	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	801a      	strh	r2, [r3, #0]
    *rdc = (rMax + rMin) / 2;
 800378c:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <calcAcDcFIFO+0x46c>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <calcAcDcFIFO+0x45c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	18d3      	adds	r3, r2, r3
 8003796:	085a      	lsrs	r2, r3, #1
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	601a      	str	r2, [r3, #0]
    *iac = iMax - iMin;
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <calcAcDcFIFO+0x470>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <calcAcDcFIFO+0x458>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037ae:	801a      	strh	r2, [r3, #0]
    *idc = (iMax + iMin) / 2;
 80037b0:	4b0d      	ldr	r3, [pc, #52]	; (80037e8 <calcAcDcFIFO+0x470>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <calcAcDcFIFO+0x458>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	18d3      	adds	r3, r2, r3
 80037ba:	085a      	lsrs	r2, r3, #1
 80037bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037be:	601a      	str	r2, [r3, #0]
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b014      	add	sp, #80	; 0x50
 80037c6:	bc80      	pop	{r7}
 80037c8:	46b8      	mov	r8, r7
 80037ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037cc:	2000045c 	.word	0x2000045c
 80037d0:	2000000c 	.word	0x2000000c
 80037d4:	20000004 	.word	0x20000004
 80037d8:	200000c4 	.word	0x200000c4
 80037dc:	200000d0 	.word	0x200000d0
 80037e0:	200000c8 	.word	0x200000c8
 80037e4:	20000000 	.word	0x20000000
 80037e8:	20000008 	.word	0x20000008

080037ec <max30102_cal>:

void max30102_cal()
{
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ee:	46c6      	mov	lr, r8
 80037f0:	b500      	push	{lr}
 80037f2:	b08c      	sub	sp, #48	; 0x30
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	466b      	mov	r3, sp
 80037f8:	4698      	mov	r8, r3
    uint8_t unreadSampleCount = max30102_getUnreadSampleCount();
 80037fa:	260e      	movs	r6, #14
 80037fc:	2318      	movs	r3, #24
 80037fe:	469c      	mov	ip, r3
 8003800:	44bc      	add	ip, r7
 8003802:	4466      	add	r6, ip
 8003804:	f7ff fc30 	bl	8003068 <max30102_getUnreadSampleCount>
 8003808:	0003      	movs	r3, r0
 800380a:	7033      	strb	r3, [r6, #0]

    SAMPLE sampleBuffTemp[unreadSampleCount];
 800380c:	260e      	movs	r6, #14
 800380e:	2318      	movs	r3, #24
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	199b      	adds	r3, r3, r6
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	001a      	movs	r2, r3
 8003818:	3a01      	subs	r2, #1
 800381a:	623a      	str	r2, [r7, #32]
 800381c:	001c      	movs	r4, r3
 800381e:	2200      	movs	r2, #0
 8003820:	0015      	movs	r5, r2
 8003822:	0020      	movs	r0, r4
 8003824:	0029      	movs	r1, r5
 8003826:	0002      	movs	r2, r0
 8003828:	0e92      	lsrs	r2, r2, #26
 800382a:	000c      	movs	r4, r1
 800382c:	01a4      	lsls	r4, r4, #6
 800382e:	617c      	str	r4, [r7, #20]
 8003830:	697c      	ldr	r4, [r7, #20]
 8003832:	4314      	orrs	r4, r2
 8003834:	617c      	str	r4, [r7, #20]
 8003836:	0002      	movs	r2, r0
 8003838:	0192      	lsls	r2, r2, #6
 800383a:	613a      	str	r2, [r7, #16]
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	2200      	movs	r2, #0
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	6838      	ldr	r0, [r7, #0]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	0002      	movs	r2, r0
 8003848:	0e92      	lsrs	r2, r2, #26
 800384a:	000c      	movs	r4, r1
 800384c:	01a4      	lsls	r4, r4, #6
 800384e:	60fc      	str	r4, [r7, #12]
 8003850:	68fc      	ldr	r4, [r7, #12]
 8003852:	4314      	orrs	r4, r2
 8003854:	60fc      	str	r4, [r7, #12]
 8003856:	0002      	movs	r2, r0
 8003858:	0192      	lsls	r2, r2, #6
 800385a:	60ba      	str	r2, [r7, #8]
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	3307      	adds	r3, #7
 8003860:	08db      	lsrs	r3, r3, #3
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	466a      	mov	r2, sp
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	469d      	mov	sp, r3
 800386a:	ab02      	add	r3, sp, #8
 800386c:	3303      	adds	r3, #3
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	61fb      	str	r3, [r7, #28]
    max30102_getFIFO(sampleBuffTemp, unreadSampleCount);
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	2318      	movs	r3, #24
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	199b      	adds	r3, r3, r6
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	0019      	movs	r1, r3
 8003880:	0010      	movs	r0, r2
 8003882:	f7ff fc2f 	bl	80030e4 <max30102_getFIFO>

    uint8_t i = 0;
 8003886:	210f      	movs	r1, #15
 8003888:	2318      	movs	r3, #24
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	185b      	adds	r3, r3, r1
 800388e:	2200      	movs	r2, #0
 8003890:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < unreadSampleCount; i++)
 8003892:	2318      	movs	r3, #24
 8003894:	18fb      	adds	r3, r7, r3
 8003896:	185b      	adds	r3, r3, r1
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
 800389c:	e0cd      	b.n	8003a3a <max30102_cal+0x24e>
    {
        if (sampleBuffTemp[i].iRed < 40000) //Нет пальцев, нет расчета, пропустить
 800389e:	230f      	movs	r3, #15
 80038a0:	2218      	movs	r2, #24
 80038a2:	4694      	mov	ip, r2
 80038a4:	44bc      	add	ip, r7
 80038a6:	4463      	add	r3, ip
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	18d3      	adds	r3, r2, r3
 80038b0:	3304      	adds	r3, #4
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6b      	ldr	r2, [pc, #428]	; (8003a64 <max30102_cal+0x278>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d806      	bhi.n	80038c8 <max30102_cal+0xdc>
        {
            spo2 = 0;
 80038ba:	4b6b      	ldr	r3, [pc, #428]	; (8003a68 <max30102_cal+0x27c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	701a      	strb	r2, [r3, #0]
            eachSampleDiff = 0;
 80038c0:	4b6a      	ldr	r3, [pc, #424]	; (8003a6c <max30102_cal+0x280>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	801a      	strh	r2, [r3, #0]
            continue;
 80038c6:	e0ae      	b.n	8003a26 <max30102_cal+0x23a>
        }

        calcAcDcFIFO(sampleBuffTemp[i], &redAC, &redDC, &iRedAC, &iRedDC);
 80038c8:	250f      	movs	r5, #15
 80038ca:	2318      	movs	r3, #24
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	195b      	adds	r3, r3, r5
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	4867      	ldr	r0, [pc, #412]	; (8003a70 <max30102_cal+0x284>)
 80038d4:	4a67      	ldr	r2, [pc, #412]	; (8003a74 <max30102_cal+0x288>)
 80038d6:	69fc      	ldr	r4, [r7, #28]
 80038d8:	00d9      	lsls	r1, r3, #3
 80038da:	4b67      	ldr	r3, [pc, #412]	; (8003a78 <max30102_cal+0x28c>)
 80038dc:	9301      	str	r3, [sp, #4]
 80038de:	4b67      	ldr	r3, [pc, #412]	; (8003a7c <max30102_cal+0x290>)
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	0003      	movs	r3, r0
 80038e4:	5908      	ldr	r0, [r1, r4]
 80038e6:	1861      	adds	r1, r4, r1
 80038e8:	6849      	ldr	r1, [r1, #4]
 80038ea:	f7ff fd45 	bl	8003378 <calcAcDcFIFO>
        filter(&sampleBuffTemp[i]);
 80038ee:	2318      	movs	r3, #24
 80038f0:	18fb      	adds	r3, r7, r3
 80038f2:	195b      	adds	r3, r3, r5
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	18d3      	adds	r3, r2, r3
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff fcfd 	bl	80032fc <filter>

			float R = (((float)(redAC)) / ((float)(redDC))) / (((float)(iRedAC)) / ((float)(iRedDC)));
 8003902:	4b5c      	ldr	r3, [pc, #368]	; (8003a74 <max30102_cal+0x288>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	0018      	movs	r0, r3
 8003908:	f7fd fb38 	bl	8000f7c <__aeabi_ui2f>
 800390c:	1c04      	adds	r4, r0, #0
 800390e:	4b58      	ldr	r3, [pc, #352]	; (8003a70 <max30102_cal+0x284>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	0018      	movs	r0, r3
 8003914:	f7fd fb32 	bl	8000f7c <__aeabi_ui2f>
 8003918:	1c03      	adds	r3, r0, #0
 800391a:	1c19      	adds	r1, r3, #0
 800391c:	1c20      	adds	r0, r4, #0
 800391e:	f7fc fe61 	bl	80005e4 <__aeabi_fdiv>
 8003922:	1c03      	adds	r3, r0, #0
 8003924:	1c1d      	adds	r5, r3, #0
 8003926:	4b55      	ldr	r3, [pc, #340]	; (8003a7c <max30102_cal+0x290>)
 8003928:	881b      	ldrh	r3, [r3, #0]
 800392a:	0018      	movs	r0, r3
 800392c:	f7fd fb26 	bl	8000f7c <__aeabi_ui2f>
 8003930:	1c04      	adds	r4, r0, #0
 8003932:	4b51      	ldr	r3, [pc, #324]	; (8003a78 <max30102_cal+0x28c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	0018      	movs	r0, r3
 8003938:	f7fd fb20 	bl	8000f7c <__aeabi_ui2f>
 800393c:	1c03      	adds	r3, r0, #0
 800393e:	1c19      	adds	r1, r3, #0
 8003940:	1c20      	adds	r0, r4, #0
 8003942:	f7fc fe4f 	bl	80005e4 <__aeabi_fdiv>
 8003946:	1c03      	adds	r3, r0, #0
 8003948:	1c19      	adds	r1, r3, #0
 800394a:	1c28      	adds	r0, r5, #0
 800394c:	f7fc fe4a 	bl	80005e4 <__aeabi_fdiv>
 8003950:	1c03      	adds	r3, r0, #0
 8003952:	61bb      	str	r3, [r7, #24]
			if (R >= 0.36 && R < 0.66)
 8003954:	69b8      	ldr	r0, [r7, #24]
 8003956:	f7ff f935 	bl	8002bc4 <__aeabi_f2d>
 800395a:	4a49      	ldr	r2, [pc, #292]	; (8003a80 <max30102_cal+0x294>)
 800395c:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <max30102_cal+0x298>)
 800395e:	f7fc fc9d 	bl	800029c <__aeabi_dcmpge>
 8003962:	1e03      	subs	r3, r0, #0
 8003964:	d01a      	beq.n	800399c <max30102_cal+0x1b0>
 8003966:	69b8      	ldr	r0, [r7, #24]
 8003968:	f7ff f92c 	bl	8002bc4 <__aeabi_f2d>
 800396c:	4a46      	ldr	r2, [pc, #280]	; (8003a88 <max30102_cal+0x29c>)
 800396e:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <max30102_cal+0x2a0>)
 8003970:	f7fc fc76 	bl	8000260 <__aeabi_dcmplt>
 8003974:	1e03      	subs	r3, r0, #0
 8003976:	d011      	beq.n	800399c <max30102_cal+0x1b0>
				spo2 = (uint8_t)(107 - 20 * R);
 8003978:	4945      	ldr	r1, [pc, #276]	; (8003a90 <max30102_cal+0x2a4>)
 800397a:	69b8      	ldr	r0, [r7, #24]
 800397c:	f7fc fffc 	bl	8000978 <__aeabi_fmul>
 8003980:	1c03      	adds	r3, r0, #0
 8003982:	1c19      	adds	r1, r3, #0
 8003984:	4843      	ldr	r0, [pc, #268]	; (8003a94 <max30102_cal+0x2a8>)
 8003986:	f7fd f911 	bl	8000bac <__aeabi_fsub>
 800398a:	1c03      	adds	r3, r0, #0
 800398c:	1c18      	adds	r0, r3, #0
 800398e:	f7fc fd11 	bl	80003b4 <__aeabi_f2uiz>
 8003992:	0003      	movs	r3, r0
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <max30102_cal+0x27c>)
 8003998:	701a      	strb	r2, [r3, #0]
 800399a:	e027      	b.n	80039ec <max30102_cal+0x200>
			else if (R >= 0.66 && R < 1)
 800399c:	69b8      	ldr	r0, [r7, #24]
 800399e:	f7ff f911 	bl	8002bc4 <__aeabi_f2d>
 80039a2:	4a39      	ldr	r2, [pc, #228]	; (8003a88 <max30102_cal+0x29c>)
 80039a4:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <max30102_cal+0x2a0>)
 80039a6:	f7fc fc79 	bl	800029c <__aeabi_dcmpge>
 80039aa:	1e03      	subs	r3, r0, #0
 80039ac:	d01e      	beq.n	80039ec <max30102_cal+0x200>
 80039ae:	21fe      	movs	r1, #254	; 0xfe
 80039b0:	0589      	lsls	r1, r1, #22
 80039b2:	69b8      	ldr	r0, [r7, #24]
 80039b4:	f7fc fc8e 	bl	80002d4 <__aeabi_fcmplt>
 80039b8:	1e03      	subs	r3, r0, #0
 80039ba:	d017      	beq.n	80039ec <max30102_cal+0x200>
				spo2 = (uint8_t)(129.64 - 54 * R);
 80039bc:	4936      	ldr	r1, [pc, #216]	; (8003a98 <max30102_cal+0x2ac>)
 80039be:	69b8      	ldr	r0, [r7, #24]
 80039c0:	f7fc ffda 	bl	8000978 <__aeabi_fmul>
 80039c4:	1c03      	adds	r3, r0, #0
 80039c6:	1c18      	adds	r0, r3, #0
 80039c8:	f7ff f8fc 	bl	8002bc4 <__aeabi_f2d>
 80039cc:	0002      	movs	r2, r0
 80039ce:	000b      	movs	r3, r1
 80039d0:	4832      	ldr	r0, [pc, #200]	; (8003a9c <max30102_cal+0x2b0>)
 80039d2:	4933      	ldr	r1, [pc, #204]	; (8003aa0 <max30102_cal+0x2b4>)
 80039d4:	f7fe fcea 	bl	80023ac <__aeabi_dsub>
 80039d8:	0002      	movs	r2, r0
 80039da:	000b      	movs	r3, r1
 80039dc:	0010      	movs	r0, r2
 80039de:	0019      	movs	r1, r3
 80039e0:	f7fc fd00 	bl	80003e4 <__aeabi_d2uiz>
 80039e4:	0003      	movs	r3, r0
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	4b1f      	ldr	r3, [pc, #124]	; (8003a68 <max30102_cal+0x27c>)
 80039ea:	701a      	strb	r2, [r3, #0]

			redAC_prev = redAC;
 80039ec:	4b21      	ldr	r3, [pc, #132]	; (8003a74 <max30102_cal+0x288>)
 80039ee:	881a      	ldrh	r2, [r3, #0]
 80039f0:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <max30102_cal+0x2b8>)
 80039f2:	801a      	strh	r2, [r3, #0]
			redDC_prev = redDC;
 80039f4:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <max30102_cal+0x284>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b2b      	ldr	r3, [pc, #172]	; (8003aa8 <max30102_cal+0x2bc>)
 80039fa:	601a      	str	r2, [r3, #0]
			iRedAC_prev = iRedAC;
 80039fc:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <max30102_cal+0x290>)
 80039fe:	881a      	ldrh	r2, [r3, #0]
 8003a00:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <max30102_cal+0x2c0>)
 8003a02:	801a      	strh	r2, [r3, #0]
			iRedDC_prev = iRedDC;
 8003a04:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <max30102_cal+0x28c>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b29      	ldr	r3, [pc, #164]	; (8003ab0 <max30102_cal+0x2c4>)
 8003a0a:	601a      	str	r2, [r3, #0]
        eachSampleDiff = middle_ir[3 + BUFF_SIZE_half] - iMin;
 8003a0c:	4a29      	ldr	r2, [pc, #164]	; (8003ab4 <max30102_cal+0x2c8>)
 8003a0e:	23ce      	movs	r3, #206	; 0xce
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	58d3      	ldr	r3, [r2, r3]
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	4b28      	ldr	r3, [pc, #160]	; (8003ab8 <max30102_cal+0x2cc>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	b21a      	sxth	r2, r3
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <max30102_cal+0x280>)
 8003a24:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < unreadSampleCount; i++)
 8003a26:	210f      	movs	r1, #15
 8003a28:	2318      	movs	r3, #24
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	185b      	adds	r3, r3, r1
 8003a2e:	781a      	ldrb	r2, [r3, #0]
 8003a30:	2318      	movs	r3, #24
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	185b      	adds	r3, r3, r1
 8003a36:	3201      	adds	r2, #1
 8003a38:	701a      	strb	r2, [r3, #0]
 8003a3a:	230f      	movs	r3, #15
 8003a3c:	2218      	movs	r2, #24
 8003a3e:	18ba      	adds	r2, r7, r2
 8003a40:	18d2      	adds	r2, r2, r3
 8003a42:	230e      	movs	r3, #14
 8003a44:	2118      	movs	r1, #24
 8003a46:	468c      	mov	ip, r1
 8003a48:	44bc      	add	ip, r7
 8003a4a:	4463      	add	r3, ip
 8003a4c:	7812      	ldrb	r2, [r2, #0]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d200      	bcs.n	8003a56 <max30102_cal+0x26a>
 8003a54:	e723      	b.n	800389e <max30102_cal+0xb2>
 8003a56:	46c5      	mov	sp, r8

    }

}
 8003a58:	46c0      	nop			; (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b00a      	add	sp, #40	; 0x28
 8003a5e:	bc80      	pop	{r7}
 8003a60:	46b8      	mov	r8, r7
 8003a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a64:	00009c3f 	.word	0x00009c3f
 8003a68:	200000a2 	.word	0x200000a2
 8003a6c:	200000cc 	.word	0x200000cc
 8003a70:	200000a8 	.word	0x200000a8
 8003a74:	200000a4 	.word	0x200000a4
 8003a78:	200000b0 	.word	0x200000b0
 8003a7c:	200000ac 	.word	0x200000ac
 8003a80:	70a3d70a 	.word	0x70a3d70a
 8003a84:	3fd70a3d 	.word	0x3fd70a3d
 8003a88:	51eb851f 	.word	0x51eb851f
 8003a8c:	3fe51eb8 	.word	0x3fe51eb8
 8003a90:	41a00000 	.word	0x41a00000
 8003a94:	42d60000 	.word	0x42d60000
 8003a98:	42580000 	.word	0x42580000
 8003a9c:	e147ae14 	.word	0xe147ae14
 8003aa0:	4060347a 	.word	0x4060347a
 8003aa4:	200000b4 	.word	0x200000b4
 8003aa8:	200000b8 	.word	0x200000b8
 8003aac:	200000bc 	.word	0x200000bc
 8003ab0:	200000c0 	.word	0x200000c0
 8003ab4:	200000e4 	.word	0x200000e4
 8003ab8:	2000000c 	.word	0x2000000c

08003abc <max30102_getSpO2>:


uint8_t max30102_getSpO2() { return spo2; }
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4b02      	ldr	r3, [pc, #8]	; (8003acc <max30102_getSpO2+0x10>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	0018      	movs	r0, r3
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	200000a2 	.word	0x200000a2

08003ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ad0:	b590      	push	{r4, r7, lr}
 8003ad2:	b099      	sub	sp, #100	; 0x64
 8003ad4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ad6:	242c      	movs	r4, #44	; 0x2c
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	0018      	movs	r0, r3
 8003adc:	2334      	movs	r3, #52	; 0x34
 8003ade:	001a      	movs	r2, r3
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	f002 fd53 	bl	800658c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ae6:	231c      	movs	r3, #28
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	0018      	movs	r0, r3
 8003aec:	2310      	movs	r3, #16
 8003aee:	001a      	movs	r2, r3
 8003af0:	2100      	movs	r1, #0
 8003af2:	f002 fd4b 	bl	800658c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003af6:	1d3b      	adds	r3, r7, #4
 8003af8:	0018      	movs	r0, r3
 8003afa:	2318      	movs	r3, #24
 8003afc:	001a      	movs	r2, r3
 8003afe:	2100      	movs	r1, #0
 8003b00:	f002 fd44 	bl	800658c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003b04:	0021      	movs	r1, r4
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	2202      	movs	r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b0c:	187b      	adds	r3, r7, r1
 8003b0e:	2201      	movs	r2, #1
 8003b10:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003b12:	187b      	adds	r3, r7, r1
 8003b14:	2210      	movs	r2, #16
 8003b16:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b1e:	187b      	adds	r3, r7, r1
 8003b20:	0018      	movs	r0, r3
 8003b22:	f001 fb63 	bl	80051ec <HAL_RCC_OscConfig>
 8003b26:	1e03      	subs	r3, r0, #0
 8003b28:	d001      	beq.n	8003b2e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003b2a:	f000 f8f3 	bl	8003d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b2e:	211c      	movs	r1, #28
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	2207      	movs	r2, #7
 8003b34:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003b36:	187b      	adds	r3, r7, r1
 8003b38:	2200      	movs	r2, #0
 8003b3a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b3c:	187b      	adds	r3, r7, r1
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b42:	187b      	adds	r3, r7, r1
 8003b44:	2200      	movs	r2, #0
 8003b46:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f001 fed3 	bl	80058f8 <HAL_RCC_ClockConfig>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d001      	beq.n	8003b5a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8003b56:	f000 f8dd 	bl	8003d14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	2221      	movs	r2, #33	; 0x21
 8003b5e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	2200      	movs	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003b66:	1d3b      	adds	r3, r7, #4
 8003b68:	2200      	movs	r2, #0
 8003b6a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b6c:	1d3b      	adds	r3, r7, #4
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f002 f83c 	bl	8005bec <HAL_RCCEx_PeriphCLKConfig>
 8003b74:	1e03      	subs	r3, r0, #0
 8003b76:	d001      	beq.n	8003b7c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003b78:	f000 f8cc 	bl	8003d14 <Error_Handler>
  }
}
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b019      	add	sp, #100	; 0x64
 8003b82:	bd90      	pop	{r4, r7, pc}

08003b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b8a:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <MX_I2C1_Init+0x78>)
 8003b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b90:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <MX_I2C1_Init+0x7c>)
 8003b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b94:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ba0:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003ba6:	4b14      	ldr	r3, [pc, #80]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	f000 fd45 	bl	8004650 <HAL_I2C_Init>
 8003bc6:	1e03      	subs	r3, r0, #0
 8003bc8:	d001      	beq.n	8003bce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003bca:	f000 f8a3 	bl	8003d14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003bce:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f001 fa72 	bl	80050bc <HAL_I2CEx_ConfigAnalogFilter>
 8003bd8:	1e03      	subs	r3, r0, #0
 8003bda:	d001      	beq.n	8003be0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003bdc:	f000 f89a 	bl	8003d14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <MX_I2C1_Init+0x74>)
 8003be2:	2100      	movs	r1, #0
 8003be4:	0018      	movs	r0, r3
 8003be6:	f001 fab5 	bl	8005154 <HAL_I2CEx_ConfigDigitalFilter>
 8003bea:	1e03      	subs	r3, r0, #0
 8003bec:	d001      	beq.n	8003bf2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003bee:	f000 f891 	bl	8003d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003bf2:	46c0      	nop			; (mov r8, r8)
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000410 	.word	0x20000410
 8003bfc:	40005400 	.word	0x40005400
 8003c00:	0000020b 	.word	0x0000020b

08003c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c0a:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <MX_USART1_UART_Init+0x5c>)
 8003c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c10:	22e1      	movs	r2, #225	; 0xe1
 8003c12:	0252      	lsls	r2, r2, #9
 8003c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c28:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c2a:	220c      	movs	r2, #12
 8003c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c3a:	4b08      	ldr	r3, [pc, #32]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c40:	4b06      	ldr	r3, [pc, #24]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <MX_USART1_UART_Init+0x58>)
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f002 f8bd 	bl	8005dc8 <HAL_UART_Init>
 8003c4e:	1e03      	subs	r3, r0, #0
 8003c50:	d001      	beq.n	8003c56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003c52:	f000 f85f 	bl	8003d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000a9c 	.word	0x20000a9c
 8003c60:	40013800 	.word	0x40013800

08003c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6a:	240c      	movs	r4, #12
 8003c6c:	193b      	adds	r3, r7, r4
 8003c6e:	0018      	movs	r0, r3
 8003c70:	2314      	movs	r3, #20
 8003c72:	001a      	movs	r2, r3
 8003c74:	2100      	movs	r1, #0
 8003c76:	f002 fc89 	bl	800658c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7a:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <MX_GPIO_Init+0xa8>)
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	4b23      	ldr	r3, [pc, #140]	; (8003d0c <MX_GPIO_Init+0xa8>)
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	0289      	lsls	r1, r1, #10
 8003c84:	430a      	orrs	r2, r1
 8003c86:	615a      	str	r2, [r3, #20]
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <MX_GPIO_Init+0xa8>)
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	029b      	lsls	r3, r3, #10
 8003c90:	4013      	ands	r3, r2
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c96:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <MX_GPIO_Init+0xa8>)
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	4b1c      	ldr	r3, [pc, #112]	; (8003d0c <MX_GPIO_Init+0xa8>)
 8003c9c:	2180      	movs	r1, #128	; 0x80
 8003c9e:	02c9      	lsls	r1, r1, #11
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	615a      	str	r2, [r3, #20]
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <MX_GPIO_Init+0xa8>)
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	02db      	lsls	r3, r3, #11
 8003cac:	4013      	ands	r3, r2
 8003cae:	607b      	str	r3, [r7, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED_Pin, GPIO_PIN_RESET);
 8003cb2:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <MX_GPIO_Init+0xac>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2118      	movs	r1, #24
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f000 fcac 	bl	8004616 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED_Pin;
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	2218      	movs	r2, #24
 8003cc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc4:	193b      	adds	r3, r7, r4
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	193b      	adds	r3, r7, r4
 8003ccc:	2200      	movs	r2, #0
 8003cce:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd0:	193b      	adds	r3, r7, r4
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cd6:	193b      	adds	r3, r7, r4
 8003cd8:	4a0d      	ldr	r2, [pc, #52]	; (8003d10 <MX_GPIO_Init+0xac>)
 8003cda:	0019      	movs	r1, r3
 8003cdc:	0010      	movs	r0, r2
 8003cde:	f000 fb15 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ce2:	0021      	movs	r1, r4
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cea:	187b      	adds	r3, r7, r1
 8003cec:	2200      	movs	r2, #0
 8003cee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	4a05      	ldr	r2, [pc, #20]	; (8003d10 <MX_GPIO_Init+0xac>)
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	0010      	movs	r0, r2
 8003cfe:	f000 fb05 	bl	800430c <HAL_GPIO_Init>

}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b009      	add	sp, #36	; 0x24
 8003d08:	bd90      	pop	{r4, r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	48000400 	.word	0x48000400

08003d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d18:	b672      	cpsid	i
}
 8003d1a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d1c:	e7fe      	b.n	8003d1c <Error_Handler+0x8>
	...

08003d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <HAL_MspInit+0x44>)
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <HAL_MspInit+0x44>)
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	619a      	str	r2, [r3, #24]
 8003d32:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_MspInit+0x44>)
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	2201      	movs	r2, #1
 8003d38:	4013      	ands	r3, r2
 8003d3a:	607b      	str	r3, [r7, #4]
 8003d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <HAL_MspInit+0x44>)
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <HAL_MspInit+0x44>)
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	0549      	lsls	r1, r1, #21
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	61da      	str	r2, [r3, #28]
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_MspInit+0x44>)
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	055b      	lsls	r3, r3, #21
 8003d54:	4013      	ands	r3, r2
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	b002      	add	sp, #8
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	46c0      	nop			; (mov r8, r8)
 8003d64:	40021000 	.word	0x40021000

08003d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d68:	b590      	push	{r4, r7, lr}
 8003d6a:	b08b      	sub	sp, #44	; 0x2c
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d70:	2414      	movs	r4, #20
 8003d72:	193b      	adds	r3, r7, r4
 8003d74:	0018      	movs	r0, r3
 8003d76:	2314      	movs	r3, #20
 8003d78:	001a      	movs	r2, r3
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	f002 fc06 	bl	800658c <memset>
  if(hi2c->Instance==I2C1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <HAL_I2C_MspInit+0x90>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d131      	bne.n	8003dee <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <HAL_I2C_MspInit+0x94>)
 8003d8c:	695a      	ldr	r2, [r3, #20]
 8003d8e:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <HAL_I2C_MspInit+0x94>)
 8003d90:	2180      	movs	r1, #128	; 0x80
 8003d92:	02c9      	lsls	r1, r1, #11
 8003d94:	430a      	orrs	r2, r1
 8003d96:	615a      	str	r2, [r3, #20]
 8003d98:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <HAL_I2C_MspInit+0x94>)
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	02db      	lsls	r3, r3, #11
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003da6:	0021      	movs	r1, r4
 8003da8:	187b      	adds	r3, r7, r1
 8003daa:	22c0      	movs	r2, #192	; 0xc0
 8003dac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dae:	187b      	adds	r3, r7, r1
 8003db0:	2212      	movs	r2, #18
 8003db2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	2201      	movs	r2, #1
 8003db8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc6:	187b      	adds	r3, r7, r1
 8003dc8:	4a0d      	ldr	r2, [pc, #52]	; (8003e00 <HAL_I2C_MspInit+0x98>)
 8003dca:	0019      	movs	r1, r3
 8003dcc:	0010      	movs	r0, r2
 8003dce:	f000 fa9d 	bl	800430c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dd2:	4b0a      	ldr	r3, [pc, #40]	; (8003dfc <HAL_I2C_MspInit+0x94>)
 8003dd4:	69da      	ldr	r2, [r3, #28]
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_I2C_MspInit+0x94>)
 8003dd8:	2180      	movs	r1, #128	; 0x80
 8003dda:	0389      	lsls	r1, r1, #14
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	61da      	str	r2, [r3, #28]
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_I2C_MspInit+0x94>)
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	039b      	lsls	r3, r3, #14
 8003de8:	4013      	ands	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b00b      	add	sp, #44	; 0x2c
 8003df4:	bd90      	pop	{r4, r7, pc}
 8003df6:	46c0      	nop			; (mov r8, r8)
 8003df8:	40005400 	.word	0x40005400
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	48000400 	.word	0x48000400

08003e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b08b      	sub	sp, #44	; 0x2c
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	2414      	movs	r4, #20
 8003e0e:	193b      	adds	r3, r7, r4
 8003e10:	0018      	movs	r0, r3
 8003e12:	2314      	movs	r3, #20
 8003e14:	001a      	movs	r2, r3
 8003e16:	2100      	movs	r1, #0
 8003e18:	f002 fbb8 	bl	800658c <memset>
  if(huart->Instance==USART1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_UART_MspInit+0x94>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d133      	bne.n	8003e8e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e26:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_UART_MspInit+0x98>)
 8003e28:	699a      	ldr	r2, [r3, #24]
 8003e2a:	4b1c      	ldr	r3, [pc, #112]	; (8003e9c <HAL_UART_MspInit+0x98>)
 8003e2c:	2180      	movs	r1, #128	; 0x80
 8003e2e:	01c9      	lsls	r1, r1, #7
 8003e30:	430a      	orrs	r2, r1
 8003e32:	619a      	str	r2, [r3, #24]
 8003e34:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_UART_MspInit+0x98>)
 8003e36:	699a      	ldr	r2, [r3, #24]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	01db      	lsls	r3, r3, #7
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e42:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <HAL_UART_MspInit+0x98>)
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <HAL_UART_MspInit+0x98>)
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	0289      	lsls	r1, r1, #10
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	615a      	str	r2, [r3, #20]
 8003e50:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <HAL_UART_MspInit+0x98>)
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	029b      	lsls	r3, r3, #10
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e5e:	193b      	adds	r3, r7, r4
 8003e60:	22c0      	movs	r2, #192	; 0xc0
 8003e62:	00d2      	lsls	r2, r2, #3
 8003e64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	0021      	movs	r1, r4
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2200      	movs	r2, #0
 8003e72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	2203      	movs	r2, #3
 8003e78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e80:	187a      	adds	r2, r7, r1
 8003e82:	2390      	movs	r3, #144	; 0x90
 8003e84:	05db      	lsls	r3, r3, #23
 8003e86:	0011      	movs	r1, r2
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f000 fa3f 	bl	800430c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003e8e:	46c0      	nop			; (mov r8, r8)
 8003e90:	46bd      	mov	sp, r7
 8003e92:	b00b      	add	sp, #44	; 0x2c
 8003e94:	bd90      	pop	{r4, r7, pc}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	40013800 	.word	0x40013800
 8003e9c:	40021000 	.word	0x40021000

08003ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ea4:	e7fe      	b.n	8003ea4 <NMI_Handler+0x4>

08003ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eaa:	e7fe      	b.n	8003eaa <HardFault_Handler+0x4>

08003eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003eb0:	46c0      	nop			; (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ec4:	f000 f92e 	bl	8004124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ec8:	46c0      	nop			; (mov r8, r8)
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b086      	sub	sp, #24
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	e00a      	b.n	8003ef6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ee0:	e000      	b.n	8003ee4 <_read+0x16>
 8003ee2:	bf00      	nop
 8003ee4:	0001      	movs	r1, r0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	60ba      	str	r2, [r7, #8]
 8003eec:	b2ca      	uxtb	r2, r1
 8003eee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	dbf0      	blt.n	8003ee0 <_read+0x12>
	}

return len;
 8003efe:	687b      	ldr	r3, [r7, #4]
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b006      	add	sp, #24
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b086      	sub	sp, #24
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e009      	b.n	8003f2e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	60ba      	str	r2, [r7, #8]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7fe fec0 	bl	8002ca8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	dbf1      	blt.n	8003f1a <_write+0x12>
	}
	return len;
 8003f36:	687b      	ldr	r3, [r7, #4]
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b006      	add	sp, #24
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <_close>:

int _close(int file)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	return -1;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	425b      	negs	r3, r3
}
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	b002      	add	sp, #8
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	0192      	lsls	r2, r2, #6
 8003f64:	605a      	str	r2, [r3, #4]
	return 0;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	0018      	movs	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	b002      	add	sp, #8
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <_isatty>:

int _isatty(int file)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
	return 1;
 8003f78:	2301      	movs	r3, #1
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b002      	add	sp, #8
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	607a      	str	r2, [r7, #4]
	return 0;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	0018      	movs	r0, r3
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b004      	add	sp, #16
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fa0:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <_sbrk+0x5c>)
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <_sbrk+0x60>)
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fac:	4b13      	ldr	r3, [pc, #76]	; (8003ffc <_sbrk+0x64>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <_sbrk+0x64>)
 8003fb6:	4a12      	ldr	r2, [pc, #72]	; (8004000 <_sbrk+0x68>)
 8003fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fba:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <_sbrk+0x64>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	18d3      	adds	r3, r2, r3
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d207      	bcs.n	8003fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fc8:	f002 fab6 	bl	8006538 <__errno>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	220c      	movs	r2, #12
 8003fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	425b      	negs	r3, r3
 8003fd6:	e009      	b.n	8003fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <_sbrk+0x64>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <_sbrk+0x64>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	18d2      	adds	r2, r2, r3
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <_sbrk+0x64>)
 8003fe8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003fea:	68fb      	ldr	r3, [r7, #12]
								}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b006      	add	sp, #24
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20001800 	.word	0x20001800
 8003ff8:	00000400 	.word	0x00000400
 8003ffc:	200000d8 	.word	0x200000d8
 8004000:	20000b38 	.word	0x20000b38

08004004 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004010:	4813      	ldr	r0, [pc, #76]	; (8004060 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004012:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8004014:	4813      	ldr	r0, [pc, #76]	; (8004064 <LoopForever+0x6>)
    LDR R1, [R0]
 8004016:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8004018:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800401a:	4a13      	ldr	r2, [pc, #76]	; (8004068 <LoopForever+0xa>)
    CMP R1, R2
 800401c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800401e:	d105      	bne.n	800402c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8004020:	4812      	ldr	r0, [pc, #72]	; (800406c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8004022:	4913      	ldr	r1, [pc, #76]	; (8004070 <LoopForever+0x12>)
    STR R1, [R0]
 8004024:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8004026:	4813      	ldr	r0, [pc, #76]	; (8004074 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8004028:	4913      	ldr	r1, [pc, #76]	; (8004078 <LoopForever+0x1a>)
    STR R1, [R0]
 800402a:	6001      	str	r1, [r0, #0]

0800402c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800402c:	4813      	ldr	r0, [pc, #76]	; (800407c <LoopForever+0x1e>)
  ldr r1, =_edata
 800402e:	4914      	ldr	r1, [pc, #80]	; (8004080 <LoopForever+0x22>)
  ldr r2, =_sidata
 8004030:	4a14      	ldr	r2, [pc, #80]	; (8004084 <LoopForever+0x26>)
  movs r3, #0
 8004032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004034:	e002      	b.n	800403c <LoopCopyDataInit>

08004036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800403a:	3304      	adds	r3, #4

0800403c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800403c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800403e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004040:	d3f9      	bcc.n	8004036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004042:	4a11      	ldr	r2, [pc, #68]	; (8004088 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8004044:	4c11      	ldr	r4, [pc, #68]	; (800408c <LoopForever+0x2e>)
  movs r3, #0
 8004046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004048:	e001      	b.n	800404e <LoopFillZerobss>

0800404a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800404a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800404c:	3204      	adds	r2, #4

0800404e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800404e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004050:	d3fb      	bcc.n	800404a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004052:	f7ff ffd7 	bl	8004004 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004056:	f002 fa75 	bl	8006544 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800405a:	f7fe fe39 	bl	8002cd0 <main>

0800405e <LoopForever>:

LoopForever:
    b LoopForever
 800405e:	e7fe      	b.n	800405e <LoopForever>
  ldr   r0, =_estack
 8004060:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8004064:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8004068:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800406c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8004070:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8004074:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8004078:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800407c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004080:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004084:	08007aa8 	.word	0x08007aa8
  ldr r2, =_sbss
 8004088:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 800408c:	20000b34 	.word	0x20000b34

08004090 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004090:	e7fe      	b.n	8004090 <ADC1_IRQHandler>
	...

08004094 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004098:	4b07      	ldr	r3, [pc, #28]	; (80040b8 <HAL_Init+0x24>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b06      	ldr	r3, [pc, #24]	; (80040b8 <HAL_Init+0x24>)
 800409e:	2110      	movs	r1, #16
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80040a4:	2000      	movs	r0, #0
 80040a6:	f000 f809 	bl	80040bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040aa:	f7ff fe39 	bl	8003d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	40022000 	.word	0x40022000

080040bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040bc:	b590      	push	{r4, r7, lr}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040c4:	4b14      	ldr	r3, [pc, #80]	; (8004118 <HAL_InitTick+0x5c>)
 80040c6:	681c      	ldr	r4, [r3, #0]
 80040c8:	4b14      	ldr	r3, [pc, #80]	; (800411c <HAL_InitTick+0x60>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	0019      	movs	r1, r3
 80040ce:	23fa      	movs	r3, #250	; 0xfa
 80040d0:	0098      	lsls	r0, r3, #2
 80040d2:	f7fc f823 	bl	800011c <__udivsi3>
 80040d6:	0003      	movs	r3, r0
 80040d8:	0019      	movs	r1, r3
 80040da:	0020      	movs	r0, r4
 80040dc:	f7fc f81e 	bl	800011c <__udivsi3>
 80040e0:	0003      	movs	r3, r0
 80040e2:	0018      	movs	r0, r3
 80040e4:	f000 f905 	bl	80042f2 <HAL_SYSTICK_Config>
 80040e8:	1e03      	subs	r3, r0, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e00f      	b.n	8004110 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d80b      	bhi.n	800410e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	2301      	movs	r3, #1
 80040fa:	425b      	negs	r3, r3
 80040fc:	2200      	movs	r2, #0
 80040fe:	0018      	movs	r0, r3
 8004100:	f000 f8e2 	bl	80042c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_InitTick+0x64>)
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b003      	add	sp, #12
 8004116:	bd90      	pop	{r4, r7, pc}
 8004118:	20000010 	.word	0x20000010
 800411c:	20000018 	.word	0x20000018
 8004120:	20000014 	.word	0x20000014

08004124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <HAL_IncTick+0x1c>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	001a      	movs	r2, r3
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_IncTick+0x20>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	18d2      	adds	r2, r2, r3
 8004134:	4b03      	ldr	r3, [pc, #12]	; (8004144 <HAL_IncTick+0x20>)
 8004136:	601a      	str	r2, [r3, #0]
}
 8004138:	46c0      	nop			; (mov r8, r8)
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	46c0      	nop			; (mov r8, r8)
 8004140:	20000018 	.word	0x20000018
 8004144:	20000b20 	.word	0x20000b20

08004148 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  return uwTick;
 800414c:	4b02      	ldr	r3, [pc, #8]	; (8004158 <HAL_GetTick+0x10>)
 800414e:	681b      	ldr	r3, [r3, #0]
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	20000b20 	.word	0x20000b20

0800415c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004164:	f7ff fff0 	bl	8004148 <HAL_GetTick>
 8004168:	0003      	movs	r3, r0
 800416a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3301      	adds	r3, #1
 8004174:	d005      	beq.n	8004182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_Delay+0x44>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	001a      	movs	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	189b      	adds	r3, r3, r2
 8004180:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	f7ff ffe0 	bl	8004148 <HAL_GetTick>
 8004188:	0002      	movs	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d8f7      	bhi.n	8004184 <HAL_Delay+0x28>
  {
  }
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b004      	add	sp, #16
 800419c:	bd80      	pop	{r7, pc}
 800419e:	46c0      	nop			; (mov r8, r8)
 80041a0:	20000018 	.word	0x20000018

080041a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041a4:	b590      	push	{r4, r7, lr}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	0002      	movs	r2, r0
 80041ac:	6039      	str	r1, [r7, #0]
 80041ae:	1dfb      	adds	r3, r7, #7
 80041b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041b2:	1dfb      	adds	r3, r7, #7
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b7f      	cmp	r3, #127	; 0x7f
 80041b8:	d828      	bhi.n	800420c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041ba:	4a2f      	ldr	r2, [pc, #188]	; (8004278 <__NVIC_SetPriority+0xd4>)
 80041bc:	1dfb      	adds	r3, r7, #7
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	089b      	lsrs	r3, r3, #2
 80041c4:	33c0      	adds	r3, #192	; 0xc0
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	589b      	ldr	r3, [r3, r2]
 80041ca:	1dfa      	adds	r2, r7, #7
 80041cc:	7812      	ldrb	r2, [r2, #0]
 80041ce:	0011      	movs	r1, r2
 80041d0:	2203      	movs	r2, #3
 80041d2:	400a      	ands	r2, r1
 80041d4:	00d2      	lsls	r2, r2, #3
 80041d6:	21ff      	movs	r1, #255	; 0xff
 80041d8:	4091      	lsls	r1, r2
 80041da:	000a      	movs	r2, r1
 80041dc:	43d2      	mvns	r2, r2
 80041de:	401a      	ands	r2, r3
 80041e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	019b      	lsls	r3, r3, #6
 80041e6:	22ff      	movs	r2, #255	; 0xff
 80041e8:	401a      	ands	r2, r3
 80041ea:	1dfb      	adds	r3, r7, #7
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	0018      	movs	r0, r3
 80041f0:	2303      	movs	r3, #3
 80041f2:	4003      	ands	r3, r0
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041f8:	481f      	ldr	r0, [pc, #124]	; (8004278 <__NVIC_SetPriority+0xd4>)
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	b25b      	sxtb	r3, r3
 8004200:	089b      	lsrs	r3, r3, #2
 8004202:	430a      	orrs	r2, r1
 8004204:	33c0      	adds	r3, #192	; 0xc0
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800420a:	e031      	b.n	8004270 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800420c:	4a1b      	ldr	r2, [pc, #108]	; (800427c <__NVIC_SetPriority+0xd8>)
 800420e:	1dfb      	adds	r3, r7, #7
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	0019      	movs	r1, r3
 8004214:	230f      	movs	r3, #15
 8004216:	400b      	ands	r3, r1
 8004218:	3b08      	subs	r3, #8
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	3306      	adds	r3, #6
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	18d3      	adds	r3, r2, r3
 8004222:	3304      	adds	r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	1dfa      	adds	r2, r7, #7
 8004228:	7812      	ldrb	r2, [r2, #0]
 800422a:	0011      	movs	r1, r2
 800422c:	2203      	movs	r2, #3
 800422e:	400a      	ands	r2, r1
 8004230:	00d2      	lsls	r2, r2, #3
 8004232:	21ff      	movs	r1, #255	; 0xff
 8004234:	4091      	lsls	r1, r2
 8004236:	000a      	movs	r2, r1
 8004238:	43d2      	mvns	r2, r2
 800423a:	401a      	ands	r2, r3
 800423c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	22ff      	movs	r2, #255	; 0xff
 8004244:	401a      	ands	r2, r3
 8004246:	1dfb      	adds	r3, r7, #7
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	0018      	movs	r0, r3
 800424c:	2303      	movs	r3, #3
 800424e:	4003      	ands	r3, r0
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004254:	4809      	ldr	r0, [pc, #36]	; (800427c <__NVIC_SetPriority+0xd8>)
 8004256:	1dfb      	adds	r3, r7, #7
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	001c      	movs	r4, r3
 800425c:	230f      	movs	r3, #15
 800425e:	4023      	ands	r3, r4
 8004260:	3b08      	subs	r3, #8
 8004262:	089b      	lsrs	r3, r3, #2
 8004264:	430a      	orrs	r2, r1
 8004266:	3306      	adds	r3, #6
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	18c3      	adds	r3, r0, r3
 800426c:	3304      	adds	r3, #4
 800426e:	601a      	str	r2, [r3, #0]
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b003      	add	sp, #12
 8004276:	bd90      	pop	{r4, r7, pc}
 8004278:	e000e100 	.word	0xe000e100
 800427c:	e000ed00 	.word	0xe000ed00

08004280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	1e5a      	subs	r2, r3, #1
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	045b      	lsls	r3, r3, #17
 8004290:	429a      	cmp	r2, r3
 8004292:	d301      	bcc.n	8004298 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004294:	2301      	movs	r3, #1
 8004296:	e010      	b.n	80042ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <SysTick_Config+0x44>)
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	3a01      	subs	r2, #1
 800429e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042a0:	2301      	movs	r3, #1
 80042a2:	425b      	negs	r3, r3
 80042a4:	2103      	movs	r1, #3
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7ff ff7c 	bl	80041a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042ac:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <SysTick_Config+0x44>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <SysTick_Config+0x44>)
 80042b4:	2207      	movs	r2, #7
 80042b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b002      	add	sp, #8
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	e000e010 	.word	0xe000e010

080042c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	210f      	movs	r1, #15
 80042d4:	187b      	adds	r3, r7, r1
 80042d6:	1c02      	adds	r2, r0, #0
 80042d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	187b      	adds	r3, r7, r1
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b25b      	sxtb	r3, r3
 80042e2:	0011      	movs	r1, r2
 80042e4:	0018      	movs	r0, r3
 80042e6:	f7ff ff5d 	bl	80041a4 <__NVIC_SetPriority>
}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b004      	add	sp, #16
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	0018      	movs	r0, r3
 80042fe:	f7ff ffbf 	bl	8004280 <SysTick_Config>
 8004302:	0003      	movs	r3, r0
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	b002      	add	sp, #8
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800431a:	e149      	b.n	80045b0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2101      	movs	r1, #1
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4091      	lsls	r1, r2
 8004326:	000a      	movs	r2, r1
 8004328:	4013      	ands	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d100      	bne.n	8004334 <HAL_GPIO_Init+0x28>
 8004332:	e13a      	b.n	80045aa <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d00b      	beq.n	8004354 <HAL_GPIO_Init+0x48>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d007      	beq.n	8004354 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004348:	2b11      	cmp	r3, #17
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b12      	cmp	r3, #18
 8004352:	d130      	bne.n	80043b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	2203      	movs	r2, #3
 8004360:	409a      	lsls	r2, r3
 8004362:	0013      	movs	r3, r2
 8004364:	43da      	mvns	r2, r3
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	409a      	lsls	r2, r3
 8004376:	0013      	movs	r3, r2
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800438a:	2201      	movs	r2, #1
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	409a      	lsls	r2, r3
 8004390:	0013      	movs	r3, r2
 8004392:	43da      	mvns	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4013      	ands	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	2201      	movs	r2, #1
 80043a2:	401a      	ands	r2, r3
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	409a      	lsls	r2, r3
 80043a8:	0013      	movs	r3, r2
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	2203      	movs	r2, #3
 80043c2:	409a      	lsls	r2, r3
 80043c4:	0013      	movs	r3, r2
 80043c6:	43da      	mvns	r2, r3
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4013      	ands	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	409a      	lsls	r2, r3
 80043d8:	0013      	movs	r3, r2
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d003      	beq.n	80043f6 <HAL_GPIO_Init+0xea>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b12      	cmp	r3, #18
 80043f4:	d123      	bne.n	800443e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	08da      	lsrs	r2, r3, #3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3208      	adds	r2, #8
 80043fe:	0092      	lsls	r2, r2, #2
 8004400:	58d3      	ldr	r3, [r2, r3]
 8004402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2207      	movs	r2, #7
 8004408:	4013      	ands	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	220f      	movs	r2, #15
 800440e:	409a      	lsls	r2, r3
 8004410:	0013      	movs	r3, r2
 8004412:	43da      	mvns	r2, r3
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4013      	ands	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2107      	movs	r1, #7
 8004422:	400b      	ands	r3, r1
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	409a      	lsls	r2, r3
 8004428:	0013      	movs	r3, r2
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	08da      	lsrs	r2, r3, #3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3208      	adds	r2, #8
 8004438:	0092      	lsls	r2, r2, #2
 800443a:	6939      	ldr	r1, [r7, #16]
 800443c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	2203      	movs	r2, #3
 800444a:	409a      	lsls	r2, r3
 800444c:	0013      	movs	r3, r2
 800444e:	43da      	mvns	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	4013      	ands	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2203      	movs	r2, #3
 800445c:	401a      	ands	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	409a      	lsls	r2, r3
 8004464:	0013      	movs	r3, r2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	055b      	lsls	r3, r3, #21
 800447a:	4013      	ands	r3, r2
 800447c:	d100      	bne.n	8004480 <HAL_GPIO_Init+0x174>
 800447e:	e094      	b.n	80045aa <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004480:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <HAL_GPIO_Init+0x2bc>)
 8004482:	699a      	ldr	r2, [r3, #24]
 8004484:	4b50      	ldr	r3, [pc, #320]	; (80045c8 <HAL_GPIO_Init+0x2bc>)
 8004486:	2101      	movs	r1, #1
 8004488:	430a      	orrs	r2, r1
 800448a:	619a      	str	r2, [r3, #24]
 800448c:	4b4e      	ldr	r3, [pc, #312]	; (80045c8 <HAL_GPIO_Init+0x2bc>)
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2201      	movs	r2, #1
 8004492:	4013      	ands	r3, r2
 8004494:	60bb      	str	r3, [r7, #8]
 8004496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004498:	4a4c      	ldr	r2, [pc, #304]	; (80045cc <HAL_GPIO_Init+0x2c0>)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	089b      	lsrs	r3, r3, #2
 800449e:	3302      	adds	r3, #2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	589b      	ldr	r3, [r3, r2]
 80044a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2203      	movs	r2, #3
 80044aa:	4013      	ands	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	220f      	movs	r2, #15
 80044b0:	409a      	lsls	r2, r3
 80044b2:	0013      	movs	r3, r2
 80044b4:	43da      	mvns	r2, r3
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	2390      	movs	r3, #144	; 0x90
 80044c0:	05db      	lsls	r3, r3, #23
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d00d      	beq.n	80044e2 <HAL_GPIO_Init+0x1d6>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a41      	ldr	r2, [pc, #260]	; (80045d0 <HAL_GPIO_Init+0x2c4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d007      	beq.n	80044de <HAL_GPIO_Init+0x1d2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a40      	ldr	r2, [pc, #256]	; (80045d4 <HAL_GPIO_Init+0x2c8>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d101      	bne.n	80044da <HAL_GPIO_Init+0x1ce>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e004      	b.n	80044e4 <HAL_GPIO_Init+0x1d8>
 80044da:	2305      	movs	r3, #5
 80044dc:	e002      	b.n	80044e4 <HAL_GPIO_Init+0x1d8>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <HAL_GPIO_Init+0x1d8>
 80044e2:	2300      	movs	r3, #0
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	2103      	movs	r1, #3
 80044e8:	400a      	ands	r2, r1
 80044ea:	0092      	lsls	r2, r2, #2
 80044ec:	4093      	lsls	r3, r2
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044f4:	4935      	ldr	r1, [pc, #212]	; (80045cc <HAL_GPIO_Init+0x2c0>)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	089b      	lsrs	r3, r3, #2
 80044fa:	3302      	adds	r3, #2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004502:	4b35      	ldr	r3, [pc, #212]	; (80045d8 <HAL_GPIO_Init+0x2cc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	43da      	mvns	r2, r3
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	025b      	lsls	r3, r3, #9
 800451a:	4013      	ands	r3, r2
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004526:	4b2c      	ldr	r3, [pc, #176]	; (80045d8 <HAL_GPIO_Init+0x2cc>)
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800452c:	4b2a      	ldr	r3, [pc, #168]	; (80045d8 <HAL_GPIO_Init+0x2cc>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	43da      	mvns	r2, r3
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	2380      	movs	r3, #128	; 0x80
 8004542:	029b      	lsls	r3, r3, #10
 8004544:	4013      	ands	r3, r2
 8004546:	d003      	beq.n	8004550 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004550:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <HAL_GPIO_Init+0x2cc>)
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004556:	4b20      	ldr	r3, [pc, #128]	; (80045d8 <HAL_GPIO_Init+0x2cc>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	43da      	mvns	r2, r3
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	2380      	movs	r3, #128	; 0x80
 800456c:	035b      	lsls	r3, r3, #13
 800456e:	4013      	ands	r3, r2
 8004570:	d003      	beq.n	800457a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800457a:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <HAL_GPIO_Init+0x2cc>)
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004580:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <HAL_GPIO_Init+0x2cc>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	43da      	mvns	r2, r3
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	2380      	movs	r3, #128	; 0x80
 8004596:	039b      	lsls	r3, r3, #14
 8004598:	4013      	ands	r3, r2
 800459a:	d003      	beq.n	80045a4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <HAL_GPIO_Init+0x2cc>)
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	3301      	adds	r3, #1
 80045ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	40da      	lsrs	r2, r3
 80045b8:	1e13      	subs	r3, r2, #0
 80045ba:	d000      	beq.n	80045be <HAL_GPIO_Init+0x2b2>
 80045bc:	e6ae      	b.n	800431c <HAL_GPIO_Init+0x10>
  } 
}
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b006      	add	sp, #24
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40010000 	.word	0x40010000
 80045d0:	48000400 	.word	0x48000400
 80045d4:	48000800 	.word	0x48000800
 80045d8:	40010400 	.word	0x40010400

080045dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	000a      	movs	r2, r1
 80045e6:	1cbb      	adds	r3, r7, #2
 80045e8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	1cba      	adds	r2, r7, #2
 80045f0:	8812      	ldrh	r2, [r2, #0]
 80045f2:	4013      	ands	r3, r2
 80045f4:	d004      	beq.n	8004600 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80045f6:	230f      	movs	r3, #15
 80045f8:	18fb      	adds	r3, r7, r3
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e003      	b.n	8004608 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004600:	230f      	movs	r3, #15
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004608:	230f      	movs	r3, #15
 800460a:	18fb      	adds	r3, r7, r3
 800460c:	781b      	ldrb	r3, [r3, #0]
  }
 800460e:	0018      	movs	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	b004      	add	sp, #16
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	0008      	movs	r0, r1
 8004620:	0011      	movs	r1, r2
 8004622:	1cbb      	adds	r3, r7, #2
 8004624:	1c02      	adds	r2, r0, #0
 8004626:	801a      	strh	r2, [r3, #0]
 8004628:	1c7b      	adds	r3, r7, #1
 800462a:	1c0a      	adds	r2, r1, #0
 800462c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800462e:	1c7b      	adds	r3, r7, #1
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d004      	beq.n	8004640 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004636:	1cbb      	adds	r3, r7, #2
 8004638:	881a      	ldrh	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800463e:	e003      	b.n	8004648 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004640:	1cbb      	adds	r3, r7, #2
 8004642:	881a      	ldrh	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004648:	46c0      	nop			; (mov r8, r8)
 800464a:	46bd      	mov	sp, r7
 800464c:	b002      	add	sp, #8
 800464e:	bd80      	pop	{r7, pc}

08004650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e082      	b.n	8004768 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2241      	movs	r2, #65	; 0x41
 8004666:	5c9b      	ldrb	r3, [r3, r2]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2240      	movs	r2, #64	; 0x40
 8004672:	2100      	movs	r1, #0
 8004674:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	0018      	movs	r0, r3
 800467a:	f7ff fb75 	bl	8003d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2241      	movs	r2, #65	; 0x41
 8004682:	2124      	movs	r1, #36	; 0x24
 8004684:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2101      	movs	r1, #1
 8004692:	438a      	bics	r2, r1
 8004694:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4934      	ldr	r1, [pc, #208]	; (8004770 <HAL_I2C_Init+0x120>)
 80046a0:	400a      	ands	r2, r1
 80046a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4931      	ldr	r1, [pc, #196]	; (8004774 <HAL_I2C_Init+0x124>)
 80046b0:	400a      	ands	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d108      	bne.n	80046ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	0209      	lsls	r1, r1, #8
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]
 80046cc:	e007      	b.n	80046de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2184      	movs	r1, #132	; 0x84
 80046d8:	0209      	lsls	r1, r1, #8
 80046da:	430a      	orrs	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d104      	bne.n	80046f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	0112      	lsls	r2, r2, #4
 80046ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	491f      	ldr	r1, [pc, #124]	; (8004778 <HAL_I2C_Init+0x128>)
 80046fc:	430a      	orrs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	491a      	ldr	r1, [pc, #104]	; (8004774 <HAL_I2C_Init+0x124>)
 800470c:	400a      	ands	r2, r1
 800470e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691a      	ldr	r2, [r3, #16]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	431a      	orrs	r2, r3
 800471a:	0011      	movs	r1, r2
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	699b      	ldr	r3, [r3, #24]
 8004720:	021a      	lsls	r2, r3, #8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69d9      	ldr	r1, [r3, #28]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1a      	ldr	r2, [r3, #32]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2101      	movs	r1, #1
 8004746:	430a      	orrs	r2, r1
 8004748:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2241      	movs	r2, #65	; 0x41
 8004754:	2120      	movs	r1, #32
 8004756:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2242      	movs	r2, #66	; 0x42
 8004762:	2100      	movs	r1, #0
 8004764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b002      	add	sp, #8
 800476e:	bd80      	pop	{r7, pc}
 8004770:	f0ffffff 	.word	0xf0ffffff
 8004774:	ffff7fff 	.word	0xffff7fff
 8004778:	02008000 	.word	0x02008000

0800477c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800477c:	b590      	push	{r4, r7, lr}
 800477e:	b089      	sub	sp, #36	; 0x24
 8004780:	af02      	add	r7, sp, #8
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	000c      	movs	r4, r1
 8004786:	0010      	movs	r0, r2
 8004788:	0019      	movs	r1, r3
 800478a:	230a      	movs	r3, #10
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	1c22      	adds	r2, r4, #0
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	2308      	movs	r3, #8
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	1c02      	adds	r2, r0, #0
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	1dbb      	adds	r3, r7, #6
 800479c:	1c0a      	adds	r2, r1, #0
 800479e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2241      	movs	r2, #65	; 0x41
 80047a4:	5c9b      	ldrb	r3, [r3, r2]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d000      	beq.n	80047ae <HAL_I2C_Mem_Write+0x32>
 80047ac:	e10c      	b.n	80049c8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_I2C_Mem_Write+0x42>
 80047b4:	232c      	movs	r3, #44	; 0x2c
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d105      	bne.n	80047ca <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2280      	movs	r2, #128	; 0x80
 80047c2:	0092      	lsls	r2, r2, #2
 80047c4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e0ff      	b.n	80049ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2240      	movs	r2, #64	; 0x40
 80047ce:	5c9b      	ldrb	r3, [r3, r2]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_I2C_Mem_Write+0x5c>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e0f8      	b.n	80049ca <HAL_I2C_Mem_Write+0x24e>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2240      	movs	r2, #64	; 0x40
 80047dc:	2101      	movs	r1, #1
 80047de:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047e0:	f7ff fcb2 	bl	8004148 <HAL_GetTick>
 80047e4:	0003      	movs	r3, r0
 80047e6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047e8:	2380      	movs	r3, #128	; 0x80
 80047ea:	0219      	lsls	r1, r3, #8
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	2319      	movs	r3, #25
 80047f4:	2201      	movs	r2, #1
 80047f6:	f000 fb0b 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 80047fa:	1e03      	subs	r3, r0, #0
 80047fc:	d001      	beq.n	8004802 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e0e3      	b.n	80049ca <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2241      	movs	r2, #65	; 0x41
 8004806:	2121      	movs	r1, #33	; 0x21
 8004808:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2242      	movs	r2, #66	; 0x42
 800480e:	2140      	movs	r1, #64	; 0x40
 8004810:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800481c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	222c      	movs	r2, #44	; 0x2c
 8004822:	18ba      	adds	r2, r7, r2
 8004824:	8812      	ldrh	r2, [r2, #0]
 8004826:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800482e:	1dbb      	adds	r3, r7, #6
 8004830:	881c      	ldrh	r4, [r3, #0]
 8004832:	2308      	movs	r3, #8
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	881a      	ldrh	r2, [r3, #0]
 8004838:	230a      	movs	r3, #10
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	8819      	ldrh	r1, [r3, #0]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	9301      	str	r3, [sp, #4]
 8004844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	0023      	movs	r3, r4
 800484a:	f000 f9f9 	bl	8004c40 <I2C_RequestMemoryWrite>
 800484e:	1e03      	subs	r3, r0, #0
 8004850:	d005      	beq.n	800485e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2240      	movs	r2, #64	; 0x40
 8004856:	2100      	movs	r1, #0
 8004858:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e0b5      	b.n	80049ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004862:	b29b      	uxth	r3, r3
 8004864:	2bff      	cmp	r3, #255	; 0xff
 8004866:	d911      	bls.n	800488c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	22ff      	movs	r2, #255	; 0xff
 800486c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004872:	b2da      	uxtb	r2, r3
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	045c      	lsls	r4, r3, #17
 8004878:	230a      	movs	r3, #10
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	8819      	ldrh	r1, [r3, #0]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	2300      	movs	r3, #0
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	0023      	movs	r3, r4
 8004886:	f000 fbe3 	bl	8005050 <I2C_TransferConfig>
 800488a:	e012      	b.n	80048b2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29a      	uxth	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	b2da      	uxtb	r2, r3
 800489c:	2380      	movs	r3, #128	; 0x80
 800489e:	049c      	lsls	r4, r3, #18
 80048a0:	230a      	movs	r3, #10
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	8819      	ldrh	r1, [r3, #0]
 80048a6:	68f8      	ldr	r0, [r7, #12]
 80048a8:	2300      	movs	r3, #0
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	0023      	movs	r3, r4
 80048ae:	f000 fbcf 	bl	8005050 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	0018      	movs	r0, r3
 80048ba:	f000 fae8 	bl	8004e8e <I2C_WaitOnTXISFlagUntilTimeout>
 80048be:	1e03      	subs	r3, r0, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e081      	b.n	80049ca <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	781a      	ldrb	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d03a      	beq.n	8004976 <HAL_I2C_Mem_Write+0x1fa>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	d136      	bne.n	8004976 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	0013      	movs	r3, r2
 8004912:	2200      	movs	r2, #0
 8004914:	2180      	movs	r1, #128	; 0x80
 8004916:	f000 fa7b 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 800491a:	1e03      	subs	r3, r0, #0
 800491c:	d001      	beq.n	8004922 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e053      	b.n	80049ca <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	2bff      	cmp	r3, #255	; 0xff
 800492a:	d911      	bls.n	8004950 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	22ff      	movs	r2, #255	; 0xff
 8004930:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004936:	b2da      	uxtb	r2, r3
 8004938:	2380      	movs	r3, #128	; 0x80
 800493a:	045c      	lsls	r4, r3, #17
 800493c:	230a      	movs	r3, #10
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	8819      	ldrh	r1, [r3, #0]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	2300      	movs	r3, #0
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	0023      	movs	r3, r4
 800494a:	f000 fb81 	bl	8005050 <I2C_TransferConfig>
 800494e:	e012      	b.n	8004976 <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29a      	uxth	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495e:	b2da      	uxtb	r2, r3
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	049c      	lsls	r4, r3, #18
 8004964:	230a      	movs	r3, #10
 8004966:	18fb      	adds	r3, r7, r3
 8004968:	8819      	ldrh	r1, [r3, #0]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	2300      	movs	r3, #0
 800496e:	9300      	str	r3, [sp, #0]
 8004970:	0023      	movs	r3, r4
 8004972:	f000 fb6d 	bl	8005050 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d198      	bne.n	80048b2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	0018      	movs	r0, r3
 8004988:	f000 fac0 	bl	8004f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 800498c:	1e03      	subs	r3, r0, #0
 800498e:	d001      	beq.n	8004994 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e01a      	b.n	80049ca <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2220      	movs	r2, #32
 800499a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	490b      	ldr	r1, [pc, #44]	; (80049d4 <HAL_I2C_Mem_Write+0x258>)
 80049a8:	400a      	ands	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2241      	movs	r2, #65	; 0x41
 80049b0:	2120      	movs	r1, #32
 80049b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2242      	movs	r2, #66	; 0x42
 80049b8:	2100      	movs	r1, #0
 80049ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2240      	movs	r2, #64	; 0x40
 80049c0:	2100      	movs	r1, #0
 80049c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e000      	b.n	80049ca <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
  }
}
 80049ca:	0018      	movs	r0, r3
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b007      	add	sp, #28
 80049d0:	bd90      	pop	{r4, r7, pc}
 80049d2:	46c0      	nop			; (mov r8, r8)
 80049d4:	fe00e800 	.word	0xfe00e800

080049d8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	b089      	sub	sp, #36	; 0x24
 80049dc:	af02      	add	r7, sp, #8
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	000c      	movs	r4, r1
 80049e2:	0010      	movs	r0, r2
 80049e4:	0019      	movs	r1, r3
 80049e6:	230a      	movs	r3, #10
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	1c22      	adds	r2, r4, #0
 80049ec:	801a      	strh	r2, [r3, #0]
 80049ee:	2308      	movs	r3, #8
 80049f0:	18fb      	adds	r3, r7, r3
 80049f2:	1c02      	adds	r2, r0, #0
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	1dbb      	adds	r3, r7, #6
 80049f8:	1c0a      	adds	r2, r1, #0
 80049fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2241      	movs	r2, #65	; 0x41
 8004a00:	5c9b      	ldrb	r3, [r3, r2]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	d000      	beq.n	8004a0a <HAL_I2C_Mem_Read+0x32>
 8004a08:	e110      	b.n	8004c2c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <HAL_I2C_Mem_Read+0x42>
 8004a10:	232c      	movs	r3, #44	; 0x2c
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d105      	bne.n	8004a26 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2280      	movs	r2, #128	; 0x80
 8004a1e:	0092      	lsls	r2, r2, #2
 8004a20:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e103      	b.n	8004c2e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2240      	movs	r2, #64	; 0x40
 8004a2a:	5c9b      	ldrb	r3, [r3, r2]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_I2C_Mem_Read+0x5c>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e0fc      	b.n	8004c2e <HAL_I2C_Mem_Read+0x256>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2240      	movs	r2, #64	; 0x40
 8004a38:	2101      	movs	r1, #1
 8004a3a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004a3c:	f7ff fb84 	bl	8004148 <HAL_GetTick>
 8004a40:	0003      	movs	r3, r0
 8004a42:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	0219      	lsls	r1, r3, #8
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2319      	movs	r3, #25
 8004a50:	2201      	movs	r2, #1
 8004a52:	f000 f9dd 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004a56:	1e03      	subs	r3, r0, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e0e7      	b.n	8004c2e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2241      	movs	r2, #65	; 0x41
 8004a62:	2122      	movs	r1, #34	; 0x22
 8004a64:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2242      	movs	r2, #66	; 0x42
 8004a6a:	2140      	movs	r1, #64	; 0x40
 8004a6c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	222c      	movs	r2, #44	; 0x2c
 8004a7e:	18ba      	adds	r2, r7, r2
 8004a80:	8812      	ldrh	r2, [r2, #0]
 8004a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a8a:	1dbb      	adds	r3, r7, #6
 8004a8c:	881c      	ldrh	r4, [r3, #0]
 8004a8e:	2308      	movs	r3, #8
 8004a90:	18fb      	adds	r3, r7, r3
 8004a92:	881a      	ldrh	r2, [r3, #0]
 8004a94:	230a      	movs	r3, #10
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	8819      	ldrh	r1, [r3, #0]
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	9301      	str	r3, [sp, #4]
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	0023      	movs	r3, r4
 8004aa6:	f000 f92f 	bl	8004d08 <I2C_RequestMemoryRead>
 8004aaa:	1e03      	subs	r3, r0, #0
 8004aac:	d005      	beq.n	8004aba <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2240      	movs	r2, #64	; 0x40
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0b9      	b.n	8004c2e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2bff      	cmp	r3, #255	; 0xff
 8004ac2:	d911      	bls.n	8004ae8 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	22ff      	movs	r2, #255	; 0xff
 8004ac8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	045c      	lsls	r4, r3, #17
 8004ad4:	230a      	movs	r3, #10
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	8819      	ldrh	r1, [r3, #0]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	4b56      	ldr	r3, [pc, #344]	; (8004c38 <HAL_I2C_Mem_Read+0x260>)
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	0023      	movs	r3, r4
 8004ae2:	f000 fab5 	bl	8005050 <I2C_TransferConfig>
 8004ae6:	e012      	b.n	8004b0e <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	2380      	movs	r3, #128	; 0x80
 8004afa:	049c      	lsls	r4, r3, #18
 8004afc:	230a      	movs	r3, #10
 8004afe:	18fb      	adds	r3, r7, r3
 8004b00:	8819      	ldrh	r1, [r3, #0]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	4b4c      	ldr	r3, [pc, #304]	; (8004c38 <HAL_I2C_Mem_Read+0x260>)
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	0023      	movs	r3, r4
 8004b0a:	f000 faa1 	bl	8005050 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	0013      	movs	r3, r2
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2104      	movs	r1, #4
 8004b1c:	f000 f978 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004b20:	1e03      	subs	r3, r0, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e082      	b.n	8004c2e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b44:	3b01      	subs	r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d03a      	beq.n	8004bda <HAL_I2C_Mem_Read+0x202>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d136      	bne.n	8004bda <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	0013      	movs	r3, r2
 8004b76:	2200      	movs	r2, #0
 8004b78:	2180      	movs	r1, #128	; 0x80
 8004b7a:	f000 f949 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004b7e:	1e03      	subs	r3, r0, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e053      	b.n	8004c2e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2bff      	cmp	r3, #255	; 0xff
 8004b8e:	d911      	bls.n	8004bb4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	22ff      	movs	r2, #255	; 0xff
 8004b94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	045c      	lsls	r4, r3, #17
 8004ba0:	230a      	movs	r3, #10
 8004ba2:	18fb      	adds	r3, r7, r3
 8004ba4:	8819      	ldrh	r1, [r3, #0]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	0023      	movs	r3, r4
 8004bae:	f000 fa4f 	bl	8005050 <I2C_TransferConfig>
 8004bb2:	e012      	b.n	8004bda <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	049c      	lsls	r4, r3, #18
 8004bc8:	230a      	movs	r3, #10
 8004bca:	18fb      	adds	r3, r7, r3
 8004bcc:	8819      	ldrh	r1, [r3, #0]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	0023      	movs	r3, r4
 8004bd6:	f000 fa3b 	bl	8005050 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d194      	bne.n	8004b0e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	0018      	movs	r0, r3
 8004bec:	f000 f98e 	bl	8004f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004bf0:	1e03      	subs	r3, r0, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e01a      	b.n	8004c2e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2220      	movs	r2, #32
 8004bfe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	490c      	ldr	r1, [pc, #48]	; (8004c3c <HAL_I2C_Mem_Read+0x264>)
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2241      	movs	r2, #65	; 0x41
 8004c14:	2120      	movs	r1, #32
 8004c16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2242      	movs	r2, #66	; 0x42
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2240      	movs	r2, #64	; 0x40
 8004c24:	2100      	movs	r1, #0
 8004c26:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e000      	b.n	8004c2e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b007      	add	sp, #28
 8004c34:	bd90      	pop	{r4, r7, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	80002400 	.word	0x80002400
 8004c3c:	fe00e800 	.word	0xfe00e800

08004c40 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c40:	b5b0      	push	{r4, r5, r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	000c      	movs	r4, r1
 8004c4a:	0010      	movs	r0, r2
 8004c4c:	0019      	movs	r1, r3
 8004c4e:	250a      	movs	r5, #10
 8004c50:	197b      	adds	r3, r7, r5
 8004c52:	1c22      	adds	r2, r4, #0
 8004c54:	801a      	strh	r2, [r3, #0]
 8004c56:	2308      	movs	r3, #8
 8004c58:	18fb      	adds	r3, r7, r3
 8004c5a:	1c02      	adds	r2, r0, #0
 8004c5c:	801a      	strh	r2, [r3, #0]
 8004c5e:	1dbb      	adds	r3, r7, #6
 8004c60:	1c0a      	adds	r2, r1, #0
 8004c62:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c64:	1dbb      	adds	r3, r7, #6
 8004c66:	881b      	ldrh	r3, [r3, #0]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	2380      	movs	r3, #128	; 0x80
 8004c6c:	045c      	lsls	r4, r3, #17
 8004c6e:	197b      	adds	r3, r7, r5
 8004c70:	8819      	ldrh	r1, [r3, #0]
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <I2C_RequestMemoryWrite+0xc4>)
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	0023      	movs	r3, r4
 8004c7a:	f000 f9e9 	bl	8005050 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c80:	6a39      	ldr	r1, [r7, #32]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	0018      	movs	r0, r3
 8004c86:	f000 f902 	bl	8004e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8004c8a:	1e03      	subs	r3, r0, #0
 8004c8c:	d001      	beq.n	8004c92 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e033      	b.n	8004cfa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c92:	1dbb      	adds	r3, r7, #6
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d107      	bne.n	8004caa <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ca8:	e019      	b.n	8004cde <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004caa:	2308      	movs	r3, #8
 8004cac:	18fb      	adds	r3, r7, r3
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	0a1b      	lsrs	r3, r3, #8
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbe:	6a39      	ldr	r1, [r7, #32]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f000 f8e3 	bl	8004e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8004cc8:	1e03      	subs	r3, r0, #0
 8004cca:	d001      	beq.n	8004cd0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e014      	b.n	8004cfa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004cde:	6a3a      	ldr	r2, [r7, #32]
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	0013      	movs	r3, r2
 8004ce8:	2200      	movs	r2, #0
 8004cea:	2180      	movs	r1, #128	; 0x80
 8004cec:	f000 f890 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004cf0:	1e03      	subs	r3, r0, #0
 8004cf2:	d001      	beq.n	8004cf8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b004      	add	sp, #16
 8004d00:	bdb0      	pop	{r4, r5, r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	80002000 	.word	0x80002000

08004d08 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d08:	b5b0      	push	{r4, r5, r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	000c      	movs	r4, r1
 8004d12:	0010      	movs	r0, r2
 8004d14:	0019      	movs	r1, r3
 8004d16:	250a      	movs	r5, #10
 8004d18:	197b      	adds	r3, r7, r5
 8004d1a:	1c22      	adds	r2, r4, #0
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	2308      	movs	r3, #8
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	1c02      	adds	r2, r0, #0
 8004d24:	801a      	strh	r2, [r3, #0]
 8004d26:	1dbb      	adds	r3, r7, #6
 8004d28:	1c0a      	adds	r2, r1, #0
 8004d2a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004d2c:	1dbb      	adds	r3, r7, #6
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	197b      	adds	r3, r7, r5
 8004d34:	8819      	ldrh	r1, [r3, #0]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <I2C_RequestMemoryRead+0xc0>)
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f000 f987 	bl	8005050 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d44:	6a39      	ldr	r1, [r7, #32]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f000 f8a0 	bl	8004e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8004d4e:	1e03      	subs	r3, r0, #0
 8004d50:	d001      	beq.n	8004d56 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e033      	b.n	8004dbe <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d56:	1dbb      	adds	r3, r7, #6
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d107      	bne.n	8004d6e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d5e:	2308      	movs	r3, #8
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d6c:	e019      	b.n	8004da2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d6e:	2308      	movs	r3, #8
 8004d70:	18fb      	adds	r3, r7, r3
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	0a1b      	lsrs	r3, r3, #8
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d82:	6a39      	ldr	r1, [r7, #32]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	0018      	movs	r0, r3
 8004d88:	f000 f881 	bl	8004e8e <I2C_WaitOnTXISFlagUntilTimeout>
 8004d8c:	1e03      	subs	r3, r0, #0
 8004d8e:	d001      	beq.n	8004d94 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e014      	b.n	8004dbe <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d94:	2308      	movs	r3, #8
 8004d96:	18fb      	adds	r3, r7, r3
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004da2:	6a3a      	ldr	r2, [r7, #32]
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	0013      	movs	r3, r2
 8004dac:	2200      	movs	r2, #0
 8004dae:	2140      	movs	r1, #64	; 0x40
 8004db0:	f000 f82e 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004db4:	1e03      	subs	r3, r0, #0
 8004db6:	d001      	beq.n	8004dbc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b004      	add	sp, #16
 8004dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8004dc6:	46c0      	nop			; (mov r8, r8)
 8004dc8:	80002000 	.word	0x80002000

08004dcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d103      	bne.n	8004dea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2200      	movs	r2, #0
 8004de8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	2201      	movs	r2, #1
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d007      	beq.n	8004e08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2101      	movs	r1, #1
 8004e04:	430a      	orrs	r2, r1
 8004e06:	619a      	str	r2, [r3, #24]
  }
}
 8004e08:	46c0      	nop			; (mov r8, r8)
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b002      	add	sp, #8
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	1dfb      	adds	r3, r7, #7
 8004e1e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e20:	e021      	b.n	8004e66 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	3301      	adds	r3, #1
 8004e26:	d01e      	beq.n	8004e66 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e28:	f7ff f98e 	bl	8004148 <HAL_GetTick>
 8004e2c:	0002      	movs	r2, r0
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d302      	bcc.n	8004e3e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d113      	bne.n	8004e66 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e42:	2220      	movs	r2, #32
 8004e44:	431a      	orrs	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2241      	movs	r2, #65	; 0x41
 8004e4e:	2120      	movs	r1, #32
 8004e50:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2242      	movs	r2, #66	; 0x42
 8004e56:	2100      	movs	r1, #0
 8004e58:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2240      	movs	r2, #64	; 0x40
 8004e5e:	2100      	movs	r1, #0
 8004e60:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e00f      	b.n	8004e86 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	425a      	negs	r2, r3
 8004e76:	4153      	adcs	r3, r2
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	001a      	movs	r2, r3
 8004e7c:	1dfb      	adds	r3, r7, #7
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d0ce      	beq.n	8004e22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b004      	add	sp, #16
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b084      	sub	sp, #16
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	60f8      	str	r0, [r7, #12]
 8004e96:	60b9      	str	r1, [r7, #8]
 8004e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e9a:	e02b      	b.n	8004ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	f000 f86e 	bl	8004f84 <I2C_IsAcknowledgeFailed>
 8004ea8:	1e03      	subs	r3, r0, #0
 8004eaa:	d001      	beq.n	8004eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e029      	b.n	8004f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	d01e      	beq.n	8004ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb6:	f7ff f947 	bl	8004148 <HAL_GetTick>
 8004eba:	0002      	movs	r2, r0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d302      	bcc.n	8004ecc <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d113      	bne.n	8004ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed0:	2220      	movs	r2, #32
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2241      	movs	r2, #65	; 0x41
 8004edc:	2120      	movs	r1, #32
 8004ede:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2242      	movs	r2, #66	; 0x42
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2240      	movs	r2, #64	; 0x40
 8004eec:	2100      	movs	r1, #0
 8004eee:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e007      	b.n	8004f04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2202      	movs	r2, #2
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d1cc      	bne.n	8004e9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f18:	e028      	b.n	8004f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	0018      	movs	r0, r3
 8004f22:	f000 f82f 	bl	8004f84 <I2C_IsAcknowledgeFailed>
 8004f26:	1e03      	subs	r3, r0, #0
 8004f28:	d001      	beq.n	8004f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e026      	b.n	8004f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7ff f90b 	bl	8004148 <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d113      	bne.n	8004f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	2220      	movs	r2, #32
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2241      	movs	r2, #65	; 0x41
 8004f54:	2120      	movs	r1, #32
 8004f56:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2242      	movs	r2, #66	; 0x42
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2240      	movs	r2, #64	; 0x40
 8004f64:	2100      	movs	r1, #0
 8004f66:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e007      	b.n	8004f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2220      	movs	r2, #32
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b20      	cmp	r3, #32
 8004f78:	d1cf      	bne.n	8004f1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b004      	add	sp, #16
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2210      	movs	r2, #16
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b10      	cmp	r3, #16
 8004f9c:	d151      	bne.n	8005042 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f9e:	e021      	b.n	8004fe4 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	d01e      	beq.n	8004fe4 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa6:	f7ff f8cf 	bl	8004148 <HAL_GetTick>
 8004faa:	0002      	movs	r2, r0
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d302      	bcc.n	8004fbc <I2C_IsAcknowledgeFailed+0x38>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d113      	bne.n	8004fe4 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2241      	movs	r2, #65	; 0x41
 8004fcc:	2120      	movs	r1, #32
 8004fce:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2242      	movs	r2, #66	; 0x42
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2240      	movs	r2, #64	; 0x40
 8004fdc:	2100      	movs	r1, #0
 8004fde:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e02f      	b.n	8005044 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2220      	movs	r2, #32
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d1d6      	bne.n	8004fa0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2220      	movs	r2, #32
 8005000:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	0018      	movs	r0, r3
 8005006:	f7ff fee1 	bl	8004dcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	490d      	ldr	r1, [pc, #52]	; (800504c <I2C_IsAcknowledgeFailed+0xc8>)
 8005016:	400a      	ands	r2, r1
 8005018:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501e:	2204      	movs	r2, #4
 8005020:	431a      	orrs	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2241      	movs	r2, #65	; 0x41
 800502a:	2120      	movs	r1, #32
 800502c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2242      	movs	r2, #66	; 0x42
 8005032:	2100      	movs	r1, #0
 8005034:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2240      	movs	r2, #64	; 0x40
 800503a:	2100      	movs	r1, #0
 800503c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e000      	b.n	8005044 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	0018      	movs	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	b004      	add	sp, #16
 800504a:	bd80      	pop	{r7, pc}
 800504c:	fe00e800 	.word	0xfe00e800

08005050 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	0008      	movs	r0, r1
 800505a:	0011      	movs	r1, r2
 800505c:	607b      	str	r3, [r7, #4]
 800505e:	240a      	movs	r4, #10
 8005060:	193b      	adds	r3, r7, r4
 8005062:	1c02      	adds	r2, r0, #0
 8005064:	801a      	strh	r2, [r3, #0]
 8005066:	2009      	movs	r0, #9
 8005068:	183b      	adds	r3, r7, r0
 800506a:	1c0a      	adds	r2, r1, #0
 800506c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	6a3a      	ldr	r2, [r7, #32]
 8005076:	0d51      	lsrs	r1, r2, #21
 8005078:	2280      	movs	r2, #128	; 0x80
 800507a:	00d2      	lsls	r2, r2, #3
 800507c:	400a      	ands	r2, r1
 800507e:	490e      	ldr	r1, [pc, #56]	; (80050b8 <I2C_TransferConfig+0x68>)
 8005080:	430a      	orrs	r2, r1
 8005082:	43d2      	mvns	r2, r2
 8005084:	401a      	ands	r2, r3
 8005086:	0011      	movs	r1, r2
 8005088:	193b      	adds	r3, r7, r4
 800508a:	881b      	ldrh	r3, [r3, #0]
 800508c:	059b      	lsls	r3, r3, #22
 800508e:	0d9a      	lsrs	r2, r3, #22
 8005090:	183b      	adds	r3, r7, r0
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	0418      	lsls	r0, r3, #16
 8005096:	23ff      	movs	r3, #255	; 0xff
 8005098:	041b      	lsls	r3, r3, #16
 800509a:	4003      	ands	r3, r0
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	431a      	orrs	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	46bd      	mov	sp, r7
 80050b2:	b005      	add	sp, #20
 80050b4:	bd90      	pop	{r4, r7, pc}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	03ff63ff 	.word	0x03ff63ff

080050bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2241      	movs	r2, #65	; 0x41
 80050ca:	5c9b      	ldrb	r3, [r3, r2]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	2b20      	cmp	r3, #32
 80050d0:	d138      	bne.n	8005144 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2240      	movs	r2, #64	; 0x40
 80050d6:	5c9b      	ldrb	r3, [r3, r2]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80050dc:	2302      	movs	r3, #2
 80050de:	e032      	b.n	8005146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2240      	movs	r2, #64	; 0x40
 80050e4:	2101      	movs	r1, #1
 80050e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2241      	movs	r2, #65	; 0x41
 80050ec:	2124      	movs	r1, #36	; 0x24
 80050ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2101      	movs	r1, #1
 80050fc:	438a      	bics	r2, r1
 80050fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4911      	ldr	r1, [pc, #68]	; (8005150 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800510c:	400a      	ands	r2, r1
 800510e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6819      	ldr	r1, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2101      	movs	r1, #1
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2241      	movs	r2, #65	; 0x41
 8005134:	2120      	movs	r1, #32
 8005136:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2240      	movs	r2, #64	; 0x40
 800513c:	2100      	movs	r1, #0
 800513e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005140:	2300      	movs	r3, #0
 8005142:	e000      	b.n	8005146 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005144:	2302      	movs	r3, #2
  }
}
 8005146:	0018      	movs	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	b002      	add	sp, #8
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	ffffefff 	.word	0xffffefff

08005154 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2241      	movs	r2, #65	; 0x41
 8005162:	5c9b      	ldrb	r3, [r3, r2]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b20      	cmp	r3, #32
 8005168:	d139      	bne.n	80051de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2240      	movs	r2, #64	; 0x40
 800516e:	5c9b      	ldrb	r3, [r3, r2]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005174:	2302      	movs	r3, #2
 8005176:	e033      	b.n	80051e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2240      	movs	r2, #64	; 0x40
 800517c:	2101      	movs	r1, #1
 800517e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2241      	movs	r2, #65	; 0x41
 8005184:	2124      	movs	r1, #36	; 0x24
 8005186:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2101      	movs	r1, #1
 8005194:	438a      	bics	r2, r1
 8005196:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a11      	ldr	r2, [pc, #68]	; (80051e8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2101      	movs	r1, #1
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2241      	movs	r2, #65	; 0x41
 80051ce:	2120      	movs	r1, #32
 80051d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2240      	movs	r2, #64	; 0x40
 80051d6:	2100      	movs	r1, #0
 80051d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80051da:	2300      	movs	r3, #0
 80051dc:	e000      	b.n	80051e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80051de:	2302      	movs	r3, #2
  }
}
 80051e0:	0018      	movs	r0, r3
 80051e2:	46bd      	mov	sp, r7
 80051e4:	b004      	add	sp, #16
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	fffff0ff 	.word	0xfffff0ff

080051ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d102      	bne.n	8005200 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	f000 fb76 	bl	80058ec <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2201      	movs	r2, #1
 8005206:	4013      	ands	r3, r2
 8005208:	d100      	bne.n	800520c <HAL_RCC_OscConfig+0x20>
 800520a:	e08e      	b.n	800532a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800520c:	4bc5      	ldr	r3, [pc, #788]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	220c      	movs	r2, #12
 8005212:	4013      	ands	r3, r2
 8005214:	2b04      	cmp	r3, #4
 8005216:	d00e      	beq.n	8005236 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005218:	4bc2      	ldr	r3, [pc, #776]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	220c      	movs	r2, #12
 800521e:	4013      	ands	r3, r2
 8005220:	2b08      	cmp	r3, #8
 8005222:	d117      	bne.n	8005254 <HAL_RCC_OscConfig+0x68>
 8005224:	4bbf      	ldr	r3, [pc, #764]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005226:	685a      	ldr	r2, [r3, #4]
 8005228:	23c0      	movs	r3, #192	; 0xc0
 800522a:	025b      	lsls	r3, r3, #9
 800522c:	401a      	ands	r2, r3
 800522e:	2380      	movs	r3, #128	; 0x80
 8005230:	025b      	lsls	r3, r3, #9
 8005232:	429a      	cmp	r2, r3
 8005234:	d10e      	bne.n	8005254 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005236:	4bbb      	ldr	r3, [pc, #748]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	2380      	movs	r3, #128	; 0x80
 800523c:	029b      	lsls	r3, r3, #10
 800523e:	4013      	ands	r3, r2
 8005240:	d100      	bne.n	8005244 <HAL_RCC_OscConfig+0x58>
 8005242:	e071      	b.n	8005328 <HAL_RCC_OscConfig+0x13c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d000      	beq.n	800524e <HAL_RCC_OscConfig+0x62>
 800524c:	e06c      	b.n	8005328 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f000 fb4c 	bl	80058ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d107      	bne.n	800526c <HAL_RCC_OscConfig+0x80>
 800525c:	4bb1      	ldr	r3, [pc, #708]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	4bb0      	ldr	r3, [pc, #704]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005262:	2180      	movs	r1, #128	; 0x80
 8005264:	0249      	lsls	r1, r1, #9
 8005266:	430a      	orrs	r2, r1
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e02f      	b.n	80052cc <HAL_RCC_OscConfig+0xe0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10c      	bne.n	800528e <HAL_RCC_OscConfig+0xa2>
 8005274:	4bab      	ldr	r3, [pc, #684]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4baa      	ldr	r3, [pc, #680]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800527a:	49ab      	ldr	r1, [pc, #684]	; (8005528 <HAL_RCC_OscConfig+0x33c>)
 800527c:	400a      	ands	r2, r1
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	4ba8      	ldr	r3, [pc, #672]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4ba7      	ldr	r3, [pc, #668]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005286:	49a9      	ldr	r1, [pc, #676]	; (800552c <HAL_RCC_OscConfig+0x340>)
 8005288:	400a      	ands	r2, r1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e01e      	b.n	80052cc <HAL_RCC_OscConfig+0xe0>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b05      	cmp	r3, #5
 8005294:	d10e      	bne.n	80052b4 <HAL_RCC_OscConfig+0xc8>
 8005296:	4ba3      	ldr	r3, [pc, #652]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4ba2      	ldr	r3, [pc, #648]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800529c:	2180      	movs	r1, #128	; 0x80
 800529e:	02c9      	lsls	r1, r1, #11
 80052a0:	430a      	orrs	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	4b9f      	ldr	r3, [pc, #636]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4b9e      	ldr	r3, [pc, #632]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80052aa:	2180      	movs	r1, #128	; 0x80
 80052ac:	0249      	lsls	r1, r1, #9
 80052ae:	430a      	orrs	r2, r1
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e00b      	b.n	80052cc <HAL_RCC_OscConfig+0xe0>
 80052b4:	4b9b      	ldr	r3, [pc, #620]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b9a      	ldr	r3, [pc, #616]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80052ba:	499b      	ldr	r1, [pc, #620]	; (8005528 <HAL_RCC_OscConfig+0x33c>)
 80052bc:	400a      	ands	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	4b98      	ldr	r3, [pc, #608]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	4b97      	ldr	r3, [pc, #604]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80052c6:	4999      	ldr	r1, [pc, #612]	; (800552c <HAL_RCC_OscConfig+0x340>)
 80052c8:	400a      	ands	r2, r1
 80052ca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d014      	beq.n	80052fe <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d4:	f7fe ff38 	bl	8004148 <HAL_GetTick>
 80052d8:	0003      	movs	r3, r0
 80052da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052de:	f7fe ff33 	bl	8004148 <HAL_GetTick>
 80052e2:	0002      	movs	r2, r0
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b64      	cmp	r3, #100	; 0x64
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e2fd      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052f0:	4b8c      	ldr	r3, [pc, #560]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	029b      	lsls	r3, r3, #10
 80052f8:	4013      	ands	r3, r2
 80052fa:	d0f0      	beq.n	80052de <HAL_RCC_OscConfig+0xf2>
 80052fc:	e015      	b.n	800532a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052fe:	f7fe ff23 	bl	8004148 <HAL_GetTick>
 8005302:	0003      	movs	r3, r0
 8005304:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005308:	f7fe ff1e 	bl	8004148 <HAL_GetTick>
 800530c:	0002      	movs	r2, r0
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b64      	cmp	r3, #100	; 0x64
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e2e8      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800531a:	4b82      	ldr	r3, [pc, #520]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	2380      	movs	r3, #128	; 0x80
 8005320:	029b      	lsls	r3, r3, #10
 8005322:	4013      	ands	r3, r2
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x11c>
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005328:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2202      	movs	r2, #2
 8005330:	4013      	ands	r3, r2
 8005332:	d100      	bne.n	8005336 <HAL_RCC_OscConfig+0x14a>
 8005334:	e06c      	b.n	8005410 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005336:	4b7b      	ldr	r3, [pc, #492]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	220c      	movs	r2, #12
 800533c:	4013      	ands	r3, r2
 800533e:	d00e      	beq.n	800535e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005340:	4b78      	ldr	r3, [pc, #480]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	220c      	movs	r2, #12
 8005346:	4013      	ands	r3, r2
 8005348:	2b08      	cmp	r3, #8
 800534a:	d11f      	bne.n	800538c <HAL_RCC_OscConfig+0x1a0>
 800534c:	4b75      	ldr	r3, [pc, #468]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	23c0      	movs	r3, #192	; 0xc0
 8005352:	025b      	lsls	r3, r3, #9
 8005354:	401a      	ands	r2, r3
 8005356:	2380      	movs	r3, #128	; 0x80
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	429a      	cmp	r2, r3
 800535c:	d116      	bne.n	800538c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800535e:	4b71      	ldr	r3, [pc, #452]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2202      	movs	r2, #2
 8005364:	4013      	ands	r3, r2
 8005366:	d005      	beq.n	8005374 <HAL_RCC_OscConfig+0x188>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d001      	beq.n	8005374 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e2bb      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005374:	4b6b      	ldr	r3, [pc, #428]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	22f8      	movs	r2, #248	; 0xf8
 800537a:	4393      	bics	r3, r2
 800537c:	0019      	movs	r1, r3
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	00da      	lsls	r2, r3, #3
 8005384:	4b67      	ldr	r3, [pc, #412]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005386:	430a      	orrs	r2, r1
 8005388:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800538a:	e041      	b.n	8005410 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d024      	beq.n	80053de <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005394:	4b63      	ldr	r3, [pc, #396]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	4b62      	ldr	r3, [pc, #392]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800539a:	2101      	movs	r1, #1
 800539c:	430a      	orrs	r2, r1
 800539e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a0:	f7fe fed2 	bl	8004148 <HAL_GetTick>
 80053a4:	0003      	movs	r3, r0
 80053a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053aa:	f7fe fecd 	bl	8004148 <HAL_GetTick>
 80053ae:	0002      	movs	r2, r0
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e297      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053bc:	4b59      	ldr	r3, [pc, #356]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2202      	movs	r2, #2
 80053c2:	4013      	ands	r3, r2
 80053c4:	d0f1      	beq.n	80053aa <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c6:	4b57      	ldr	r3, [pc, #348]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	22f8      	movs	r2, #248	; 0xf8
 80053cc:	4393      	bics	r3, r2
 80053ce:	0019      	movs	r1, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	00da      	lsls	r2, r3, #3
 80053d6:	4b53      	ldr	r3, [pc, #332]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80053d8:	430a      	orrs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]
 80053dc:	e018      	b.n	8005410 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053de:	4b51      	ldr	r3, [pc, #324]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b50      	ldr	r3, [pc, #320]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80053e4:	2101      	movs	r1, #1
 80053e6:	438a      	bics	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ea:	f7fe fead 	bl	8004148 <HAL_GetTick>
 80053ee:	0003      	movs	r3, r0
 80053f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053f2:	e008      	b.n	8005406 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053f4:	f7fe fea8 	bl	8004148 <HAL_GetTick>
 80053f8:	0002      	movs	r2, r0
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d901      	bls.n	8005406 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e272      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005406:	4b47      	ldr	r3, [pc, #284]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2202      	movs	r2, #2
 800540c:	4013      	ands	r3, r2
 800540e:	d1f1      	bne.n	80053f4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2208      	movs	r2, #8
 8005416:	4013      	ands	r3, r2
 8005418:	d036      	beq.n	8005488 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d019      	beq.n	8005456 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005422:	4b40      	ldr	r3, [pc, #256]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005426:	4b3f      	ldr	r3, [pc, #252]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005428:	2101      	movs	r1, #1
 800542a:	430a      	orrs	r2, r1
 800542c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800542e:	f7fe fe8b 	bl	8004148 <HAL_GetTick>
 8005432:	0003      	movs	r3, r0
 8005434:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005438:	f7fe fe86 	bl	8004148 <HAL_GetTick>
 800543c:	0002      	movs	r2, r0
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e250      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800544a:	4b36      	ldr	r3, [pc, #216]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2202      	movs	r2, #2
 8005450:	4013      	ands	r3, r2
 8005452:	d0f1      	beq.n	8005438 <HAL_RCC_OscConfig+0x24c>
 8005454:	e018      	b.n	8005488 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005456:	4b33      	ldr	r3, [pc, #204]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800545a:	4b32      	ldr	r3, [pc, #200]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800545c:	2101      	movs	r1, #1
 800545e:	438a      	bics	r2, r1
 8005460:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005462:	f7fe fe71 	bl	8004148 <HAL_GetTick>
 8005466:	0003      	movs	r3, r0
 8005468:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800546c:	f7fe fe6c 	bl	8004148 <HAL_GetTick>
 8005470:	0002      	movs	r2, r0
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e236      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005482:	2202      	movs	r2, #2
 8005484:	4013      	ands	r3, r2
 8005486:	d1f1      	bne.n	800546c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2204      	movs	r2, #4
 800548e:	4013      	ands	r3, r2
 8005490:	d100      	bne.n	8005494 <HAL_RCC_OscConfig+0x2a8>
 8005492:	e0b5      	b.n	8005600 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005494:	201f      	movs	r0, #31
 8005496:	183b      	adds	r3, r7, r0
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800549c:	4b21      	ldr	r3, [pc, #132]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800549e:	69da      	ldr	r2, [r3, #28]
 80054a0:	2380      	movs	r3, #128	; 0x80
 80054a2:	055b      	lsls	r3, r3, #21
 80054a4:	4013      	ands	r3, r2
 80054a6:	d110      	bne.n	80054ca <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a8:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80054aa:	69da      	ldr	r2, [r3, #28]
 80054ac:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80054ae:	2180      	movs	r1, #128	; 0x80
 80054b0:	0549      	lsls	r1, r1, #21
 80054b2:	430a      	orrs	r2, r1
 80054b4:	61da      	str	r2, [r3, #28]
 80054b6:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 80054b8:	69da      	ldr	r2, [r3, #28]
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	055b      	lsls	r3, r3, #21
 80054be:	4013      	ands	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054c4:	183b      	adds	r3, r7, r0
 80054c6:	2201      	movs	r2, #1
 80054c8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ca:	4b19      	ldr	r3, [pc, #100]	; (8005530 <HAL_RCC_OscConfig+0x344>)
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	4013      	ands	r3, r2
 80054d4:	d11a      	bne.n	800550c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054d6:	4b16      	ldr	r3, [pc, #88]	; (8005530 <HAL_RCC_OscConfig+0x344>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <HAL_RCC_OscConfig+0x344>)
 80054dc:	2180      	movs	r1, #128	; 0x80
 80054de:	0049      	lsls	r1, r1, #1
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054e4:	f7fe fe30 	bl	8004148 <HAL_GetTick>
 80054e8:	0003      	movs	r3, r0
 80054ea:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ee:	f7fe fe2b 	bl	8004148 <HAL_GetTick>
 80054f2:	0002      	movs	r2, r0
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b64      	cmp	r3, #100	; 0x64
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e1f5      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <HAL_RCC_OscConfig+0x344>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	2380      	movs	r3, #128	; 0x80
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	4013      	ands	r3, r2
 800550a:	d0f0      	beq.n	80054ee <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d10f      	bne.n	8005534 <HAL_RCC_OscConfig+0x348>
 8005514:	4b03      	ldr	r3, [pc, #12]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 8005516:	6a1a      	ldr	r2, [r3, #32]
 8005518:	4b02      	ldr	r3, [pc, #8]	; (8005524 <HAL_RCC_OscConfig+0x338>)
 800551a:	2101      	movs	r1, #1
 800551c:	430a      	orrs	r2, r1
 800551e:	621a      	str	r2, [r3, #32]
 8005520:	e036      	b.n	8005590 <HAL_RCC_OscConfig+0x3a4>
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	40021000 	.word	0x40021000
 8005528:	fffeffff 	.word	0xfffeffff
 800552c:	fffbffff 	.word	0xfffbffff
 8005530:	40007000 	.word	0x40007000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10c      	bne.n	8005556 <HAL_RCC_OscConfig+0x36a>
 800553c:	4bca      	ldr	r3, [pc, #808]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	4bc9      	ldr	r3, [pc, #804]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005542:	2101      	movs	r1, #1
 8005544:	438a      	bics	r2, r1
 8005546:	621a      	str	r2, [r3, #32]
 8005548:	4bc7      	ldr	r3, [pc, #796]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800554a:	6a1a      	ldr	r2, [r3, #32]
 800554c:	4bc6      	ldr	r3, [pc, #792]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800554e:	2104      	movs	r1, #4
 8005550:	438a      	bics	r2, r1
 8005552:	621a      	str	r2, [r3, #32]
 8005554:	e01c      	b.n	8005590 <HAL_RCC_OscConfig+0x3a4>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b05      	cmp	r3, #5
 800555c:	d10c      	bne.n	8005578 <HAL_RCC_OscConfig+0x38c>
 800555e:	4bc2      	ldr	r3, [pc, #776]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005560:	6a1a      	ldr	r2, [r3, #32]
 8005562:	4bc1      	ldr	r3, [pc, #772]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005564:	2104      	movs	r1, #4
 8005566:	430a      	orrs	r2, r1
 8005568:	621a      	str	r2, [r3, #32]
 800556a:	4bbf      	ldr	r3, [pc, #764]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	4bbe      	ldr	r3, [pc, #760]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005570:	2101      	movs	r1, #1
 8005572:	430a      	orrs	r2, r1
 8005574:	621a      	str	r2, [r3, #32]
 8005576:	e00b      	b.n	8005590 <HAL_RCC_OscConfig+0x3a4>
 8005578:	4bbb      	ldr	r3, [pc, #748]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	4bba      	ldr	r3, [pc, #744]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800557e:	2101      	movs	r1, #1
 8005580:	438a      	bics	r2, r1
 8005582:	621a      	str	r2, [r3, #32]
 8005584:	4bb8      	ldr	r3, [pc, #736]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005586:	6a1a      	ldr	r2, [r3, #32]
 8005588:	4bb7      	ldr	r3, [pc, #732]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800558a:	2104      	movs	r1, #4
 800558c:	438a      	bics	r2, r1
 800558e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d014      	beq.n	80055c2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005598:	f7fe fdd6 	bl	8004148 <HAL_GetTick>
 800559c:	0003      	movs	r3, r0
 800559e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a0:	e009      	b.n	80055b6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a2:	f7fe fdd1 	bl	8004148 <HAL_GetTick>
 80055a6:	0002      	movs	r2, r0
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	4aaf      	ldr	r2, [pc, #700]	; (800586c <HAL_RCC_OscConfig+0x680>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e19a      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b6:	4bac      	ldr	r3, [pc, #688]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	2202      	movs	r2, #2
 80055bc:	4013      	ands	r3, r2
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x3b6>
 80055c0:	e013      	b.n	80055ea <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c2:	f7fe fdc1 	bl	8004148 <HAL_GetTick>
 80055c6:	0003      	movs	r3, r0
 80055c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ca:	e009      	b.n	80055e0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055cc:	f7fe fdbc 	bl	8004148 <HAL_GetTick>
 80055d0:	0002      	movs	r2, r0
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	4aa5      	ldr	r2, [pc, #660]	; (800586c <HAL_RCC_OscConfig+0x680>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e185      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055e0:	4ba1      	ldr	r3, [pc, #644]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80055e2:	6a1b      	ldr	r3, [r3, #32]
 80055e4:	2202      	movs	r2, #2
 80055e6:	4013      	ands	r3, r2
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055ea:	231f      	movs	r3, #31
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d105      	bne.n	8005600 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055f4:	4b9c      	ldr	r3, [pc, #624]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80055f6:	69da      	ldr	r2, [r3, #28]
 80055f8:	4b9b      	ldr	r3, [pc, #620]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80055fa:	499d      	ldr	r1, [pc, #628]	; (8005870 <HAL_RCC_OscConfig+0x684>)
 80055fc:	400a      	ands	r2, r1
 80055fe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2210      	movs	r2, #16
 8005606:	4013      	ands	r3, r2
 8005608:	d063      	beq.n	80056d2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d12a      	bne.n	8005668 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005612:	4b95      	ldr	r3, [pc, #596]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005616:	4b94      	ldr	r3, [pc, #592]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005618:	2104      	movs	r1, #4
 800561a:	430a      	orrs	r2, r1
 800561c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800561e:	4b92      	ldr	r3, [pc, #584]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005622:	4b91      	ldr	r3, [pc, #580]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005624:	2101      	movs	r1, #1
 8005626:	430a      	orrs	r2, r1
 8005628:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800562a:	f7fe fd8d 	bl	8004148 <HAL_GetTick>
 800562e:	0003      	movs	r3, r0
 8005630:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005632:	e008      	b.n	8005646 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005634:	f7fe fd88 	bl	8004148 <HAL_GetTick>
 8005638:	0002      	movs	r2, r0
 800563a:	69bb      	ldr	r3, [r7, #24]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d901      	bls.n	8005646 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e152      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005646:	4b88      	ldr	r3, [pc, #544]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800564a:	2202      	movs	r2, #2
 800564c:	4013      	ands	r3, r2
 800564e:	d0f1      	beq.n	8005634 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005650:	4b85      	ldr	r3, [pc, #532]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005654:	22f8      	movs	r2, #248	; 0xf8
 8005656:	4393      	bics	r3, r2
 8005658:	0019      	movs	r1, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	00da      	lsls	r2, r3, #3
 8005660:	4b81      	ldr	r3, [pc, #516]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005662:	430a      	orrs	r2, r1
 8005664:	635a      	str	r2, [r3, #52]	; 0x34
 8005666:	e034      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	3305      	adds	r3, #5
 800566e:	d111      	bne.n	8005694 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005670:	4b7d      	ldr	r3, [pc, #500]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005674:	4b7c      	ldr	r3, [pc, #496]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005676:	2104      	movs	r1, #4
 8005678:	438a      	bics	r2, r1
 800567a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800567c:	4b7a      	ldr	r3, [pc, #488]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800567e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005680:	22f8      	movs	r2, #248	; 0xf8
 8005682:	4393      	bics	r3, r2
 8005684:	0019      	movs	r1, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	00da      	lsls	r2, r3, #3
 800568c:	4b76      	ldr	r3, [pc, #472]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800568e:	430a      	orrs	r2, r1
 8005690:	635a      	str	r2, [r3, #52]	; 0x34
 8005692:	e01e      	b.n	80056d2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005694:	4b74      	ldr	r3, [pc, #464]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005696:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005698:	4b73      	ldr	r3, [pc, #460]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800569a:	2104      	movs	r1, #4
 800569c:	430a      	orrs	r2, r1
 800569e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80056a0:	4b71      	ldr	r3, [pc, #452]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80056a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a4:	4b70      	ldr	r3, [pc, #448]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80056a6:	2101      	movs	r1, #1
 80056a8:	438a      	bics	r2, r1
 80056aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ac:	f7fe fd4c 	bl	8004148 <HAL_GetTick>
 80056b0:	0003      	movs	r3, r0
 80056b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80056b6:	f7fe fd47 	bl	8004148 <HAL_GetTick>
 80056ba:	0002      	movs	r2, r0
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e111      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80056c8:	4b67      	ldr	r3, [pc, #412]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	2202      	movs	r2, #2
 80056ce:	4013      	ands	r3, r2
 80056d0:	d1f1      	bne.n	80056b6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2220      	movs	r2, #32
 80056d8:	4013      	ands	r3, r2
 80056da:	d05c      	beq.n	8005796 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80056dc:	4b62      	ldr	r3, [pc, #392]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	220c      	movs	r2, #12
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b0c      	cmp	r3, #12
 80056e6:	d00e      	beq.n	8005706 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80056e8:	4b5f      	ldr	r3, [pc, #380]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	220c      	movs	r2, #12
 80056ee:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80056f0:	2b08      	cmp	r3, #8
 80056f2:	d114      	bne.n	800571e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80056f4:	4b5c      	ldr	r3, [pc, #368]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	23c0      	movs	r3, #192	; 0xc0
 80056fa:	025b      	lsls	r3, r3, #9
 80056fc:	401a      	ands	r2, r3
 80056fe:	23c0      	movs	r3, #192	; 0xc0
 8005700:	025b      	lsls	r3, r3, #9
 8005702:	429a      	cmp	r2, r3
 8005704:	d10b      	bne.n	800571e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005706:	4b58      	ldr	r3, [pc, #352]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800570a:	2380      	movs	r3, #128	; 0x80
 800570c:	025b      	lsls	r3, r3, #9
 800570e:	4013      	ands	r3, r2
 8005710:	d040      	beq.n	8005794 <HAL_RCC_OscConfig+0x5a8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d03c      	beq.n	8005794 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0e6      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01b      	beq.n	800575e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005726:	4b50      	ldr	r3, [pc, #320]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800572a:	4b4f      	ldr	r3, [pc, #316]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800572c:	2180      	movs	r1, #128	; 0x80
 800572e:	0249      	lsls	r1, r1, #9
 8005730:	430a      	orrs	r2, r1
 8005732:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005734:	f7fe fd08 	bl	8004148 <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800573e:	f7fe fd03 	bl	8004148 <HAL_GetTick>
 8005742:	0002      	movs	r2, r0
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e0cd      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005750:	4b45      	ldr	r3, [pc, #276]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	025b      	lsls	r3, r3, #9
 8005758:	4013      	ands	r3, r2
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x552>
 800575c:	e01b      	b.n	8005796 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800575e:	4b42      	ldr	r3, [pc, #264]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005762:	4b41      	ldr	r3, [pc, #260]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005764:	4943      	ldr	r1, [pc, #268]	; (8005874 <HAL_RCC_OscConfig+0x688>)
 8005766:	400a      	ands	r2, r1
 8005768:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576a:	f7fe fced 	bl	8004148 <HAL_GetTick>
 800576e:	0003      	movs	r3, r0
 8005770:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005774:	f7fe fce8 	bl	8004148 <HAL_GetTick>
 8005778:	0002      	movs	r2, r0
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e0b2      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005786:	4b38      	ldr	r3, [pc, #224]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005788:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800578a:	2380      	movs	r3, #128	; 0x80
 800578c:	025b      	lsls	r3, r3, #9
 800578e:	4013      	ands	r3, r2
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x588>
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005794:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2b00      	cmp	r3, #0
 800579c:	d100      	bne.n	80057a0 <HAL_RCC_OscConfig+0x5b4>
 800579e:	e0a4      	b.n	80058ea <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057a0:	4b31      	ldr	r3, [pc, #196]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	220c      	movs	r2, #12
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b08      	cmp	r3, #8
 80057aa:	d100      	bne.n	80057ae <HAL_RCC_OscConfig+0x5c2>
 80057ac:	e078      	b.n	80058a0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d14c      	bne.n	8005850 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b6:	4b2c      	ldr	r3, [pc, #176]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b2b      	ldr	r3, [pc, #172]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80057bc:	492e      	ldr	r1, [pc, #184]	; (8005878 <HAL_RCC_OscConfig+0x68c>)
 80057be:	400a      	ands	r2, r1
 80057c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c2:	f7fe fcc1 	bl	8004148 <HAL_GetTick>
 80057c6:	0003      	movs	r3, r0
 80057c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057cc:	f7fe fcbc 	bl	8004148 <HAL_GetTick>
 80057d0:	0002      	movs	r2, r0
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e086      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057de:	4b22      	ldr	r3, [pc, #136]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	2380      	movs	r3, #128	; 0x80
 80057e4:	049b      	lsls	r3, r3, #18
 80057e6:	4013      	ands	r3, r2
 80057e8:	d1f0      	bne.n	80057cc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057ea:	4b1f      	ldr	r3, [pc, #124]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	220f      	movs	r2, #15
 80057f0:	4393      	bics	r3, r2
 80057f2:	0019      	movs	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f8:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 80057fa:	430a      	orrs	r2, r1
 80057fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80057fe:	4b1a      	ldr	r3, [pc, #104]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4a1e      	ldr	r2, [pc, #120]	; (800587c <HAL_RCC_OscConfig+0x690>)
 8005804:	4013      	ands	r3, r2
 8005806:	0019      	movs	r1, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	431a      	orrs	r2, r3
 8005812:	4b15      	ldr	r3, [pc, #84]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005814:	430a      	orrs	r2, r1
 8005816:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005818:	4b13      	ldr	r3, [pc, #76]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b12      	ldr	r3, [pc, #72]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 800581e:	2180      	movs	r1, #128	; 0x80
 8005820:	0449      	lsls	r1, r1, #17
 8005822:	430a      	orrs	r2, r1
 8005824:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005826:	f7fe fc8f 	bl	8004148 <HAL_GetTick>
 800582a:	0003      	movs	r3, r0
 800582c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800582e:	e008      	b.n	8005842 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005830:	f7fe fc8a 	bl	8004148 <HAL_GetTick>
 8005834:	0002      	movs	r2, r0
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	2b02      	cmp	r3, #2
 800583c:	d901      	bls.n	8005842 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e054      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	2380      	movs	r3, #128	; 0x80
 8005848:	049b      	lsls	r3, r3, #18
 800584a:	4013      	ands	r3, r2
 800584c:	d0f0      	beq.n	8005830 <HAL_RCC_OscConfig+0x644>
 800584e:	e04c      	b.n	80058ea <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005850:	4b05      	ldr	r3, [pc, #20]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	4b04      	ldr	r3, [pc, #16]	; (8005868 <HAL_RCC_OscConfig+0x67c>)
 8005856:	4908      	ldr	r1, [pc, #32]	; (8005878 <HAL_RCC_OscConfig+0x68c>)
 8005858:	400a      	ands	r2, r1
 800585a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585c:	f7fe fc74 	bl	8004148 <HAL_GetTick>
 8005860:	0003      	movs	r3, r0
 8005862:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005864:	e015      	b.n	8005892 <HAL_RCC_OscConfig+0x6a6>
 8005866:	46c0      	nop			; (mov r8, r8)
 8005868:	40021000 	.word	0x40021000
 800586c:	00001388 	.word	0x00001388
 8005870:	efffffff 	.word	0xefffffff
 8005874:	fffeffff 	.word	0xfffeffff
 8005878:	feffffff 	.word	0xfeffffff
 800587c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005880:	f7fe fc62 	bl	8004148 <HAL_GetTick>
 8005884:	0002      	movs	r2, r0
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e02c      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005892:	4b18      	ldr	r3, [pc, #96]	; (80058f4 <HAL_RCC_OscConfig+0x708>)
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	2380      	movs	r3, #128	; 0x80
 8005898:	049b      	lsls	r3, r3, #18
 800589a:	4013      	ands	r3, r2
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x694>
 800589e:	e024      	b.n	80058ea <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d101      	bne.n	80058ac <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e01f      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80058ac:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <HAL_RCC_OscConfig+0x708>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <HAL_RCC_OscConfig+0x708>)
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	23c0      	movs	r3, #192	; 0xc0
 80058bc:	025b      	lsls	r3, r3, #9
 80058be:	401a      	ands	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d10e      	bne.n	80058e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	220f      	movs	r2, #15
 80058cc:	401a      	ands	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d107      	bne.n	80058e6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	23f0      	movs	r3, #240	; 0xf0
 80058da:	039b      	lsls	r3, r3, #14
 80058dc:	401a      	ands	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d001      	beq.n	80058ea <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	0018      	movs	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	b008      	add	sp, #32
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40021000 	.word	0x40021000

080058f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0bf      	b.n	8005a8c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800590c:	4b61      	ldr	r3, [pc, #388]	; (8005a94 <HAL_RCC_ClockConfig+0x19c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2201      	movs	r2, #1
 8005912:	4013      	ands	r3, r2
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	429a      	cmp	r2, r3
 8005918:	d911      	bls.n	800593e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800591a:	4b5e      	ldr	r3, [pc, #376]	; (8005a94 <HAL_RCC_ClockConfig+0x19c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2201      	movs	r2, #1
 8005920:	4393      	bics	r3, r2
 8005922:	0019      	movs	r1, r3
 8005924:	4b5b      	ldr	r3, [pc, #364]	; (8005a94 <HAL_RCC_ClockConfig+0x19c>)
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	430a      	orrs	r2, r1
 800592a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800592c:	4b59      	ldr	r3, [pc, #356]	; (8005a94 <HAL_RCC_ClockConfig+0x19c>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2201      	movs	r2, #1
 8005932:	4013      	ands	r3, r2
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d001      	beq.n	800593e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e0a6      	b.n	8005a8c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2202      	movs	r2, #2
 8005944:	4013      	ands	r3, r2
 8005946:	d015      	beq.n	8005974 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2204      	movs	r2, #4
 800594e:	4013      	ands	r3, r2
 8005950:	d006      	beq.n	8005960 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005952:	4b51      	ldr	r3, [pc, #324]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	4b50      	ldr	r3, [pc, #320]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 8005958:	21e0      	movs	r1, #224	; 0xe0
 800595a:	00c9      	lsls	r1, r1, #3
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005960:	4b4d      	ldr	r3, [pc, #308]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	22f0      	movs	r2, #240	; 0xf0
 8005966:	4393      	bics	r3, r2
 8005968:	0019      	movs	r1, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	4b4a      	ldr	r3, [pc, #296]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 8005970:	430a      	orrs	r2, r1
 8005972:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2201      	movs	r2, #1
 800597a:	4013      	ands	r3, r2
 800597c:	d04c      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d107      	bne.n	8005996 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005986:	4b44      	ldr	r3, [pc, #272]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	2380      	movs	r3, #128	; 0x80
 800598c:	029b      	lsls	r3, r3, #10
 800598e:	4013      	ands	r3, r2
 8005990:	d120      	bne.n	80059d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e07a      	b.n	8005a8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	2b02      	cmp	r3, #2
 800599c:	d107      	bne.n	80059ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800599e:	4b3e      	ldr	r3, [pc, #248]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	2380      	movs	r3, #128	; 0x80
 80059a4:	049b      	lsls	r3, r3, #18
 80059a6:	4013      	ands	r3, r2
 80059a8:	d114      	bne.n	80059d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e06e      	b.n	8005a8c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d107      	bne.n	80059c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80059b6:	4b38      	ldr	r3, [pc, #224]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 80059b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ba:	2380      	movs	r3, #128	; 0x80
 80059bc:	025b      	lsls	r3, r3, #9
 80059be:	4013      	ands	r3, r2
 80059c0:	d108      	bne.n	80059d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e062      	b.n	8005a8c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c6:	4b34      	ldr	r3, [pc, #208]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2202      	movs	r2, #2
 80059cc:	4013      	ands	r3, r2
 80059ce:	d101      	bne.n	80059d4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e05b      	b.n	8005a8c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059d4:	4b30      	ldr	r3, [pc, #192]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2203      	movs	r2, #3
 80059da:	4393      	bics	r3, r2
 80059dc:	0019      	movs	r1, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 80059e4:	430a      	orrs	r2, r1
 80059e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059e8:	f7fe fbae 	bl	8004148 <HAL_GetTick>
 80059ec:	0003      	movs	r3, r0
 80059ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059f0:	e009      	b.n	8005a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f2:	f7fe fba9 	bl	8004148 <HAL_GetTick>
 80059f6:	0002      	movs	r2, r0
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	4a27      	ldr	r2, [pc, #156]	; (8005a9c <HAL_RCC_ClockConfig+0x1a4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d901      	bls.n	8005a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e042      	b.n	8005a8c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	220c      	movs	r2, #12
 8005a0c:	401a      	ands	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d1ec      	bne.n	80059f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a18:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <HAL_RCC_ClockConfig+0x19c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	4013      	ands	r3, r2
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d211      	bcs.n	8005a4a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a26:	4b1b      	ldr	r3, [pc, #108]	; (8005a94 <HAL_RCC_ClockConfig+0x19c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	4393      	bics	r3, r2
 8005a2e:	0019      	movs	r1, r3
 8005a30:	4b18      	ldr	r3, [pc, #96]	; (8005a94 <HAL_RCC_ClockConfig+0x19c>)
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	430a      	orrs	r2, r1
 8005a36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a38:	4b16      	ldr	r3, [pc, #88]	; (8005a94 <HAL_RCC_ClockConfig+0x19c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	4013      	ands	r3, r2
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d001      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e020      	b.n	8005a8c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	4013      	ands	r3, r2
 8005a52:	d009      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a54:	4b10      	ldr	r3, [pc, #64]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	4a11      	ldr	r2, [pc, #68]	; (8005aa0 <HAL_RCC_ClockConfig+0x1a8>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 8005a64:	430a      	orrs	r2, r1
 8005a66:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a68:	f000 f820 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8005a6c:	0001      	movs	r1, r0
 8005a6e:	4b0a      	ldr	r3, [pc, #40]	; (8005a98 <HAL_RCC_ClockConfig+0x1a0>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	091b      	lsrs	r3, r3, #4
 8005a74:	220f      	movs	r2, #15
 8005a76:	4013      	ands	r3, r2
 8005a78:	4a0a      	ldr	r2, [pc, #40]	; (8005aa4 <HAL_RCC_ClockConfig+0x1ac>)
 8005a7a:	5cd3      	ldrb	r3, [r2, r3]
 8005a7c:	000a      	movs	r2, r1
 8005a7e:	40da      	lsrs	r2, r3
 8005a80:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <HAL_RCC_ClockConfig+0x1b0>)
 8005a82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005a84:	2000      	movs	r0, #0
 8005a86:	f7fe fb19 	bl	80040bc <HAL_InitTick>
  
  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b004      	add	sp, #16
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40022000 	.word	0x40022000
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	00001388 	.word	0x00001388
 8005aa0:	fffff8ff 	.word	0xfffff8ff
 8005aa4:	080079e8 	.word	0x080079e8
 8005aa8:	20000010 	.word	0x20000010

08005aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aac:	b590      	push	{r4, r7, lr}
 8005aae:	b08f      	sub	sp, #60	; 0x3c
 8005ab0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005ab2:	2314      	movs	r3, #20
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	4a38      	ldr	r2, [pc, #224]	; (8005b98 <HAL_RCC_GetSysClockFreq+0xec>)
 8005ab8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005aba:	c313      	stmia	r3!, {r0, r1, r4}
 8005abc:	6812      	ldr	r2, [r2, #0]
 8005abe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005ac0:	1d3b      	adds	r3, r7, #4
 8005ac2:	4a36      	ldr	r2, [pc, #216]	; (8005b9c <HAL_RCC_GetSysClockFreq+0xf0>)
 8005ac4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ac6:	c313      	stmia	r3!, {r0, r1, r4}
 8005ac8:	6812      	ldr	r2, [r2, #0]
 8005aca:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad8:	2300      	movs	r3, #0
 8005ada:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005ae0:	4b2f      	ldr	r3, [pc, #188]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae8:	220c      	movs	r2, #12
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	d047      	beq.n	8005b80 <HAL_RCC_GetSysClockFreq+0xd4>
 8005af0:	d849      	bhi.n	8005b86 <HAL_RCC_GetSysClockFreq+0xda>
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d002      	beq.n	8005afc <HAL_RCC_GetSysClockFreq+0x50>
 8005af6:	2b08      	cmp	r3, #8
 8005af8:	d003      	beq.n	8005b02 <HAL_RCC_GetSysClockFreq+0x56>
 8005afa:	e044      	b.n	8005b86 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005afc:	4b29      	ldr	r3, [pc, #164]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005afe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b00:	e044      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	0c9b      	lsrs	r3, r3, #18
 8005b06:	220f      	movs	r2, #15
 8005b08:	4013      	ands	r3, r2
 8005b0a:	2214      	movs	r2, #20
 8005b0c:	18ba      	adds	r2, r7, r2
 8005b0e:	5cd3      	ldrb	r3, [r2, r3]
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005b12:	4b23      	ldr	r3, [pc, #140]	; (8005ba0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b16:	220f      	movs	r2, #15
 8005b18:	4013      	ands	r3, r2
 8005b1a:	1d3a      	adds	r2, r7, #4
 8005b1c:	5cd3      	ldrb	r3, [r2, r3]
 8005b1e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b22:	23c0      	movs	r3, #192	; 0xc0
 8005b24:	025b      	lsls	r3, r3, #9
 8005b26:	401a      	ands	r2, r3
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	025b      	lsls	r3, r3, #9
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d109      	bne.n	8005b44 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b32:	481c      	ldr	r0, [pc, #112]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b34:	f7fa faf2 	bl	800011c <__udivsi3>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	001a      	movs	r2, r3
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	4353      	muls	r3, r2
 8005b40:	637b      	str	r3, [r7, #52]	; 0x34
 8005b42:	e01a      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b46:	23c0      	movs	r3, #192	; 0xc0
 8005b48:	025b      	lsls	r3, r3, #9
 8005b4a:	401a      	ands	r2, r3
 8005b4c:	23c0      	movs	r3, #192	; 0xc0
 8005b4e:	025b      	lsls	r3, r3, #9
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d109      	bne.n	8005b68 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b56:	4814      	ldr	r0, [pc, #80]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b58:	f7fa fae0 	bl	800011c <__udivsi3>
 8005b5c:	0003      	movs	r3, r0
 8005b5e:	001a      	movs	r2, r3
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	4353      	muls	r3, r2
 8005b64:	637b      	str	r3, [r7, #52]	; 0x34
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b6a:	480e      	ldr	r0, [pc, #56]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b6c:	f7fa fad6 	bl	800011c <__udivsi3>
 8005b70:	0003      	movs	r3, r0
 8005b72:	001a      	movs	r2, r3
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	4353      	muls	r3, r2
 8005b78:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b7e:	e005      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005b80:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b84:	e002      	b.n	8005b8c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b86:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b8a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005b8e:	0018      	movs	r0, r3
 8005b90:	46bd      	mov	sp, r7
 8005b92:	b00f      	add	sp, #60	; 0x3c
 8005b94:	bd90      	pop	{r4, r7, pc}
 8005b96:	46c0      	nop			; (mov r8, r8)
 8005b98:	08007888 	.word	0x08007888
 8005b9c:	08007898 	.word	0x08007898
 8005ba0:	40021000 	.word	0x40021000
 8005ba4:	007a1200 	.word	0x007a1200
 8005ba8:	02dc6c00 	.word	0x02dc6c00

08005bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb0:	4b02      	ldr	r3, [pc, #8]	; (8005bbc <HAL_RCC_GetHCLKFreq+0x10>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
}
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	20000010 	.word	0x20000010

08005bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005bc4:	f7ff fff2 	bl	8005bac <HAL_RCC_GetHCLKFreq>
 8005bc8:	0001      	movs	r1, r0
 8005bca:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	0a1b      	lsrs	r3, r3, #8
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	4a04      	ldr	r2, [pc, #16]	; (8005be8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bd6:	5cd3      	ldrb	r3, [r2, r3]
 8005bd8:	40d9      	lsrs	r1, r3
 8005bda:	000b      	movs	r3, r1
}    
 8005bdc:	0018      	movs	r0, r3
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	40021000 	.word	0x40021000
 8005be8:	080079f8 	.word	0x080079f8

08005bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	2380      	movs	r3, #128	; 0x80
 8005c02:	025b      	lsls	r3, r3, #9
 8005c04:	4013      	ands	r3, r2
 8005c06:	d100      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005c08:	e08e      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005c0a:	2017      	movs	r0, #23
 8005c0c:	183b      	adds	r3, r7, r0
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c12:	4b67      	ldr	r3, [pc, #412]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c14:	69da      	ldr	r2, [r3, #28]
 8005c16:	2380      	movs	r3, #128	; 0x80
 8005c18:	055b      	lsls	r3, r3, #21
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d110      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c1e:	4b64      	ldr	r3, [pc, #400]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c20:	69da      	ldr	r2, [r3, #28]
 8005c22:	4b63      	ldr	r3, [pc, #396]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c24:	2180      	movs	r1, #128	; 0x80
 8005c26:	0549      	lsls	r1, r1, #21
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	61da      	str	r2, [r3, #28]
 8005c2c:	4b60      	ldr	r3, [pc, #384]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	2380      	movs	r3, #128	; 0x80
 8005c32:	055b      	lsls	r3, r3, #21
 8005c34:	4013      	ands	r3, r2
 8005c36:	60bb      	str	r3, [r7, #8]
 8005c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c3a:	183b      	adds	r3, r7, r0
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c40:	4b5c      	ldr	r3, [pc, #368]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4013      	ands	r3, r2
 8005c4a:	d11a      	bne.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c4c:	4b59      	ldr	r3, [pc, #356]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	4b58      	ldr	r3, [pc, #352]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005c52:	2180      	movs	r1, #128	; 0x80
 8005c54:	0049      	lsls	r1, r1, #1
 8005c56:	430a      	orrs	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c5a:	f7fe fa75 	bl	8004148 <HAL_GetTick>
 8005c5e:	0003      	movs	r3, r0
 8005c60:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c62:	e008      	b.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c64:	f7fe fa70 	bl	8004148 <HAL_GetTick>
 8005c68:	0002      	movs	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b64      	cmp	r3, #100	; 0x64
 8005c70:	d901      	bls.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e097      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c76:	4b4f      	ldr	r3, [pc, #316]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	2380      	movs	r3, #128	; 0x80
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	4013      	ands	r3, r2
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c82:	4b4b      	ldr	r3, [pc, #300]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005c84:	6a1a      	ldr	r2, [r3, #32]
 8005c86:	23c0      	movs	r3, #192	; 0xc0
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d034      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	23c0      	movs	r3, #192	; 0xc0
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d02c      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ca4:	4b42      	ldr	r3, [pc, #264]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005ca6:	6a1b      	ldr	r3, [r3, #32]
 8005ca8:	4a43      	ldr	r2, [pc, #268]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cae:	4b40      	ldr	r3, [pc, #256]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005cb0:	6a1a      	ldr	r2, [r3, #32]
 8005cb2:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005cb4:	2180      	movs	r1, #128	; 0x80
 8005cb6:	0249      	lsls	r1, r1, #9
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cbc:	4b3c      	ldr	r3, [pc, #240]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005cbe:	6a1a      	ldr	r2, [r3, #32]
 8005cc0:	4b3b      	ldr	r3, [pc, #236]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005cc2:	493e      	ldr	r1, [pc, #248]	; (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cc4:	400a      	ands	r2, r1
 8005cc6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005cc8:	4b39      	ldr	r3, [pc, #228]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd6:	f7fe fa37 	bl	8004148 <HAL_GetTick>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cde:	e009      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ce0:	f7fe fa32 	bl	8004148 <HAL_GetTick>
 8005ce4:	0002      	movs	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	4a35      	ldr	r2, [pc, #212]	; (8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d901      	bls.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e058      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf4:	4b2e      	ldr	r3, [pc, #184]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	d0f0      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cfe:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	4a2d      	ldr	r2, [pc, #180]	; (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	0019      	movs	r1, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	4b28      	ldr	r3, [pc, #160]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d12:	2317      	movs	r3, #23
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d105      	bne.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d1c:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	4b23      	ldr	r3, [pc, #140]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d22:	4928      	ldr	r1, [pc, #160]	; (8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005d24:	400a      	ands	r2, r1
 8005d26:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	4013      	ands	r3, r2
 8005d30:	d009      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d32:	4b1f      	ldr	r3, [pc, #124]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	2203      	movs	r2, #3
 8005d38:	4393      	bics	r3, r2
 8005d3a:	0019      	movs	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d42:	430a      	orrs	r2, r1
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2220      	movs	r2, #32
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	d009      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d50:	4b17      	ldr	r3, [pc, #92]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	2210      	movs	r2, #16
 8005d56:	4393      	bics	r3, r2
 8005d58:	0019      	movs	r1, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d60:	430a      	orrs	r2, r1
 8005d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	2380      	movs	r3, #128	; 0x80
 8005d6a:	029b      	lsls	r3, r3, #10
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d70:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	2280      	movs	r2, #128	; 0x80
 8005d76:	4393      	bics	r3, r2
 8005d78:	0019      	movs	r1, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d80:	430a      	orrs	r2, r1
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	2380      	movs	r3, #128	; 0x80
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d009      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	2240      	movs	r2, #64	; 0x40
 8005d96:	4393      	bics	r3, r2
 8005d98:	0019      	movs	r1, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	4b04      	ldr	r3, [pc, #16]	; (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005da0:	430a      	orrs	r2, r1
 8005da2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	0018      	movs	r0, r3
 8005da8:	46bd      	mov	sp, r7
 8005daa:	b006      	add	sp, #24
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	40021000 	.word	0x40021000
 8005db4:	40007000 	.word	0x40007000
 8005db8:	fffffcff 	.word	0xfffffcff
 8005dbc:	fffeffff 	.word	0xfffeffff
 8005dc0:	00001388 	.word	0x00001388
 8005dc4:	efffffff 	.word	0xefffffff

08005dc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e044      	b.n	8005e64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d107      	bne.n	8005df2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2274      	movs	r2, #116	; 0x74
 8005de6:	2100      	movs	r1, #0
 8005de8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	0018      	movs	r0, r3
 8005dee:	f7fe f809 	bl	8003e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2224      	movs	r2, #36	; 0x24
 8005df6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2101      	movs	r1, #1
 8005e04:	438a      	bics	r2, r1
 8005e06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f000 f8da 	bl	8005fc4 <UART_SetConfig>
 8005e10:	0003      	movs	r3, r0
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e024      	b.n	8005e64 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	0018      	movs	r0, r3
 8005e26:	f000 fa0d 	bl	8006244 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	490d      	ldr	r1, [pc, #52]	; (8005e6c <HAL_UART_Init+0xa4>)
 8005e36:	400a      	ands	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	212a      	movs	r1, #42	; 0x2a
 8005e46:	438a      	bics	r2, r1
 8005e48:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2101      	movs	r1, #1
 8005e56:	430a      	orrs	r2, r1
 8005e58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 faa5 	bl	80063ac <UART_CheckIdleState>
 8005e62:	0003      	movs	r3, r0
}
 8005e64:	0018      	movs	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	b002      	add	sp, #8
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	ffffb7ff 	.word	0xffffb7ff

08005e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	603b      	str	r3, [r7, #0]
 8005e7c:	1dbb      	adds	r3, r7, #6
 8005e7e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d000      	beq.n	8005e8a <HAL_UART_Transmit+0x1a>
 8005e88:	e096      	b.n	8005fb8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d003      	beq.n	8005e98 <HAL_UART_Transmit+0x28>
 8005e90:	1dbb      	adds	r3, r7, #6
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e08e      	b.n	8005fba <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	2380      	movs	r3, #128	; 0x80
 8005ea2:	015b      	lsls	r3, r3, #5
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d109      	bne.n	8005ebc <HAL_UART_Transmit+0x4c>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d105      	bne.n	8005ebc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d001      	beq.n	8005ebc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e07e      	b.n	8005fba <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2274      	movs	r2, #116	; 0x74
 8005ec0:	5c9b      	ldrb	r3, [r3, r2]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Transmit+0x5a>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e077      	b.n	8005fba <HAL_UART_Transmit+0x14a>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2274      	movs	r2, #116	; 0x74
 8005ece:	2101      	movs	r1, #1
 8005ed0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2280      	movs	r2, #128	; 0x80
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2221      	movs	r2, #33	; 0x21
 8005ede:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ee0:	f7fe f932 	bl	8004148 <HAL_GetTick>
 8005ee4:	0003      	movs	r3, r0
 8005ee6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1dba      	adds	r2, r7, #6
 8005eec:	2150      	movs	r1, #80	; 0x50
 8005eee:	8812      	ldrh	r2, [r2, #0]
 8005ef0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	1dba      	adds	r2, r7, #6
 8005ef6:	2152      	movs	r1, #82	; 0x52
 8005ef8:	8812      	ldrh	r2, [r2, #0]
 8005efa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	015b      	lsls	r3, r3, #5
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d108      	bne.n	8005f1a <HAL_UART_Transmit+0xaa>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005f10:	2300      	movs	r3, #0
 8005f12:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	61bb      	str	r3, [r7, #24]
 8005f18:	e003      	b.n	8005f22 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2274      	movs	r2, #116	; 0x74
 8005f26:	2100      	movs	r1, #0
 8005f28:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005f2a:	e02d      	b.n	8005f88 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f2c:	697a      	ldr	r2, [r7, #20]
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	0013      	movs	r3, r2
 8005f36:	2200      	movs	r2, #0
 8005f38:	2180      	movs	r1, #128	; 0x80
 8005f3a:	f000 fa7f 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 8005f3e:	1e03      	subs	r3, r0, #0
 8005f40:	d001      	beq.n	8005f46 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e039      	b.n	8005fba <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10b      	bne.n	8005f64 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	881a      	ldrh	r2, [r3, #0]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	05d2      	lsls	r2, r2, #23
 8005f56:	0dd2      	lsrs	r2, r2, #23
 8005f58:	b292      	uxth	r2, r2
 8005f5a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	3302      	adds	r3, #2
 8005f60:	61bb      	str	r3, [r7, #24]
 8005f62:	e008      	b.n	8005f76 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	b292      	uxth	r2, r2
 8005f6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	3301      	adds	r3, #1
 8005f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2252      	movs	r2, #82	; 0x52
 8005f7a:	5a9b      	ldrh	r3, [r3, r2]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b299      	uxth	r1, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2252      	movs	r2, #82	; 0x52
 8005f86:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2252      	movs	r2, #82	; 0x52
 8005f8c:	5a9b      	ldrh	r3, [r3, r2]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1cb      	bne.n	8005f2c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	0013      	movs	r3, r2
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	2140      	movs	r1, #64	; 0x40
 8005fa2:	f000 fa4b 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 8005fa6:	1e03      	subs	r3, r0, #0
 8005fa8:	d001      	beq.n	8005fae <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e005      	b.n	8005fba <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e000      	b.n	8005fba <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005fb8:	2302      	movs	r3, #2
  }
}
 8005fba:	0018      	movs	r0, r3
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	b008      	add	sp, #32
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fcc:	231e      	movs	r3, #30
 8005fce:	18fb      	adds	r3, r7, r3
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a8d      	ldr	r2, [pc, #564]	; (8006228 <UART_SetConfig+0x264>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	0019      	movs	r1, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	4a88      	ldr	r2, [pc, #544]	; (800622c <UART_SetConfig+0x268>)
 800600a:	4013      	ands	r3, r2
 800600c:	0019      	movs	r1, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68da      	ldr	r2, [r3, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1b      	ldr	r3, [r3, #32]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4313      	orrs	r3, r2
 8006028:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	4a7f      	ldr	r2, [pc, #508]	; (8006230 <UART_SetConfig+0x26c>)
 8006032:	4013      	ands	r3, r2
 8006034:	0019      	movs	r1, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	430a      	orrs	r2, r1
 800603e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a7b      	ldr	r2, [pc, #492]	; (8006234 <UART_SetConfig+0x270>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d127      	bne.n	800609a <UART_SetConfig+0xd6>
 800604a:	4b7b      	ldr	r3, [pc, #492]	; (8006238 <UART_SetConfig+0x274>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	2203      	movs	r2, #3
 8006050:	4013      	ands	r3, r2
 8006052:	2b03      	cmp	r3, #3
 8006054:	d00d      	beq.n	8006072 <UART_SetConfig+0xae>
 8006056:	d81b      	bhi.n	8006090 <UART_SetConfig+0xcc>
 8006058:	2b02      	cmp	r3, #2
 800605a:	d014      	beq.n	8006086 <UART_SetConfig+0xc2>
 800605c:	d818      	bhi.n	8006090 <UART_SetConfig+0xcc>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <UART_SetConfig+0xa4>
 8006062:	2b01      	cmp	r3, #1
 8006064:	d00a      	beq.n	800607c <UART_SetConfig+0xb8>
 8006066:	e013      	b.n	8006090 <UART_SetConfig+0xcc>
 8006068:	231f      	movs	r3, #31
 800606a:	18fb      	adds	r3, r7, r3
 800606c:	2200      	movs	r2, #0
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	e021      	b.n	80060b6 <UART_SetConfig+0xf2>
 8006072:	231f      	movs	r3, #31
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	2202      	movs	r2, #2
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e01c      	b.n	80060b6 <UART_SetConfig+0xf2>
 800607c:	231f      	movs	r3, #31
 800607e:	18fb      	adds	r3, r7, r3
 8006080:	2204      	movs	r2, #4
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e017      	b.n	80060b6 <UART_SetConfig+0xf2>
 8006086:	231f      	movs	r3, #31
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	2208      	movs	r2, #8
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e012      	b.n	80060b6 <UART_SetConfig+0xf2>
 8006090:	231f      	movs	r3, #31
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	2210      	movs	r2, #16
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e00d      	b.n	80060b6 <UART_SetConfig+0xf2>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a67      	ldr	r2, [pc, #412]	; (800623c <UART_SetConfig+0x278>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d104      	bne.n	80060ae <UART_SetConfig+0xea>
 80060a4:	231f      	movs	r3, #31
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	2200      	movs	r2, #0
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	e003      	b.n	80060b6 <UART_SetConfig+0xf2>
 80060ae:	231f      	movs	r3, #31
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	2210      	movs	r2, #16
 80060b4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69da      	ldr	r2, [r3, #28]
 80060ba:	2380      	movs	r3, #128	; 0x80
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	429a      	cmp	r2, r3
 80060c0:	d15d      	bne.n	800617e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80060c2:	231f      	movs	r3, #31
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	d015      	beq.n	80060f8 <UART_SetConfig+0x134>
 80060cc:	dc18      	bgt.n	8006100 <UART_SetConfig+0x13c>
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d00d      	beq.n	80060ee <UART_SetConfig+0x12a>
 80060d2:	dc15      	bgt.n	8006100 <UART_SetConfig+0x13c>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <UART_SetConfig+0x11a>
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d005      	beq.n	80060e8 <UART_SetConfig+0x124>
 80060dc:	e010      	b.n	8006100 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060de:	f7ff fd6f 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 80060e2:	0003      	movs	r3, r0
 80060e4:	61bb      	str	r3, [r7, #24]
        break;
 80060e6:	e012      	b.n	800610e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e8:	4b55      	ldr	r3, [pc, #340]	; (8006240 <UART_SetConfig+0x27c>)
 80060ea:	61bb      	str	r3, [r7, #24]
        break;
 80060ec:	e00f      	b.n	800610e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ee:	f7ff fcdd 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 80060f2:	0003      	movs	r3, r0
 80060f4:	61bb      	str	r3, [r7, #24]
        break;
 80060f6:	e00a      	b.n	800610e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f8:	2380      	movs	r3, #128	; 0x80
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	61bb      	str	r3, [r7, #24]
        break;
 80060fe:	e006      	b.n	800610e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8006100:	2300      	movs	r3, #0
 8006102:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006104:	231e      	movs	r3, #30
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	2201      	movs	r2, #1
 800610a:	701a      	strb	r2, [r3, #0]
        break;
 800610c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d100      	bne.n	8006116 <UART_SetConfig+0x152>
 8006114:	e07b      	b.n	800620e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	005a      	lsls	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	18d2      	adds	r2, r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	0019      	movs	r1, r3
 8006128:	0010      	movs	r0, r2
 800612a:	f7f9 fff7 	bl	800011c <__udivsi3>
 800612e:	0003      	movs	r3, r0
 8006130:	b29b      	uxth	r3, r3
 8006132:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	2b0f      	cmp	r3, #15
 8006138:	d91c      	bls.n	8006174 <UART_SetConfig+0x1b0>
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	025b      	lsls	r3, r3, #9
 8006140:	429a      	cmp	r2, r3
 8006142:	d217      	bcs.n	8006174 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	b29a      	uxth	r2, r3
 8006148:	200e      	movs	r0, #14
 800614a:	183b      	adds	r3, r7, r0
 800614c:	210f      	movs	r1, #15
 800614e:	438a      	bics	r2, r1
 8006150:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	b29b      	uxth	r3, r3
 8006158:	2207      	movs	r2, #7
 800615a:	4013      	ands	r3, r2
 800615c:	b299      	uxth	r1, r3
 800615e:	183b      	adds	r3, r7, r0
 8006160:	183a      	adds	r2, r7, r0
 8006162:	8812      	ldrh	r2, [r2, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	183a      	adds	r2, r7, r0
 800616e:	8812      	ldrh	r2, [r2, #0]
 8006170:	60da      	str	r2, [r3, #12]
 8006172:	e04c      	b.n	800620e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006174:	231e      	movs	r3, #30
 8006176:	18fb      	adds	r3, r7, r3
 8006178:	2201      	movs	r2, #1
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	e047      	b.n	800620e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800617e:	231f      	movs	r3, #31
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b08      	cmp	r3, #8
 8006186:	d015      	beq.n	80061b4 <UART_SetConfig+0x1f0>
 8006188:	dc18      	bgt.n	80061bc <UART_SetConfig+0x1f8>
 800618a:	2b04      	cmp	r3, #4
 800618c:	d00d      	beq.n	80061aa <UART_SetConfig+0x1e6>
 800618e:	dc15      	bgt.n	80061bc <UART_SetConfig+0x1f8>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <UART_SetConfig+0x1d6>
 8006194:	2b02      	cmp	r3, #2
 8006196:	d005      	beq.n	80061a4 <UART_SetConfig+0x1e0>
 8006198:	e010      	b.n	80061bc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800619a:	f7ff fd11 	bl	8005bc0 <HAL_RCC_GetPCLK1Freq>
 800619e:	0003      	movs	r3, r0
 80061a0:	61bb      	str	r3, [r7, #24]
        break;
 80061a2:	e012      	b.n	80061ca <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a4:	4b26      	ldr	r3, [pc, #152]	; (8006240 <UART_SetConfig+0x27c>)
 80061a6:	61bb      	str	r3, [r7, #24]
        break;
 80061a8:	e00f      	b.n	80061ca <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061aa:	f7ff fc7f 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 80061ae:	0003      	movs	r3, r0
 80061b0:	61bb      	str	r3, [r7, #24]
        break;
 80061b2:	e00a      	b.n	80061ca <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061b4:	2380      	movs	r3, #128	; 0x80
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	61bb      	str	r3, [r7, #24]
        break;
 80061ba:	e006      	b.n	80061ca <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061c0:	231e      	movs	r3, #30
 80061c2:	18fb      	adds	r3, r7, r3
 80061c4:	2201      	movs	r2, #1
 80061c6:	701a      	strb	r2, [r3, #0]
        break;
 80061c8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01e      	beq.n	800620e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	085a      	lsrs	r2, r3, #1
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	18d2      	adds	r2, r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	0019      	movs	r1, r3
 80061e0:	0010      	movs	r0, r2
 80061e2:	f7f9 ff9b 	bl	800011c <__udivsi3>
 80061e6:	0003      	movs	r3, r0
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b0f      	cmp	r3, #15
 80061f0:	d909      	bls.n	8006206 <UART_SetConfig+0x242>
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	2380      	movs	r3, #128	; 0x80
 80061f6:	025b      	lsls	r3, r3, #9
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d204      	bcs.n	8006206 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	60da      	str	r2, [r3, #12]
 8006204:	e003      	b.n	800620e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006206:	231e      	movs	r3, #30
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	2201      	movs	r2, #1
 800620c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800621a:	231e      	movs	r3, #30
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	781b      	ldrb	r3, [r3, #0]
}
 8006220:	0018      	movs	r0, r3
 8006222:	46bd      	mov	sp, r7
 8006224:	b008      	add	sp, #32
 8006226:	bd80      	pop	{r7, pc}
 8006228:	efff69f3 	.word	0xefff69f3
 800622c:	ffffcfff 	.word	0xffffcfff
 8006230:	fffff4ff 	.word	0xfffff4ff
 8006234:	40013800 	.word	0x40013800
 8006238:	40021000 	.word	0x40021000
 800623c:	40004400 	.word	0x40004400
 8006240:	007a1200 	.word	0x007a1200

08006244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006250:	2201      	movs	r2, #1
 8006252:	4013      	ands	r3, r2
 8006254:	d00b      	beq.n	800626e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	4a4a      	ldr	r2, [pc, #296]	; (8006388 <UART_AdvFeatureConfig+0x144>)
 800625e:	4013      	ands	r3, r2
 8006260:	0019      	movs	r1, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006272:	2202      	movs	r2, #2
 8006274:	4013      	ands	r3, r2
 8006276:	d00b      	beq.n	8006290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	4a43      	ldr	r2, [pc, #268]	; (800638c <UART_AdvFeatureConfig+0x148>)
 8006280:	4013      	ands	r3, r2
 8006282:	0019      	movs	r1, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	2204      	movs	r2, #4
 8006296:	4013      	ands	r3, r2
 8006298:	d00b      	beq.n	80062b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a3b      	ldr	r2, [pc, #236]	; (8006390 <UART_AdvFeatureConfig+0x14c>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	0019      	movs	r1, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	2208      	movs	r2, #8
 80062b8:	4013      	ands	r3, r2
 80062ba:	d00b      	beq.n	80062d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4a34      	ldr	r2, [pc, #208]	; (8006394 <UART_AdvFeatureConfig+0x150>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	0019      	movs	r1, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	2210      	movs	r2, #16
 80062da:	4013      	ands	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	4a2c      	ldr	r2, [pc, #176]	; (8006398 <UART_AdvFeatureConfig+0x154>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	0019      	movs	r1, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fa:	2220      	movs	r2, #32
 80062fc:	4013      	ands	r3, r2
 80062fe:	d00b      	beq.n	8006318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	4a25      	ldr	r2, [pc, #148]	; (800639c <UART_AdvFeatureConfig+0x158>)
 8006308:	4013      	ands	r3, r2
 800630a:	0019      	movs	r1, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	2240      	movs	r2, #64	; 0x40
 800631e:	4013      	ands	r3, r2
 8006320:	d01d      	beq.n	800635e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	4a1d      	ldr	r2, [pc, #116]	; (80063a0 <UART_AdvFeatureConfig+0x15c>)
 800632a:	4013      	ands	r3, r2
 800632c:	0019      	movs	r1, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800633e:	2380      	movs	r3, #128	; 0x80
 8006340:	035b      	lsls	r3, r3, #13
 8006342:	429a      	cmp	r2, r3
 8006344:	d10b      	bne.n	800635e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	4a15      	ldr	r2, [pc, #84]	; (80063a4 <UART_AdvFeatureConfig+0x160>)
 800634e:	4013      	ands	r3, r2
 8006350:	0019      	movs	r1, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006362:	2280      	movs	r2, #128	; 0x80
 8006364:	4013      	ands	r3, r2
 8006366:	d00b      	beq.n	8006380 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	4a0e      	ldr	r2, [pc, #56]	; (80063a8 <UART_AdvFeatureConfig+0x164>)
 8006370:	4013      	ands	r3, r2
 8006372:	0019      	movs	r1, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }
}
 8006380:	46c0      	nop			; (mov r8, r8)
 8006382:	46bd      	mov	sp, r7
 8006384:	b002      	add	sp, #8
 8006386:	bd80      	pop	{r7, pc}
 8006388:	fffdffff 	.word	0xfffdffff
 800638c:	fffeffff 	.word	0xfffeffff
 8006390:	fffbffff 	.word	0xfffbffff
 8006394:	ffff7fff 	.word	0xffff7fff
 8006398:	ffffefff 	.word	0xffffefff
 800639c:	ffffdfff 	.word	0xffffdfff
 80063a0:	ffefffff 	.word	0xffefffff
 80063a4:	ff9fffff 	.word	0xff9fffff
 80063a8:	fff7ffff 	.word	0xfff7ffff

080063ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2280      	movs	r2, #128	; 0x80
 80063b8:	2100      	movs	r1, #0
 80063ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063bc:	f7fd fec4 	bl	8004148 <HAL_GetTick>
 80063c0:	0003      	movs	r3, r0
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2208      	movs	r2, #8
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b08      	cmp	r3, #8
 80063d0:	d10c      	bne.n	80063ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2280      	movs	r2, #128	; 0x80
 80063d6:	0391      	lsls	r1, r2, #14
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	4a17      	ldr	r2, [pc, #92]	; (8006438 <UART_CheckIdleState+0x8c>)
 80063dc:	9200      	str	r2, [sp, #0]
 80063de:	2200      	movs	r2, #0
 80063e0:	f000 f82c 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 80063e4:	1e03      	subs	r3, r0, #0
 80063e6:	d001      	beq.n	80063ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e021      	b.n	8006430 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2204      	movs	r2, #4
 80063f4:	4013      	ands	r3, r2
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d10c      	bne.n	8006414 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2280      	movs	r2, #128	; 0x80
 80063fe:	03d1      	lsls	r1, r2, #15
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	4a0d      	ldr	r2, [pc, #52]	; (8006438 <UART_CheckIdleState+0x8c>)
 8006404:	9200      	str	r2, [sp, #0]
 8006406:	2200      	movs	r2, #0
 8006408:	f000 f818 	bl	800643c <UART_WaitOnFlagUntilTimeout>
 800640c:	1e03      	subs	r3, r0, #0
 800640e:	d001      	beq.n	8006414 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e00d      	b.n	8006430 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2220      	movs	r2, #32
 800641e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2274      	movs	r2, #116	; 0x74
 800642a:	2100      	movs	r1, #0
 800642c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	0018      	movs	r0, r3
 8006432:	46bd      	mov	sp, r7
 8006434:	b004      	add	sp, #16
 8006436:	bd80      	pop	{r7, pc}
 8006438:	01ffffff 	.word	0x01ffffff

0800643c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	603b      	str	r3, [r7, #0]
 8006448:	1dfb      	adds	r3, r7, #7
 800644a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800644c:	e05e      	b.n	800650c <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	3301      	adds	r3, #1
 8006452:	d05b      	beq.n	800650c <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006454:	f7fd fe78 	bl	8004148 <HAL_GetTick>
 8006458:	0002      	movs	r2, r0
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	69ba      	ldr	r2, [r7, #24]
 8006460:	429a      	cmp	r2, r3
 8006462:	d302      	bcc.n	800646a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d11b      	bne.n	80064a2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	492f      	ldr	r1, [pc, #188]	; (8006534 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8006476:	400a      	ands	r2, r1
 8006478:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2101      	movs	r1, #1
 8006486:	438a      	bics	r2, r1
 8006488:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2220      	movs	r2, #32
 8006494:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2274      	movs	r2, #116	; 0x74
 800649a:	2100      	movs	r1, #0
 800649c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e044      	b.n	800652c <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2204      	movs	r2, #4
 80064aa:	4013      	ands	r3, r2
 80064ac:	d02e      	beq.n	800650c <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	69da      	ldr	r2, [r3, #28]
 80064b4:	2380      	movs	r3, #128	; 0x80
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	401a      	ands	r2, r3
 80064ba:	2380      	movs	r3, #128	; 0x80
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	429a      	cmp	r2, r3
 80064c0:	d124      	bne.n	800650c <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2280      	movs	r2, #128	; 0x80
 80064c8:	0112      	lsls	r2, r2, #4
 80064ca:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4917      	ldr	r1, [pc, #92]	; (8006534 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80064d8:	400a      	ands	r2, r1
 80064da:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2101      	movs	r1, #1
 80064e8:	438a      	bics	r2, r1
 80064ea:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2220      	movs	r2, #32
 80064f0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2280      	movs	r2, #128	; 0x80
 80064fc:	2120      	movs	r1, #32
 80064fe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2274      	movs	r2, #116	; 0x74
 8006504:	2100      	movs	r1, #0
 8006506:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e00f      	b.n	800652c <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	4013      	ands	r3, r2
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	425a      	negs	r2, r3
 800651c:	4153      	adcs	r3, r2
 800651e:	b2db      	uxtb	r3, r3
 8006520:	001a      	movs	r2, r3
 8006522:	1dfb      	adds	r3, r7, #7
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d091      	beq.n	800644e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	0018      	movs	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	b004      	add	sp, #16
 8006532:	bd80      	pop	{r7, pc}
 8006534:	fffffe5f 	.word	0xfffffe5f

08006538 <__errno>:
 8006538:	4b01      	ldr	r3, [pc, #4]	; (8006540 <__errno+0x8>)
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	4770      	bx	lr
 800653e:	46c0      	nop			; (mov r8, r8)
 8006540:	2000001c 	.word	0x2000001c

08006544 <__libc_init_array>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	2600      	movs	r6, #0
 8006548:	4d0c      	ldr	r5, [pc, #48]	; (800657c <__libc_init_array+0x38>)
 800654a:	4c0d      	ldr	r4, [pc, #52]	; (8006580 <__libc_init_array+0x3c>)
 800654c:	1b64      	subs	r4, r4, r5
 800654e:	10a4      	asrs	r4, r4, #2
 8006550:	42a6      	cmp	r6, r4
 8006552:	d109      	bne.n	8006568 <__libc_init_array+0x24>
 8006554:	2600      	movs	r6, #0
 8006556:	f001 f91d 	bl	8007794 <_init>
 800655a:	4d0a      	ldr	r5, [pc, #40]	; (8006584 <__libc_init_array+0x40>)
 800655c:	4c0a      	ldr	r4, [pc, #40]	; (8006588 <__libc_init_array+0x44>)
 800655e:	1b64      	subs	r4, r4, r5
 8006560:	10a4      	asrs	r4, r4, #2
 8006562:	42a6      	cmp	r6, r4
 8006564:	d105      	bne.n	8006572 <__libc_init_array+0x2e>
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	00b3      	lsls	r3, r6, #2
 800656a:	58eb      	ldr	r3, [r5, r3]
 800656c:	4798      	blx	r3
 800656e:	3601      	adds	r6, #1
 8006570:	e7ee      	b.n	8006550 <__libc_init_array+0xc>
 8006572:	00b3      	lsls	r3, r6, #2
 8006574:	58eb      	ldr	r3, [r5, r3]
 8006576:	4798      	blx	r3
 8006578:	3601      	adds	r6, #1
 800657a:	e7f2      	b.n	8006562 <__libc_init_array+0x1e>
 800657c:	08007aa0 	.word	0x08007aa0
 8006580:	08007aa0 	.word	0x08007aa0
 8006584:	08007aa0 	.word	0x08007aa0
 8006588:	08007aa4 	.word	0x08007aa4

0800658c <memset>:
 800658c:	0003      	movs	r3, r0
 800658e:	1882      	adds	r2, r0, r2
 8006590:	4293      	cmp	r3, r2
 8006592:	d100      	bne.n	8006596 <memset+0xa>
 8006594:	4770      	bx	lr
 8006596:	7019      	strb	r1, [r3, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	e7f9      	b.n	8006590 <memset+0x4>

0800659c <iprintf>:
 800659c:	b40f      	push	{r0, r1, r2, r3}
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <iprintf+0x30>)
 80065a0:	b513      	push	{r0, r1, r4, lr}
 80065a2:	681c      	ldr	r4, [r3, #0]
 80065a4:	2c00      	cmp	r4, #0
 80065a6:	d005      	beq.n	80065b4 <iprintf+0x18>
 80065a8:	69a3      	ldr	r3, [r4, #24]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <iprintf+0x18>
 80065ae:	0020      	movs	r0, r4
 80065b0:	f000 fa86 	bl	8006ac0 <__sinit>
 80065b4:	ab05      	add	r3, sp, #20
 80065b6:	0020      	movs	r0, r4
 80065b8:	9a04      	ldr	r2, [sp, #16]
 80065ba:	68a1      	ldr	r1, [r4, #8]
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	f000 fc5f 	bl	8006e80 <_vfiprintf_r>
 80065c2:	bc16      	pop	{r1, r2, r4}
 80065c4:	bc08      	pop	{r3}
 80065c6:	b004      	add	sp, #16
 80065c8:	4718      	bx	r3
 80065ca:	46c0      	nop			; (mov r8, r8)
 80065cc:	2000001c 	.word	0x2000001c

080065d0 <_puts_r>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	0005      	movs	r5, r0
 80065d4:	000e      	movs	r6, r1
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d004      	beq.n	80065e4 <_puts_r+0x14>
 80065da:	6983      	ldr	r3, [r0, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <_puts_r+0x14>
 80065e0:	f000 fa6e 	bl	8006ac0 <__sinit>
 80065e4:	69ab      	ldr	r3, [r5, #24]
 80065e6:	68ac      	ldr	r4, [r5, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <_puts_r+0x22>
 80065ec:	0028      	movs	r0, r5
 80065ee:	f000 fa67 	bl	8006ac0 <__sinit>
 80065f2:	4b2d      	ldr	r3, [pc, #180]	; (80066a8 <_puts_r+0xd8>)
 80065f4:	429c      	cmp	r4, r3
 80065f6:	d122      	bne.n	800663e <_puts_r+0x6e>
 80065f8:	686c      	ldr	r4, [r5, #4]
 80065fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065fc:	07db      	lsls	r3, r3, #31
 80065fe:	d405      	bmi.n	800660c <_puts_r+0x3c>
 8006600:	89a3      	ldrh	r3, [r4, #12]
 8006602:	059b      	lsls	r3, r3, #22
 8006604:	d402      	bmi.n	800660c <_puts_r+0x3c>
 8006606:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006608:	f000 fafb 	bl	8006c02 <__retarget_lock_acquire_recursive>
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	071b      	lsls	r3, r3, #28
 8006610:	d502      	bpl.n	8006618 <_puts_r+0x48>
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d129      	bne.n	800666c <_puts_r+0x9c>
 8006618:	0021      	movs	r1, r4
 800661a:	0028      	movs	r0, r5
 800661c:	f000 f8aa 	bl	8006774 <__swsetup_r>
 8006620:	2800      	cmp	r0, #0
 8006622:	d023      	beq.n	800666c <_puts_r+0x9c>
 8006624:	2501      	movs	r5, #1
 8006626:	426d      	negs	r5, r5
 8006628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800662a:	07db      	lsls	r3, r3, #31
 800662c:	d405      	bmi.n	800663a <_puts_r+0x6a>
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	059b      	lsls	r3, r3, #22
 8006632:	d402      	bmi.n	800663a <_puts_r+0x6a>
 8006634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006636:	f000 fae5 	bl	8006c04 <__retarget_lock_release_recursive>
 800663a:	0028      	movs	r0, r5
 800663c:	bd70      	pop	{r4, r5, r6, pc}
 800663e:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <_puts_r+0xdc>)
 8006640:	429c      	cmp	r4, r3
 8006642:	d101      	bne.n	8006648 <_puts_r+0x78>
 8006644:	68ac      	ldr	r4, [r5, #8]
 8006646:	e7d8      	b.n	80065fa <_puts_r+0x2a>
 8006648:	4b19      	ldr	r3, [pc, #100]	; (80066b0 <_puts_r+0xe0>)
 800664a:	429c      	cmp	r4, r3
 800664c:	d1d5      	bne.n	80065fa <_puts_r+0x2a>
 800664e:	68ec      	ldr	r4, [r5, #12]
 8006650:	e7d3      	b.n	80065fa <_puts_r+0x2a>
 8006652:	3601      	adds	r6, #1
 8006654:	60a3      	str	r3, [r4, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	da04      	bge.n	8006664 <_puts_r+0x94>
 800665a:	69a2      	ldr	r2, [r4, #24]
 800665c:	429a      	cmp	r2, r3
 800665e:	dc16      	bgt.n	800668e <_puts_r+0xbe>
 8006660:	290a      	cmp	r1, #10
 8006662:	d014      	beq.n	800668e <_puts_r+0xbe>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	1c5a      	adds	r2, r3, #1
 8006668:	6022      	str	r2, [r4, #0]
 800666a:	7019      	strb	r1, [r3, #0]
 800666c:	68a3      	ldr	r3, [r4, #8]
 800666e:	7831      	ldrb	r1, [r6, #0]
 8006670:	3b01      	subs	r3, #1
 8006672:	2900      	cmp	r1, #0
 8006674:	d1ed      	bne.n	8006652 <_puts_r+0x82>
 8006676:	60a3      	str	r3, [r4, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	da0f      	bge.n	800669c <_puts_r+0xcc>
 800667c:	0028      	movs	r0, r5
 800667e:	0022      	movs	r2, r4
 8006680:	310a      	adds	r1, #10
 8006682:	f000 f821 	bl	80066c8 <__swbuf_r>
 8006686:	250a      	movs	r5, #10
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	d1cd      	bne.n	8006628 <_puts_r+0x58>
 800668c:	e7ca      	b.n	8006624 <_puts_r+0x54>
 800668e:	0022      	movs	r2, r4
 8006690:	0028      	movs	r0, r5
 8006692:	f000 f819 	bl	80066c8 <__swbuf_r>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d1e8      	bne.n	800666c <_puts_r+0x9c>
 800669a:	e7c3      	b.n	8006624 <_puts_r+0x54>
 800669c:	250a      	movs	r5, #10
 800669e:	6823      	ldr	r3, [r4, #0]
 80066a0:	1c5a      	adds	r2, r3, #1
 80066a2:	6022      	str	r2, [r4, #0]
 80066a4:	701d      	strb	r5, [r3, #0]
 80066a6:	e7bf      	b.n	8006628 <_puts_r+0x58>
 80066a8:	08007a24 	.word	0x08007a24
 80066ac:	08007a44 	.word	0x08007a44
 80066b0:	08007a04 	.word	0x08007a04

080066b4 <puts>:
 80066b4:	b510      	push	{r4, lr}
 80066b6:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <puts+0x10>)
 80066b8:	0001      	movs	r1, r0
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	f7ff ff88 	bl	80065d0 <_puts_r>
 80066c0:	bd10      	pop	{r4, pc}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	2000001c 	.word	0x2000001c

080066c8 <__swbuf_r>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	0005      	movs	r5, r0
 80066cc:	000e      	movs	r6, r1
 80066ce:	0014      	movs	r4, r2
 80066d0:	2800      	cmp	r0, #0
 80066d2:	d004      	beq.n	80066de <__swbuf_r+0x16>
 80066d4:	6983      	ldr	r3, [r0, #24]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <__swbuf_r+0x16>
 80066da:	f000 f9f1 	bl	8006ac0 <__sinit>
 80066de:	4b22      	ldr	r3, [pc, #136]	; (8006768 <__swbuf_r+0xa0>)
 80066e0:	429c      	cmp	r4, r3
 80066e2:	d12e      	bne.n	8006742 <__swbuf_r+0x7a>
 80066e4:	686c      	ldr	r4, [r5, #4]
 80066e6:	69a3      	ldr	r3, [r4, #24]
 80066e8:	60a3      	str	r3, [r4, #8]
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	071b      	lsls	r3, r3, #28
 80066ee:	d532      	bpl.n	8006756 <__swbuf_r+0x8e>
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d02f      	beq.n	8006756 <__swbuf_r+0x8e>
 80066f6:	6823      	ldr	r3, [r4, #0]
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	b2f7      	uxtb	r7, r6
 80066fc:	1a98      	subs	r0, r3, r2
 80066fe:	6963      	ldr	r3, [r4, #20]
 8006700:	b2f6      	uxtb	r6, r6
 8006702:	4283      	cmp	r3, r0
 8006704:	dc05      	bgt.n	8006712 <__swbuf_r+0x4a>
 8006706:	0021      	movs	r1, r4
 8006708:	0028      	movs	r0, r5
 800670a:	f000 f937 	bl	800697c <_fflush_r>
 800670e:	2800      	cmp	r0, #0
 8006710:	d127      	bne.n	8006762 <__swbuf_r+0x9a>
 8006712:	68a3      	ldr	r3, [r4, #8]
 8006714:	3001      	adds	r0, #1
 8006716:	3b01      	subs	r3, #1
 8006718:	60a3      	str	r3, [r4, #8]
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	6022      	str	r2, [r4, #0]
 8006720:	701f      	strb	r7, [r3, #0]
 8006722:	6963      	ldr	r3, [r4, #20]
 8006724:	4283      	cmp	r3, r0
 8006726:	d004      	beq.n	8006732 <__swbuf_r+0x6a>
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	07db      	lsls	r3, r3, #31
 800672c:	d507      	bpl.n	800673e <__swbuf_r+0x76>
 800672e:	2e0a      	cmp	r6, #10
 8006730:	d105      	bne.n	800673e <__swbuf_r+0x76>
 8006732:	0021      	movs	r1, r4
 8006734:	0028      	movs	r0, r5
 8006736:	f000 f921 	bl	800697c <_fflush_r>
 800673a:	2800      	cmp	r0, #0
 800673c:	d111      	bne.n	8006762 <__swbuf_r+0x9a>
 800673e:	0030      	movs	r0, r6
 8006740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006742:	4b0a      	ldr	r3, [pc, #40]	; (800676c <__swbuf_r+0xa4>)
 8006744:	429c      	cmp	r4, r3
 8006746:	d101      	bne.n	800674c <__swbuf_r+0x84>
 8006748:	68ac      	ldr	r4, [r5, #8]
 800674a:	e7cc      	b.n	80066e6 <__swbuf_r+0x1e>
 800674c:	4b08      	ldr	r3, [pc, #32]	; (8006770 <__swbuf_r+0xa8>)
 800674e:	429c      	cmp	r4, r3
 8006750:	d1c9      	bne.n	80066e6 <__swbuf_r+0x1e>
 8006752:	68ec      	ldr	r4, [r5, #12]
 8006754:	e7c7      	b.n	80066e6 <__swbuf_r+0x1e>
 8006756:	0021      	movs	r1, r4
 8006758:	0028      	movs	r0, r5
 800675a:	f000 f80b 	bl	8006774 <__swsetup_r>
 800675e:	2800      	cmp	r0, #0
 8006760:	d0c9      	beq.n	80066f6 <__swbuf_r+0x2e>
 8006762:	2601      	movs	r6, #1
 8006764:	4276      	negs	r6, r6
 8006766:	e7ea      	b.n	800673e <__swbuf_r+0x76>
 8006768:	08007a24 	.word	0x08007a24
 800676c:	08007a44 	.word	0x08007a44
 8006770:	08007a04 	.word	0x08007a04

08006774 <__swsetup_r>:
 8006774:	4b37      	ldr	r3, [pc, #220]	; (8006854 <__swsetup_r+0xe0>)
 8006776:	b570      	push	{r4, r5, r6, lr}
 8006778:	681d      	ldr	r5, [r3, #0]
 800677a:	0006      	movs	r6, r0
 800677c:	000c      	movs	r4, r1
 800677e:	2d00      	cmp	r5, #0
 8006780:	d005      	beq.n	800678e <__swsetup_r+0x1a>
 8006782:	69ab      	ldr	r3, [r5, #24]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <__swsetup_r+0x1a>
 8006788:	0028      	movs	r0, r5
 800678a:	f000 f999 	bl	8006ac0 <__sinit>
 800678e:	4b32      	ldr	r3, [pc, #200]	; (8006858 <__swsetup_r+0xe4>)
 8006790:	429c      	cmp	r4, r3
 8006792:	d10f      	bne.n	80067b4 <__swsetup_r+0x40>
 8006794:	686c      	ldr	r4, [r5, #4]
 8006796:	230c      	movs	r3, #12
 8006798:	5ee2      	ldrsh	r2, [r4, r3]
 800679a:	b293      	uxth	r3, r2
 800679c:	0711      	lsls	r1, r2, #28
 800679e:	d42d      	bmi.n	80067fc <__swsetup_r+0x88>
 80067a0:	06d9      	lsls	r1, r3, #27
 80067a2:	d411      	bmi.n	80067c8 <__swsetup_r+0x54>
 80067a4:	2309      	movs	r3, #9
 80067a6:	2001      	movs	r0, #1
 80067a8:	6033      	str	r3, [r6, #0]
 80067aa:	3337      	adds	r3, #55	; 0x37
 80067ac:	4313      	orrs	r3, r2
 80067ae:	81a3      	strh	r3, [r4, #12]
 80067b0:	4240      	negs	r0, r0
 80067b2:	bd70      	pop	{r4, r5, r6, pc}
 80067b4:	4b29      	ldr	r3, [pc, #164]	; (800685c <__swsetup_r+0xe8>)
 80067b6:	429c      	cmp	r4, r3
 80067b8:	d101      	bne.n	80067be <__swsetup_r+0x4a>
 80067ba:	68ac      	ldr	r4, [r5, #8]
 80067bc:	e7eb      	b.n	8006796 <__swsetup_r+0x22>
 80067be:	4b28      	ldr	r3, [pc, #160]	; (8006860 <__swsetup_r+0xec>)
 80067c0:	429c      	cmp	r4, r3
 80067c2:	d1e8      	bne.n	8006796 <__swsetup_r+0x22>
 80067c4:	68ec      	ldr	r4, [r5, #12]
 80067c6:	e7e6      	b.n	8006796 <__swsetup_r+0x22>
 80067c8:	075b      	lsls	r3, r3, #29
 80067ca:	d513      	bpl.n	80067f4 <__swsetup_r+0x80>
 80067cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ce:	2900      	cmp	r1, #0
 80067d0:	d008      	beq.n	80067e4 <__swsetup_r+0x70>
 80067d2:	0023      	movs	r3, r4
 80067d4:	3344      	adds	r3, #68	; 0x44
 80067d6:	4299      	cmp	r1, r3
 80067d8:	d002      	beq.n	80067e0 <__swsetup_r+0x6c>
 80067da:	0030      	movs	r0, r6
 80067dc:	f000 fa80 	bl	8006ce0 <_free_r>
 80067e0:	2300      	movs	r3, #0
 80067e2:	6363      	str	r3, [r4, #52]	; 0x34
 80067e4:	2224      	movs	r2, #36	; 0x24
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	4393      	bics	r3, r2
 80067ea:	81a3      	strh	r3, [r4, #12]
 80067ec:	2300      	movs	r3, #0
 80067ee:	6063      	str	r3, [r4, #4]
 80067f0:	6923      	ldr	r3, [r4, #16]
 80067f2:	6023      	str	r3, [r4, #0]
 80067f4:	2308      	movs	r3, #8
 80067f6:	89a2      	ldrh	r2, [r4, #12]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	81a3      	strh	r3, [r4, #12]
 80067fc:	6923      	ldr	r3, [r4, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10b      	bne.n	800681a <__swsetup_r+0xa6>
 8006802:	21a0      	movs	r1, #160	; 0xa0
 8006804:	2280      	movs	r2, #128	; 0x80
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	0089      	lsls	r1, r1, #2
 800680a:	0092      	lsls	r2, r2, #2
 800680c:	400b      	ands	r3, r1
 800680e:	4293      	cmp	r3, r2
 8006810:	d003      	beq.n	800681a <__swsetup_r+0xa6>
 8006812:	0021      	movs	r1, r4
 8006814:	0030      	movs	r0, r6
 8006816:	f000 fa1f 	bl	8006c58 <__smakebuf_r>
 800681a:	220c      	movs	r2, #12
 800681c:	5ea3      	ldrsh	r3, [r4, r2]
 800681e:	2001      	movs	r0, #1
 8006820:	001a      	movs	r2, r3
 8006822:	b299      	uxth	r1, r3
 8006824:	4002      	ands	r2, r0
 8006826:	4203      	tst	r3, r0
 8006828:	d00f      	beq.n	800684a <__swsetup_r+0xd6>
 800682a:	2200      	movs	r2, #0
 800682c:	60a2      	str	r2, [r4, #8]
 800682e:	6962      	ldr	r2, [r4, #20]
 8006830:	4252      	negs	r2, r2
 8006832:	61a2      	str	r2, [r4, #24]
 8006834:	2000      	movs	r0, #0
 8006836:	6922      	ldr	r2, [r4, #16]
 8006838:	4282      	cmp	r2, r0
 800683a:	d1ba      	bne.n	80067b2 <__swsetup_r+0x3e>
 800683c:	060a      	lsls	r2, r1, #24
 800683e:	d5b8      	bpl.n	80067b2 <__swsetup_r+0x3e>
 8006840:	2240      	movs	r2, #64	; 0x40
 8006842:	4313      	orrs	r3, r2
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	3801      	subs	r0, #1
 8006848:	e7b3      	b.n	80067b2 <__swsetup_r+0x3e>
 800684a:	0788      	lsls	r0, r1, #30
 800684c:	d400      	bmi.n	8006850 <__swsetup_r+0xdc>
 800684e:	6962      	ldr	r2, [r4, #20]
 8006850:	60a2      	str	r2, [r4, #8]
 8006852:	e7ef      	b.n	8006834 <__swsetup_r+0xc0>
 8006854:	2000001c 	.word	0x2000001c
 8006858:	08007a24 	.word	0x08007a24
 800685c:	08007a44 	.word	0x08007a44
 8006860:	08007a04 	.word	0x08007a04

08006864 <__sflush_r>:
 8006864:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006866:	898b      	ldrh	r3, [r1, #12]
 8006868:	0005      	movs	r5, r0
 800686a:	000c      	movs	r4, r1
 800686c:	071a      	lsls	r2, r3, #28
 800686e:	d45f      	bmi.n	8006930 <__sflush_r+0xcc>
 8006870:	684a      	ldr	r2, [r1, #4]
 8006872:	2a00      	cmp	r2, #0
 8006874:	dc04      	bgt.n	8006880 <__sflush_r+0x1c>
 8006876:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006878:	2a00      	cmp	r2, #0
 800687a:	dc01      	bgt.n	8006880 <__sflush_r+0x1c>
 800687c:	2000      	movs	r0, #0
 800687e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006880:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006882:	2f00      	cmp	r7, #0
 8006884:	d0fa      	beq.n	800687c <__sflush_r+0x18>
 8006886:	2200      	movs	r2, #0
 8006888:	2180      	movs	r1, #128	; 0x80
 800688a:	682e      	ldr	r6, [r5, #0]
 800688c:	602a      	str	r2, [r5, #0]
 800688e:	001a      	movs	r2, r3
 8006890:	0149      	lsls	r1, r1, #5
 8006892:	400a      	ands	r2, r1
 8006894:	420b      	tst	r3, r1
 8006896:	d034      	beq.n	8006902 <__sflush_r+0x9e>
 8006898:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800689a:	89a3      	ldrh	r3, [r4, #12]
 800689c:	075b      	lsls	r3, r3, #29
 800689e:	d506      	bpl.n	80068ae <__sflush_r+0x4a>
 80068a0:	6863      	ldr	r3, [r4, #4]
 80068a2:	1ac0      	subs	r0, r0, r3
 80068a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <__sflush_r+0x4a>
 80068aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068ac:	1ac0      	subs	r0, r0, r3
 80068ae:	0002      	movs	r2, r0
 80068b0:	6a21      	ldr	r1, [r4, #32]
 80068b2:	2300      	movs	r3, #0
 80068b4:	0028      	movs	r0, r5
 80068b6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80068b8:	47b8      	blx	r7
 80068ba:	89a1      	ldrh	r1, [r4, #12]
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d106      	bne.n	80068ce <__sflush_r+0x6a>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	2b1d      	cmp	r3, #29
 80068c4:	d831      	bhi.n	800692a <__sflush_r+0xc6>
 80068c6:	4a2c      	ldr	r2, [pc, #176]	; (8006978 <__sflush_r+0x114>)
 80068c8:	40da      	lsrs	r2, r3
 80068ca:	07d3      	lsls	r3, r2, #31
 80068cc:	d52d      	bpl.n	800692a <__sflush_r+0xc6>
 80068ce:	2300      	movs	r3, #0
 80068d0:	6063      	str	r3, [r4, #4]
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	6023      	str	r3, [r4, #0]
 80068d6:	04cb      	lsls	r3, r1, #19
 80068d8:	d505      	bpl.n	80068e6 <__sflush_r+0x82>
 80068da:	1c43      	adds	r3, r0, #1
 80068dc:	d102      	bne.n	80068e4 <__sflush_r+0x80>
 80068de:	682b      	ldr	r3, [r5, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d100      	bne.n	80068e6 <__sflush_r+0x82>
 80068e4:	6560      	str	r0, [r4, #84]	; 0x54
 80068e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068e8:	602e      	str	r6, [r5, #0]
 80068ea:	2900      	cmp	r1, #0
 80068ec:	d0c6      	beq.n	800687c <__sflush_r+0x18>
 80068ee:	0023      	movs	r3, r4
 80068f0:	3344      	adds	r3, #68	; 0x44
 80068f2:	4299      	cmp	r1, r3
 80068f4:	d002      	beq.n	80068fc <__sflush_r+0x98>
 80068f6:	0028      	movs	r0, r5
 80068f8:	f000 f9f2 	bl	8006ce0 <_free_r>
 80068fc:	2000      	movs	r0, #0
 80068fe:	6360      	str	r0, [r4, #52]	; 0x34
 8006900:	e7bd      	b.n	800687e <__sflush_r+0x1a>
 8006902:	2301      	movs	r3, #1
 8006904:	0028      	movs	r0, r5
 8006906:	6a21      	ldr	r1, [r4, #32]
 8006908:	47b8      	blx	r7
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	d1c5      	bne.n	800689a <__sflush_r+0x36>
 800690e:	682b      	ldr	r3, [r5, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0c2      	beq.n	800689a <__sflush_r+0x36>
 8006914:	2b1d      	cmp	r3, #29
 8006916:	d001      	beq.n	800691c <__sflush_r+0xb8>
 8006918:	2b16      	cmp	r3, #22
 800691a:	d101      	bne.n	8006920 <__sflush_r+0xbc>
 800691c:	602e      	str	r6, [r5, #0]
 800691e:	e7ad      	b.n	800687c <__sflush_r+0x18>
 8006920:	2340      	movs	r3, #64	; 0x40
 8006922:	89a2      	ldrh	r2, [r4, #12]
 8006924:	4313      	orrs	r3, r2
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	e7a9      	b.n	800687e <__sflush_r+0x1a>
 800692a:	2340      	movs	r3, #64	; 0x40
 800692c:	430b      	orrs	r3, r1
 800692e:	e7fa      	b.n	8006926 <__sflush_r+0xc2>
 8006930:	690f      	ldr	r7, [r1, #16]
 8006932:	2f00      	cmp	r7, #0
 8006934:	d0a2      	beq.n	800687c <__sflush_r+0x18>
 8006936:	680a      	ldr	r2, [r1, #0]
 8006938:	600f      	str	r7, [r1, #0]
 800693a:	1bd2      	subs	r2, r2, r7
 800693c:	9201      	str	r2, [sp, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	079b      	lsls	r3, r3, #30
 8006942:	d100      	bne.n	8006946 <__sflush_r+0xe2>
 8006944:	694a      	ldr	r2, [r1, #20]
 8006946:	60a2      	str	r2, [r4, #8]
 8006948:	9b01      	ldr	r3, [sp, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	dc00      	bgt.n	8006950 <__sflush_r+0xec>
 800694e:	e795      	b.n	800687c <__sflush_r+0x18>
 8006950:	003a      	movs	r2, r7
 8006952:	0028      	movs	r0, r5
 8006954:	9b01      	ldr	r3, [sp, #4]
 8006956:	6a21      	ldr	r1, [r4, #32]
 8006958:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800695a:	47b0      	blx	r6
 800695c:	2800      	cmp	r0, #0
 800695e:	dc06      	bgt.n	800696e <__sflush_r+0x10a>
 8006960:	2340      	movs	r3, #64	; 0x40
 8006962:	2001      	movs	r0, #1
 8006964:	89a2      	ldrh	r2, [r4, #12]
 8006966:	4240      	negs	r0, r0
 8006968:	4313      	orrs	r3, r2
 800696a:	81a3      	strh	r3, [r4, #12]
 800696c:	e787      	b.n	800687e <__sflush_r+0x1a>
 800696e:	9b01      	ldr	r3, [sp, #4]
 8006970:	183f      	adds	r7, r7, r0
 8006972:	1a1b      	subs	r3, r3, r0
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	e7e7      	b.n	8006948 <__sflush_r+0xe4>
 8006978:	20400001 	.word	0x20400001

0800697c <_fflush_r>:
 800697c:	690b      	ldr	r3, [r1, #16]
 800697e:	b570      	push	{r4, r5, r6, lr}
 8006980:	0005      	movs	r5, r0
 8006982:	000c      	movs	r4, r1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d102      	bne.n	800698e <_fflush_r+0x12>
 8006988:	2500      	movs	r5, #0
 800698a:	0028      	movs	r0, r5
 800698c:	bd70      	pop	{r4, r5, r6, pc}
 800698e:	2800      	cmp	r0, #0
 8006990:	d004      	beq.n	800699c <_fflush_r+0x20>
 8006992:	6983      	ldr	r3, [r0, #24]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <_fflush_r+0x20>
 8006998:	f000 f892 	bl	8006ac0 <__sinit>
 800699c:	4b14      	ldr	r3, [pc, #80]	; (80069f0 <_fflush_r+0x74>)
 800699e:	429c      	cmp	r4, r3
 80069a0:	d11b      	bne.n	80069da <_fflush_r+0x5e>
 80069a2:	686c      	ldr	r4, [r5, #4]
 80069a4:	220c      	movs	r2, #12
 80069a6:	5ea3      	ldrsh	r3, [r4, r2]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0ed      	beq.n	8006988 <_fflush_r+0xc>
 80069ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069ae:	07d2      	lsls	r2, r2, #31
 80069b0:	d404      	bmi.n	80069bc <_fflush_r+0x40>
 80069b2:	059b      	lsls	r3, r3, #22
 80069b4:	d402      	bmi.n	80069bc <_fflush_r+0x40>
 80069b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069b8:	f000 f923 	bl	8006c02 <__retarget_lock_acquire_recursive>
 80069bc:	0028      	movs	r0, r5
 80069be:	0021      	movs	r1, r4
 80069c0:	f7ff ff50 	bl	8006864 <__sflush_r>
 80069c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069c6:	0005      	movs	r5, r0
 80069c8:	07db      	lsls	r3, r3, #31
 80069ca:	d4de      	bmi.n	800698a <_fflush_r+0xe>
 80069cc:	89a3      	ldrh	r3, [r4, #12]
 80069ce:	059b      	lsls	r3, r3, #22
 80069d0:	d4db      	bmi.n	800698a <_fflush_r+0xe>
 80069d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069d4:	f000 f916 	bl	8006c04 <__retarget_lock_release_recursive>
 80069d8:	e7d7      	b.n	800698a <_fflush_r+0xe>
 80069da:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <_fflush_r+0x78>)
 80069dc:	429c      	cmp	r4, r3
 80069de:	d101      	bne.n	80069e4 <_fflush_r+0x68>
 80069e0:	68ac      	ldr	r4, [r5, #8]
 80069e2:	e7df      	b.n	80069a4 <_fflush_r+0x28>
 80069e4:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <_fflush_r+0x7c>)
 80069e6:	429c      	cmp	r4, r3
 80069e8:	d1dc      	bne.n	80069a4 <_fflush_r+0x28>
 80069ea:	68ec      	ldr	r4, [r5, #12]
 80069ec:	e7da      	b.n	80069a4 <_fflush_r+0x28>
 80069ee:	46c0      	nop			; (mov r8, r8)
 80069f0:	08007a24 	.word	0x08007a24
 80069f4:	08007a44 	.word	0x08007a44
 80069f8:	08007a04 	.word	0x08007a04

080069fc <std>:
 80069fc:	2300      	movs	r3, #0
 80069fe:	b510      	push	{r4, lr}
 8006a00:	0004      	movs	r4, r0
 8006a02:	6003      	str	r3, [r0, #0]
 8006a04:	6043      	str	r3, [r0, #4]
 8006a06:	6083      	str	r3, [r0, #8]
 8006a08:	8181      	strh	r1, [r0, #12]
 8006a0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006a0c:	0019      	movs	r1, r3
 8006a0e:	81c2      	strh	r2, [r0, #14]
 8006a10:	6103      	str	r3, [r0, #16]
 8006a12:	6143      	str	r3, [r0, #20]
 8006a14:	6183      	str	r3, [r0, #24]
 8006a16:	2208      	movs	r2, #8
 8006a18:	305c      	adds	r0, #92	; 0x5c
 8006a1a:	f7ff fdb7 	bl	800658c <memset>
 8006a1e:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <std+0x38>)
 8006a20:	6263      	str	r3, [r4, #36]	; 0x24
 8006a22:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <std+0x3c>)
 8006a24:	6224      	str	r4, [r4, #32]
 8006a26:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a28:	4b04      	ldr	r3, [pc, #16]	; (8006a3c <std+0x40>)
 8006a2a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a2c:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <std+0x44>)
 8006a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8006a30:	bd10      	pop	{r4, pc}
 8006a32:	46c0      	nop			; (mov r8, r8)
 8006a34:	0800741d 	.word	0x0800741d
 8006a38:	08007445 	.word	0x08007445
 8006a3c:	0800747d 	.word	0x0800747d
 8006a40:	080074a9 	.word	0x080074a9

08006a44 <_cleanup_r>:
 8006a44:	b510      	push	{r4, lr}
 8006a46:	4902      	ldr	r1, [pc, #8]	; (8006a50 <_cleanup_r+0xc>)
 8006a48:	f000 f8ba 	bl	8006bc0 <_fwalk_reent>
 8006a4c:	bd10      	pop	{r4, pc}
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	0800697d 	.word	0x0800697d

08006a54 <__sfmoreglue>:
 8006a54:	b570      	push	{r4, r5, r6, lr}
 8006a56:	2568      	movs	r5, #104	; 0x68
 8006a58:	1e4a      	subs	r2, r1, #1
 8006a5a:	4355      	muls	r5, r2
 8006a5c:	000e      	movs	r6, r1
 8006a5e:	0029      	movs	r1, r5
 8006a60:	3174      	adds	r1, #116	; 0x74
 8006a62:	f000 f987 	bl	8006d74 <_malloc_r>
 8006a66:	1e04      	subs	r4, r0, #0
 8006a68:	d008      	beq.n	8006a7c <__sfmoreglue+0x28>
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	002a      	movs	r2, r5
 8006a6e:	6001      	str	r1, [r0, #0]
 8006a70:	6046      	str	r6, [r0, #4]
 8006a72:	300c      	adds	r0, #12
 8006a74:	60a0      	str	r0, [r4, #8]
 8006a76:	3268      	adds	r2, #104	; 0x68
 8006a78:	f7ff fd88 	bl	800658c <memset>
 8006a7c:	0020      	movs	r0, r4
 8006a7e:	bd70      	pop	{r4, r5, r6, pc}

08006a80 <__sfp_lock_acquire>:
 8006a80:	b510      	push	{r4, lr}
 8006a82:	4802      	ldr	r0, [pc, #8]	; (8006a8c <__sfp_lock_acquire+0xc>)
 8006a84:	f000 f8bd 	bl	8006c02 <__retarget_lock_acquire_recursive>
 8006a88:	bd10      	pop	{r4, pc}
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	20000b2c 	.word	0x20000b2c

08006a90 <__sfp_lock_release>:
 8006a90:	b510      	push	{r4, lr}
 8006a92:	4802      	ldr	r0, [pc, #8]	; (8006a9c <__sfp_lock_release+0xc>)
 8006a94:	f000 f8b6 	bl	8006c04 <__retarget_lock_release_recursive>
 8006a98:	bd10      	pop	{r4, pc}
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	20000b2c 	.word	0x20000b2c

08006aa0 <__sinit_lock_acquire>:
 8006aa0:	b510      	push	{r4, lr}
 8006aa2:	4802      	ldr	r0, [pc, #8]	; (8006aac <__sinit_lock_acquire+0xc>)
 8006aa4:	f000 f8ad 	bl	8006c02 <__retarget_lock_acquire_recursive>
 8006aa8:	bd10      	pop	{r4, pc}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	20000b27 	.word	0x20000b27

08006ab0 <__sinit_lock_release>:
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	4802      	ldr	r0, [pc, #8]	; (8006abc <__sinit_lock_release+0xc>)
 8006ab4:	f000 f8a6 	bl	8006c04 <__retarget_lock_release_recursive>
 8006ab8:	bd10      	pop	{r4, pc}
 8006aba:	46c0      	nop			; (mov r8, r8)
 8006abc:	20000b27 	.word	0x20000b27

08006ac0 <__sinit>:
 8006ac0:	b513      	push	{r0, r1, r4, lr}
 8006ac2:	0004      	movs	r4, r0
 8006ac4:	f7ff ffec 	bl	8006aa0 <__sinit_lock_acquire>
 8006ac8:	69a3      	ldr	r3, [r4, #24]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <__sinit+0x14>
 8006ace:	f7ff ffef 	bl	8006ab0 <__sinit_lock_release>
 8006ad2:	bd13      	pop	{r0, r1, r4, pc}
 8006ad4:	64a3      	str	r3, [r4, #72]	; 0x48
 8006ad6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006ad8:	6523      	str	r3, [r4, #80]	; 0x50
 8006ada:	4b13      	ldr	r3, [pc, #76]	; (8006b28 <__sinit+0x68>)
 8006adc:	4a13      	ldr	r2, [pc, #76]	; (8006b2c <__sinit+0x6c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ae2:	9301      	str	r3, [sp, #4]
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	d101      	bne.n	8006aec <__sinit+0x2c>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	61a3      	str	r3, [r4, #24]
 8006aec:	0020      	movs	r0, r4
 8006aee:	f000 f81f 	bl	8006b30 <__sfp>
 8006af2:	6060      	str	r0, [r4, #4]
 8006af4:	0020      	movs	r0, r4
 8006af6:	f000 f81b 	bl	8006b30 <__sfp>
 8006afa:	60a0      	str	r0, [r4, #8]
 8006afc:	0020      	movs	r0, r4
 8006afe:	f000 f817 	bl	8006b30 <__sfp>
 8006b02:	2200      	movs	r2, #0
 8006b04:	2104      	movs	r1, #4
 8006b06:	60e0      	str	r0, [r4, #12]
 8006b08:	6860      	ldr	r0, [r4, #4]
 8006b0a:	f7ff ff77 	bl	80069fc <std>
 8006b0e:	2201      	movs	r2, #1
 8006b10:	2109      	movs	r1, #9
 8006b12:	68a0      	ldr	r0, [r4, #8]
 8006b14:	f7ff ff72 	bl	80069fc <std>
 8006b18:	2202      	movs	r2, #2
 8006b1a:	2112      	movs	r1, #18
 8006b1c:	68e0      	ldr	r0, [r4, #12]
 8006b1e:	f7ff ff6d 	bl	80069fc <std>
 8006b22:	2301      	movs	r3, #1
 8006b24:	61a3      	str	r3, [r4, #24]
 8006b26:	e7d2      	b.n	8006ace <__sinit+0xe>
 8006b28:	08007a00 	.word	0x08007a00
 8006b2c:	08006a45 	.word	0x08006a45

08006b30 <__sfp>:
 8006b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b32:	0007      	movs	r7, r0
 8006b34:	f7ff ffa4 	bl	8006a80 <__sfp_lock_acquire>
 8006b38:	4b1f      	ldr	r3, [pc, #124]	; (8006bb8 <__sfp+0x88>)
 8006b3a:	681e      	ldr	r6, [r3, #0]
 8006b3c:	69b3      	ldr	r3, [r6, #24]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <__sfp+0x18>
 8006b42:	0030      	movs	r0, r6
 8006b44:	f7ff ffbc 	bl	8006ac0 <__sinit>
 8006b48:	3648      	adds	r6, #72	; 0x48
 8006b4a:	68b4      	ldr	r4, [r6, #8]
 8006b4c:	6873      	ldr	r3, [r6, #4]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	d504      	bpl.n	8006b5c <__sfp+0x2c>
 8006b52:	6833      	ldr	r3, [r6, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d022      	beq.n	8006b9e <__sfp+0x6e>
 8006b58:	6836      	ldr	r6, [r6, #0]
 8006b5a:	e7f6      	b.n	8006b4a <__sfp+0x1a>
 8006b5c:	220c      	movs	r2, #12
 8006b5e:	5ea5      	ldrsh	r5, [r4, r2]
 8006b60:	2d00      	cmp	r5, #0
 8006b62:	d11a      	bne.n	8006b9a <__sfp+0x6a>
 8006b64:	0020      	movs	r0, r4
 8006b66:	4b15      	ldr	r3, [pc, #84]	; (8006bbc <__sfp+0x8c>)
 8006b68:	3058      	adds	r0, #88	; 0x58
 8006b6a:	60e3      	str	r3, [r4, #12]
 8006b6c:	6665      	str	r5, [r4, #100]	; 0x64
 8006b6e:	f000 f847 	bl	8006c00 <__retarget_lock_init_recursive>
 8006b72:	f7ff ff8d 	bl	8006a90 <__sfp_lock_release>
 8006b76:	0020      	movs	r0, r4
 8006b78:	2208      	movs	r2, #8
 8006b7a:	0029      	movs	r1, r5
 8006b7c:	6025      	str	r5, [r4, #0]
 8006b7e:	60a5      	str	r5, [r4, #8]
 8006b80:	6065      	str	r5, [r4, #4]
 8006b82:	6125      	str	r5, [r4, #16]
 8006b84:	6165      	str	r5, [r4, #20]
 8006b86:	61a5      	str	r5, [r4, #24]
 8006b88:	305c      	adds	r0, #92	; 0x5c
 8006b8a:	f7ff fcff 	bl	800658c <memset>
 8006b8e:	6365      	str	r5, [r4, #52]	; 0x34
 8006b90:	63a5      	str	r5, [r4, #56]	; 0x38
 8006b92:	64a5      	str	r5, [r4, #72]	; 0x48
 8006b94:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006b96:	0020      	movs	r0, r4
 8006b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b9a:	3468      	adds	r4, #104	; 0x68
 8006b9c:	e7d7      	b.n	8006b4e <__sfp+0x1e>
 8006b9e:	2104      	movs	r1, #4
 8006ba0:	0038      	movs	r0, r7
 8006ba2:	f7ff ff57 	bl	8006a54 <__sfmoreglue>
 8006ba6:	1e04      	subs	r4, r0, #0
 8006ba8:	6030      	str	r0, [r6, #0]
 8006baa:	d1d5      	bne.n	8006b58 <__sfp+0x28>
 8006bac:	f7ff ff70 	bl	8006a90 <__sfp_lock_release>
 8006bb0:	230c      	movs	r3, #12
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	e7ef      	b.n	8006b96 <__sfp+0x66>
 8006bb6:	46c0      	nop			; (mov r8, r8)
 8006bb8:	08007a00 	.word	0x08007a00
 8006bbc:	ffff0001 	.word	0xffff0001

08006bc0 <_fwalk_reent>:
 8006bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc2:	0004      	movs	r4, r0
 8006bc4:	0006      	movs	r6, r0
 8006bc6:	2700      	movs	r7, #0
 8006bc8:	9101      	str	r1, [sp, #4]
 8006bca:	3448      	adds	r4, #72	; 0x48
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	68a5      	ldr	r5, [r4, #8]
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	9b00      	ldr	r3, [sp, #0]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	d504      	bpl.n	8006be4 <_fwalk_reent+0x24>
 8006bda:	6824      	ldr	r4, [r4, #0]
 8006bdc:	2c00      	cmp	r4, #0
 8006bde:	d1f5      	bne.n	8006bcc <_fwalk_reent+0xc>
 8006be0:	0038      	movs	r0, r7
 8006be2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006be4:	89ab      	ldrh	r3, [r5, #12]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d908      	bls.n	8006bfc <_fwalk_reent+0x3c>
 8006bea:	220e      	movs	r2, #14
 8006bec:	5eab      	ldrsh	r3, [r5, r2]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	d004      	beq.n	8006bfc <_fwalk_reent+0x3c>
 8006bf2:	0029      	movs	r1, r5
 8006bf4:	0030      	movs	r0, r6
 8006bf6:	9b01      	ldr	r3, [sp, #4]
 8006bf8:	4798      	blx	r3
 8006bfa:	4307      	orrs	r7, r0
 8006bfc:	3568      	adds	r5, #104	; 0x68
 8006bfe:	e7e8      	b.n	8006bd2 <_fwalk_reent+0x12>

08006c00 <__retarget_lock_init_recursive>:
 8006c00:	4770      	bx	lr

08006c02 <__retarget_lock_acquire_recursive>:
 8006c02:	4770      	bx	lr

08006c04 <__retarget_lock_release_recursive>:
 8006c04:	4770      	bx	lr
	...

08006c08 <__swhatbuf_r>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	000e      	movs	r6, r1
 8006c0c:	001d      	movs	r5, r3
 8006c0e:	230e      	movs	r3, #14
 8006c10:	5ec9      	ldrsh	r1, [r1, r3]
 8006c12:	0014      	movs	r4, r2
 8006c14:	b096      	sub	sp, #88	; 0x58
 8006c16:	2900      	cmp	r1, #0
 8006c18:	da07      	bge.n	8006c2a <__swhatbuf_r+0x22>
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	602b      	str	r3, [r5, #0]
 8006c1e:	89b3      	ldrh	r3, [r6, #12]
 8006c20:	061b      	lsls	r3, r3, #24
 8006c22:	d411      	bmi.n	8006c48 <__swhatbuf_r+0x40>
 8006c24:	2380      	movs	r3, #128	; 0x80
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	e00f      	b.n	8006c4a <__swhatbuf_r+0x42>
 8006c2a:	466a      	mov	r2, sp
 8006c2c:	f000 fc68 	bl	8007500 <_fstat_r>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	dbf2      	blt.n	8006c1a <__swhatbuf_r+0x12>
 8006c34:	23f0      	movs	r3, #240	; 0xf0
 8006c36:	9901      	ldr	r1, [sp, #4]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	4019      	ands	r1, r3
 8006c3c:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <__swhatbuf_r+0x4c>)
 8006c3e:	18c9      	adds	r1, r1, r3
 8006c40:	424b      	negs	r3, r1
 8006c42:	4159      	adcs	r1, r3
 8006c44:	6029      	str	r1, [r5, #0]
 8006c46:	e7ed      	b.n	8006c24 <__swhatbuf_r+0x1c>
 8006c48:	2340      	movs	r3, #64	; 0x40
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	6023      	str	r3, [r4, #0]
 8006c4e:	b016      	add	sp, #88	; 0x58
 8006c50:	bd70      	pop	{r4, r5, r6, pc}
 8006c52:	46c0      	nop			; (mov r8, r8)
 8006c54:	ffffe000 	.word	0xffffe000

08006c58 <__smakebuf_r>:
 8006c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c5a:	2602      	movs	r6, #2
 8006c5c:	898b      	ldrh	r3, [r1, #12]
 8006c5e:	0005      	movs	r5, r0
 8006c60:	000c      	movs	r4, r1
 8006c62:	4233      	tst	r3, r6
 8006c64:	d006      	beq.n	8006c74 <__smakebuf_r+0x1c>
 8006c66:	0023      	movs	r3, r4
 8006c68:	3347      	adds	r3, #71	; 0x47
 8006c6a:	6023      	str	r3, [r4, #0]
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	2301      	movs	r3, #1
 8006c70:	6163      	str	r3, [r4, #20]
 8006c72:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006c74:	466a      	mov	r2, sp
 8006c76:	ab01      	add	r3, sp, #4
 8006c78:	f7ff ffc6 	bl	8006c08 <__swhatbuf_r>
 8006c7c:	9900      	ldr	r1, [sp, #0]
 8006c7e:	0007      	movs	r7, r0
 8006c80:	0028      	movs	r0, r5
 8006c82:	f000 f877 	bl	8006d74 <_malloc_r>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d108      	bne.n	8006c9c <__smakebuf_r+0x44>
 8006c8a:	220c      	movs	r2, #12
 8006c8c:	5ea3      	ldrsh	r3, [r4, r2]
 8006c8e:	059a      	lsls	r2, r3, #22
 8006c90:	d4ef      	bmi.n	8006c72 <__smakebuf_r+0x1a>
 8006c92:	2203      	movs	r2, #3
 8006c94:	4393      	bics	r3, r2
 8006c96:	431e      	orrs	r6, r3
 8006c98:	81a6      	strh	r6, [r4, #12]
 8006c9a:	e7e4      	b.n	8006c66 <__smakebuf_r+0xe>
 8006c9c:	4b0f      	ldr	r3, [pc, #60]	; (8006cdc <__smakebuf_r+0x84>)
 8006c9e:	62ab      	str	r3, [r5, #40]	; 0x28
 8006ca0:	2380      	movs	r3, #128	; 0x80
 8006ca2:	89a2      	ldrh	r2, [r4, #12]
 8006ca4:	6020      	str	r0, [r4, #0]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	81a3      	strh	r3, [r4, #12]
 8006caa:	9b00      	ldr	r3, [sp, #0]
 8006cac:	6120      	str	r0, [r4, #16]
 8006cae:	6163      	str	r3, [r4, #20]
 8006cb0:	9b01      	ldr	r3, [sp, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d00d      	beq.n	8006cd2 <__smakebuf_r+0x7a>
 8006cb6:	0028      	movs	r0, r5
 8006cb8:	230e      	movs	r3, #14
 8006cba:	5ee1      	ldrsh	r1, [r4, r3]
 8006cbc:	f000 fc32 	bl	8007524 <_isatty_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d006      	beq.n	8006cd2 <__smakebuf_r+0x7a>
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	89a3      	ldrh	r3, [r4, #12]
 8006cc8:	4393      	bics	r3, r2
 8006cca:	001a      	movs	r2, r3
 8006ccc:	2301      	movs	r3, #1
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	89a0      	ldrh	r0, [r4, #12]
 8006cd4:	4307      	orrs	r7, r0
 8006cd6:	81a7      	strh	r7, [r4, #12]
 8006cd8:	e7cb      	b.n	8006c72 <__smakebuf_r+0x1a>
 8006cda:	46c0      	nop			; (mov r8, r8)
 8006cdc:	08006a45 	.word	0x08006a45

08006ce0 <_free_r>:
 8006ce0:	b570      	push	{r4, r5, r6, lr}
 8006ce2:	0005      	movs	r5, r0
 8006ce4:	2900      	cmp	r1, #0
 8006ce6:	d010      	beq.n	8006d0a <_free_r+0x2a>
 8006ce8:	1f0c      	subs	r4, r1, #4
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	da00      	bge.n	8006cf2 <_free_r+0x12>
 8006cf0:	18e4      	adds	r4, r4, r3
 8006cf2:	0028      	movs	r0, r5
 8006cf4:	f000 fc48 	bl	8007588 <__malloc_lock>
 8006cf8:	4a1d      	ldr	r2, [pc, #116]	; (8006d70 <_free_r+0x90>)
 8006cfa:	6813      	ldr	r3, [r2, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <_free_r+0x2c>
 8006d00:	6063      	str	r3, [r4, #4]
 8006d02:	6014      	str	r4, [r2, #0]
 8006d04:	0028      	movs	r0, r5
 8006d06:	f000 fc47 	bl	8007598 <__malloc_unlock>
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	42a3      	cmp	r3, r4
 8006d0e:	d908      	bls.n	8006d22 <_free_r+0x42>
 8006d10:	6821      	ldr	r1, [r4, #0]
 8006d12:	1860      	adds	r0, r4, r1
 8006d14:	4283      	cmp	r3, r0
 8006d16:	d1f3      	bne.n	8006d00 <_free_r+0x20>
 8006d18:	6818      	ldr	r0, [r3, #0]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	1841      	adds	r1, r0, r1
 8006d1e:	6021      	str	r1, [r4, #0]
 8006d20:	e7ee      	b.n	8006d00 <_free_r+0x20>
 8006d22:	001a      	movs	r2, r3
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <_free_r+0x4e>
 8006d2a:	42a3      	cmp	r3, r4
 8006d2c:	d9f9      	bls.n	8006d22 <_free_r+0x42>
 8006d2e:	6811      	ldr	r1, [r2, #0]
 8006d30:	1850      	adds	r0, r2, r1
 8006d32:	42a0      	cmp	r0, r4
 8006d34:	d10b      	bne.n	8006d4e <_free_r+0x6e>
 8006d36:	6820      	ldr	r0, [r4, #0]
 8006d38:	1809      	adds	r1, r1, r0
 8006d3a:	1850      	adds	r0, r2, r1
 8006d3c:	6011      	str	r1, [r2, #0]
 8006d3e:	4283      	cmp	r3, r0
 8006d40:	d1e0      	bne.n	8006d04 <_free_r+0x24>
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	1841      	adds	r1, r0, r1
 8006d48:	6011      	str	r1, [r2, #0]
 8006d4a:	6053      	str	r3, [r2, #4]
 8006d4c:	e7da      	b.n	8006d04 <_free_r+0x24>
 8006d4e:	42a0      	cmp	r0, r4
 8006d50:	d902      	bls.n	8006d58 <_free_r+0x78>
 8006d52:	230c      	movs	r3, #12
 8006d54:	602b      	str	r3, [r5, #0]
 8006d56:	e7d5      	b.n	8006d04 <_free_r+0x24>
 8006d58:	6821      	ldr	r1, [r4, #0]
 8006d5a:	1860      	adds	r0, r4, r1
 8006d5c:	4283      	cmp	r3, r0
 8006d5e:	d103      	bne.n	8006d68 <_free_r+0x88>
 8006d60:	6818      	ldr	r0, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	1841      	adds	r1, r0, r1
 8006d66:	6021      	str	r1, [r4, #0]
 8006d68:	6063      	str	r3, [r4, #4]
 8006d6a:	6054      	str	r4, [r2, #4]
 8006d6c:	e7ca      	b.n	8006d04 <_free_r+0x24>
 8006d6e:	46c0      	nop			; (mov r8, r8)
 8006d70:	200000dc 	.word	0x200000dc

08006d74 <_malloc_r>:
 8006d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d76:	2303      	movs	r3, #3
 8006d78:	1ccd      	adds	r5, r1, #3
 8006d7a:	439d      	bics	r5, r3
 8006d7c:	3508      	adds	r5, #8
 8006d7e:	0006      	movs	r6, r0
 8006d80:	2d0c      	cmp	r5, #12
 8006d82:	d21f      	bcs.n	8006dc4 <_malloc_r+0x50>
 8006d84:	250c      	movs	r5, #12
 8006d86:	42a9      	cmp	r1, r5
 8006d88:	d81e      	bhi.n	8006dc8 <_malloc_r+0x54>
 8006d8a:	0030      	movs	r0, r6
 8006d8c:	f000 fbfc 	bl	8007588 <__malloc_lock>
 8006d90:	4925      	ldr	r1, [pc, #148]	; (8006e28 <_malloc_r+0xb4>)
 8006d92:	680a      	ldr	r2, [r1, #0]
 8006d94:	0014      	movs	r4, r2
 8006d96:	2c00      	cmp	r4, #0
 8006d98:	d11a      	bne.n	8006dd0 <_malloc_r+0x5c>
 8006d9a:	4f24      	ldr	r7, [pc, #144]	; (8006e2c <_malloc_r+0xb8>)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d104      	bne.n	8006dac <_malloc_r+0x38>
 8006da2:	0021      	movs	r1, r4
 8006da4:	0030      	movs	r0, r6
 8006da6:	f000 fb27 	bl	80073f8 <_sbrk_r>
 8006daa:	6038      	str	r0, [r7, #0]
 8006dac:	0029      	movs	r1, r5
 8006dae:	0030      	movs	r0, r6
 8006db0:	f000 fb22 	bl	80073f8 <_sbrk_r>
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	d12b      	bne.n	8006e10 <_malloc_r+0x9c>
 8006db8:	230c      	movs	r3, #12
 8006dba:	0030      	movs	r0, r6
 8006dbc:	6033      	str	r3, [r6, #0]
 8006dbe:	f000 fbeb 	bl	8007598 <__malloc_unlock>
 8006dc2:	e003      	b.n	8006dcc <_malloc_r+0x58>
 8006dc4:	2d00      	cmp	r5, #0
 8006dc6:	dade      	bge.n	8006d86 <_malloc_r+0x12>
 8006dc8:	230c      	movs	r3, #12
 8006dca:	6033      	str	r3, [r6, #0]
 8006dcc:	2000      	movs	r0, #0
 8006dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	1b5b      	subs	r3, r3, r5
 8006dd4:	d419      	bmi.n	8006e0a <_malloc_r+0x96>
 8006dd6:	2b0b      	cmp	r3, #11
 8006dd8:	d903      	bls.n	8006de2 <_malloc_r+0x6e>
 8006dda:	6023      	str	r3, [r4, #0]
 8006ddc:	18e4      	adds	r4, r4, r3
 8006dde:	6025      	str	r5, [r4, #0]
 8006de0:	e003      	b.n	8006dea <_malloc_r+0x76>
 8006de2:	6863      	ldr	r3, [r4, #4]
 8006de4:	42a2      	cmp	r2, r4
 8006de6:	d10e      	bne.n	8006e06 <_malloc_r+0x92>
 8006de8:	600b      	str	r3, [r1, #0]
 8006dea:	0030      	movs	r0, r6
 8006dec:	f000 fbd4 	bl	8007598 <__malloc_unlock>
 8006df0:	0020      	movs	r0, r4
 8006df2:	2207      	movs	r2, #7
 8006df4:	300b      	adds	r0, #11
 8006df6:	1d23      	adds	r3, r4, #4
 8006df8:	4390      	bics	r0, r2
 8006dfa:	1ac2      	subs	r2, r0, r3
 8006dfc:	4298      	cmp	r0, r3
 8006dfe:	d0e6      	beq.n	8006dce <_malloc_r+0x5a>
 8006e00:	1a1b      	subs	r3, r3, r0
 8006e02:	50a3      	str	r3, [r4, r2]
 8006e04:	e7e3      	b.n	8006dce <_malloc_r+0x5a>
 8006e06:	6053      	str	r3, [r2, #4]
 8006e08:	e7ef      	b.n	8006dea <_malloc_r+0x76>
 8006e0a:	0022      	movs	r2, r4
 8006e0c:	6864      	ldr	r4, [r4, #4]
 8006e0e:	e7c2      	b.n	8006d96 <_malloc_r+0x22>
 8006e10:	2303      	movs	r3, #3
 8006e12:	1cc4      	adds	r4, r0, #3
 8006e14:	439c      	bics	r4, r3
 8006e16:	42a0      	cmp	r0, r4
 8006e18:	d0e1      	beq.n	8006dde <_malloc_r+0x6a>
 8006e1a:	1a21      	subs	r1, r4, r0
 8006e1c:	0030      	movs	r0, r6
 8006e1e:	f000 faeb 	bl	80073f8 <_sbrk_r>
 8006e22:	1c43      	adds	r3, r0, #1
 8006e24:	d1db      	bne.n	8006dde <_malloc_r+0x6a>
 8006e26:	e7c7      	b.n	8006db8 <_malloc_r+0x44>
 8006e28:	200000dc 	.word	0x200000dc
 8006e2c:	200000e0 	.word	0x200000e0

08006e30 <__sfputc_r>:
 8006e30:	6893      	ldr	r3, [r2, #8]
 8006e32:	b510      	push	{r4, lr}
 8006e34:	3b01      	subs	r3, #1
 8006e36:	6093      	str	r3, [r2, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	da04      	bge.n	8006e46 <__sfputc_r+0x16>
 8006e3c:	6994      	ldr	r4, [r2, #24]
 8006e3e:	42a3      	cmp	r3, r4
 8006e40:	db07      	blt.n	8006e52 <__sfputc_r+0x22>
 8006e42:	290a      	cmp	r1, #10
 8006e44:	d005      	beq.n	8006e52 <__sfputc_r+0x22>
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	1c58      	adds	r0, r3, #1
 8006e4a:	6010      	str	r0, [r2, #0]
 8006e4c:	7019      	strb	r1, [r3, #0]
 8006e4e:	0008      	movs	r0, r1
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	f7ff fc39 	bl	80066c8 <__swbuf_r>
 8006e56:	0001      	movs	r1, r0
 8006e58:	e7f9      	b.n	8006e4e <__sfputc_r+0x1e>

08006e5a <__sfputs_r>:
 8006e5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5c:	0006      	movs	r6, r0
 8006e5e:	000f      	movs	r7, r1
 8006e60:	0014      	movs	r4, r2
 8006e62:	18d5      	adds	r5, r2, r3
 8006e64:	42ac      	cmp	r4, r5
 8006e66:	d101      	bne.n	8006e6c <__sfputs_r+0x12>
 8006e68:	2000      	movs	r0, #0
 8006e6a:	e007      	b.n	8006e7c <__sfputs_r+0x22>
 8006e6c:	7821      	ldrb	r1, [r4, #0]
 8006e6e:	003a      	movs	r2, r7
 8006e70:	0030      	movs	r0, r6
 8006e72:	f7ff ffdd 	bl	8006e30 <__sfputc_r>
 8006e76:	3401      	adds	r4, #1
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d1f3      	bne.n	8006e64 <__sfputs_r+0xa>
 8006e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e80 <_vfiprintf_r>:
 8006e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e82:	b0a1      	sub	sp, #132	; 0x84
 8006e84:	0006      	movs	r6, r0
 8006e86:	000c      	movs	r4, r1
 8006e88:	001f      	movs	r7, r3
 8006e8a:	9203      	str	r2, [sp, #12]
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	d004      	beq.n	8006e9a <_vfiprintf_r+0x1a>
 8006e90:	6983      	ldr	r3, [r0, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <_vfiprintf_r+0x1a>
 8006e96:	f7ff fe13 	bl	8006ac0 <__sinit>
 8006e9a:	4b8e      	ldr	r3, [pc, #568]	; (80070d4 <_vfiprintf_r+0x254>)
 8006e9c:	429c      	cmp	r4, r3
 8006e9e:	d11c      	bne.n	8006eda <_vfiprintf_r+0x5a>
 8006ea0:	6874      	ldr	r4, [r6, #4]
 8006ea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ea4:	07db      	lsls	r3, r3, #31
 8006ea6:	d405      	bmi.n	8006eb4 <_vfiprintf_r+0x34>
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	059b      	lsls	r3, r3, #22
 8006eac:	d402      	bmi.n	8006eb4 <_vfiprintf_r+0x34>
 8006eae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eb0:	f7ff fea7 	bl	8006c02 <__retarget_lock_acquire_recursive>
 8006eb4:	89a3      	ldrh	r3, [r4, #12]
 8006eb6:	071b      	lsls	r3, r3, #28
 8006eb8:	d502      	bpl.n	8006ec0 <_vfiprintf_r+0x40>
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d11d      	bne.n	8006efc <_vfiprintf_r+0x7c>
 8006ec0:	0021      	movs	r1, r4
 8006ec2:	0030      	movs	r0, r6
 8006ec4:	f7ff fc56 	bl	8006774 <__swsetup_r>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d017      	beq.n	8006efc <_vfiprintf_r+0x7c>
 8006ecc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ece:	07db      	lsls	r3, r3, #31
 8006ed0:	d50d      	bpl.n	8006eee <_vfiprintf_r+0x6e>
 8006ed2:	2001      	movs	r0, #1
 8006ed4:	4240      	negs	r0, r0
 8006ed6:	b021      	add	sp, #132	; 0x84
 8006ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eda:	4b7f      	ldr	r3, [pc, #508]	; (80070d8 <_vfiprintf_r+0x258>)
 8006edc:	429c      	cmp	r4, r3
 8006ede:	d101      	bne.n	8006ee4 <_vfiprintf_r+0x64>
 8006ee0:	68b4      	ldr	r4, [r6, #8]
 8006ee2:	e7de      	b.n	8006ea2 <_vfiprintf_r+0x22>
 8006ee4:	4b7d      	ldr	r3, [pc, #500]	; (80070dc <_vfiprintf_r+0x25c>)
 8006ee6:	429c      	cmp	r4, r3
 8006ee8:	d1db      	bne.n	8006ea2 <_vfiprintf_r+0x22>
 8006eea:	68f4      	ldr	r4, [r6, #12]
 8006eec:	e7d9      	b.n	8006ea2 <_vfiprintf_r+0x22>
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	059b      	lsls	r3, r3, #22
 8006ef2:	d4ee      	bmi.n	8006ed2 <_vfiprintf_r+0x52>
 8006ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ef6:	f7ff fe85 	bl	8006c04 <__retarget_lock_release_recursive>
 8006efa:	e7ea      	b.n	8006ed2 <_vfiprintf_r+0x52>
 8006efc:	2300      	movs	r3, #0
 8006efe:	ad08      	add	r5, sp, #32
 8006f00:	616b      	str	r3, [r5, #20]
 8006f02:	3320      	adds	r3, #32
 8006f04:	766b      	strb	r3, [r5, #25]
 8006f06:	3310      	adds	r3, #16
 8006f08:	76ab      	strb	r3, [r5, #26]
 8006f0a:	9707      	str	r7, [sp, #28]
 8006f0c:	9f03      	ldr	r7, [sp, #12]
 8006f0e:	783b      	ldrb	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <_vfiprintf_r+0x98>
 8006f14:	2b25      	cmp	r3, #37	; 0x25
 8006f16:	d14e      	bne.n	8006fb6 <_vfiprintf_r+0x136>
 8006f18:	9b03      	ldr	r3, [sp, #12]
 8006f1a:	1afb      	subs	r3, r7, r3
 8006f1c:	9305      	str	r3, [sp, #20]
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	429f      	cmp	r7, r3
 8006f22:	d00d      	beq.n	8006f40 <_vfiprintf_r+0xc0>
 8006f24:	9b05      	ldr	r3, [sp, #20]
 8006f26:	0021      	movs	r1, r4
 8006f28:	0030      	movs	r0, r6
 8006f2a:	9a03      	ldr	r2, [sp, #12]
 8006f2c:	f7ff ff95 	bl	8006e5a <__sfputs_r>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d100      	bne.n	8006f36 <_vfiprintf_r+0xb6>
 8006f34:	e0b5      	b.n	80070a2 <_vfiprintf_r+0x222>
 8006f36:	696a      	ldr	r2, [r5, #20]
 8006f38:	9b05      	ldr	r3, [sp, #20]
 8006f3a:	4694      	mov	ip, r2
 8006f3c:	4463      	add	r3, ip
 8006f3e:	616b      	str	r3, [r5, #20]
 8006f40:	783b      	ldrb	r3, [r7, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d100      	bne.n	8006f48 <_vfiprintf_r+0xc8>
 8006f46:	e0ac      	b.n	80070a2 <_vfiprintf_r+0x222>
 8006f48:	2201      	movs	r2, #1
 8006f4a:	1c7b      	adds	r3, r7, #1
 8006f4c:	9303      	str	r3, [sp, #12]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	4252      	negs	r2, r2
 8006f52:	606a      	str	r2, [r5, #4]
 8006f54:	a904      	add	r1, sp, #16
 8006f56:	3254      	adds	r2, #84	; 0x54
 8006f58:	1852      	adds	r2, r2, r1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	60eb      	str	r3, [r5, #12]
 8006f5e:	60ab      	str	r3, [r5, #8]
 8006f60:	7013      	strb	r3, [r2, #0]
 8006f62:	65ab      	str	r3, [r5, #88]	; 0x58
 8006f64:	9b03      	ldr	r3, [sp, #12]
 8006f66:	2205      	movs	r2, #5
 8006f68:	7819      	ldrb	r1, [r3, #0]
 8006f6a:	485d      	ldr	r0, [pc, #372]	; (80070e0 <_vfiprintf_r+0x260>)
 8006f6c:	f000 fb00 	bl	8007570 <memchr>
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	1c5f      	adds	r7, r3, #1
 8006f74:	2800      	cmp	r0, #0
 8006f76:	d120      	bne.n	8006fba <_vfiprintf_r+0x13a>
 8006f78:	682a      	ldr	r2, [r5, #0]
 8006f7a:	06d3      	lsls	r3, r2, #27
 8006f7c:	d504      	bpl.n	8006f88 <_vfiprintf_r+0x108>
 8006f7e:	2353      	movs	r3, #83	; 0x53
 8006f80:	a904      	add	r1, sp, #16
 8006f82:	185b      	adds	r3, r3, r1
 8006f84:	2120      	movs	r1, #32
 8006f86:	7019      	strb	r1, [r3, #0]
 8006f88:	0713      	lsls	r3, r2, #28
 8006f8a:	d504      	bpl.n	8006f96 <_vfiprintf_r+0x116>
 8006f8c:	2353      	movs	r3, #83	; 0x53
 8006f8e:	a904      	add	r1, sp, #16
 8006f90:	185b      	adds	r3, r3, r1
 8006f92:	212b      	movs	r1, #43	; 0x2b
 8006f94:	7019      	strb	r1, [r3, #0]
 8006f96:	9b03      	ldr	r3, [sp, #12]
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f9c:	d016      	beq.n	8006fcc <_vfiprintf_r+0x14c>
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	68eb      	ldr	r3, [r5, #12]
 8006fa2:	9f03      	ldr	r7, [sp, #12]
 8006fa4:	783a      	ldrb	r2, [r7, #0]
 8006fa6:	1c78      	adds	r0, r7, #1
 8006fa8:	3a30      	subs	r2, #48	; 0x30
 8006faa:	4684      	mov	ip, r0
 8006fac:	2a09      	cmp	r2, #9
 8006fae:	d94f      	bls.n	8007050 <_vfiprintf_r+0x1d0>
 8006fb0:	2900      	cmp	r1, #0
 8006fb2:	d111      	bne.n	8006fd8 <_vfiprintf_r+0x158>
 8006fb4:	e017      	b.n	8006fe6 <_vfiprintf_r+0x166>
 8006fb6:	3701      	adds	r7, #1
 8006fb8:	e7a9      	b.n	8006f0e <_vfiprintf_r+0x8e>
 8006fba:	4b49      	ldr	r3, [pc, #292]	; (80070e0 <_vfiprintf_r+0x260>)
 8006fbc:	682a      	ldr	r2, [r5, #0]
 8006fbe:	1ac0      	subs	r0, r0, r3
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	4083      	lsls	r3, r0
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	602b      	str	r3, [r5, #0]
 8006fc8:	9703      	str	r7, [sp, #12]
 8006fca:	e7cb      	b.n	8006f64 <_vfiprintf_r+0xe4>
 8006fcc:	9b07      	ldr	r3, [sp, #28]
 8006fce:	1d19      	adds	r1, r3, #4
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	9107      	str	r1, [sp, #28]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	db01      	blt.n	8006fdc <_vfiprintf_r+0x15c>
 8006fd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fda:	e004      	b.n	8006fe6 <_vfiprintf_r+0x166>
 8006fdc:	425b      	negs	r3, r3
 8006fde:	60eb      	str	r3, [r5, #12]
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	602b      	str	r3, [r5, #0]
 8006fe6:	783b      	ldrb	r3, [r7, #0]
 8006fe8:	2b2e      	cmp	r3, #46	; 0x2e
 8006fea:	d10a      	bne.n	8007002 <_vfiprintf_r+0x182>
 8006fec:	787b      	ldrb	r3, [r7, #1]
 8006fee:	2b2a      	cmp	r3, #42	; 0x2a
 8006ff0:	d137      	bne.n	8007062 <_vfiprintf_r+0x1e2>
 8006ff2:	9b07      	ldr	r3, [sp, #28]
 8006ff4:	3702      	adds	r7, #2
 8006ff6:	1d1a      	adds	r2, r3, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	9207      	str	r2, [sp, #28]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	db2d      	blt.n	800705c <_vfiprintf_r+0x1dc>
 8007000:	9309      	str	r3, [sp, #36]	; 0x24
 8007002:	2203      	movs	r2, #3
 8007004:	7839      	ldrb	r1, [r7, #0]
 8007006:	4837      	ldr	r0, [pc, #220]	; (80070e4 <_vfiprintf_r+0x264>)
 8007008:	f000 fab2 	bl	8007570 <memchr>
 800700c:	2800      	cmp	r0, #0
 800700e:	d007      	beq.n	8007020 <_vfiprintf_r+0x1a0>
 8007010:	4b34      	ldr	r3, [pc, #208]	; (80070e4 <_vfiprintf_r+0x264>)
 8007012:	682a      	ldr	r2, [r5, #0]
 8007014:	1ac0      	subs	r0, r0, r3
 8007016:	2340      	movs	r3, #64	; 0x40
 8007018:	4083      	lsls	r3, r0
 800701a:	4313      	orrs	r3, r2
 800701c:	3701      	adds	r7, #1
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	7839      	ldrb	r1, [r7, #0]
 8007022:	1c7b      	adds	r3, r7, #1
 8007024:	2206      	movs	r2, #6
 8007026:	4830      	ldr	r0, [pc, #192]	; (80070e8 <_vfiprintf_r+0x268>)
 8007028:	9303      	str	r3, [sp, #12]
 800702a:	7629      	strb	r1, [r5, #24]
 800702c:	f000 faa0 	bl	8007570 <memchr>
 8007030:	2800      	cmp	r0, #0
 8007032:	d045      	beq.n	80070c0 <_vfiprintf_r+0x240>
 8007034:	4b2d      	ldr	r3, [pc, #180]	; (80070ec <_vfiprintf_r+0x26c>)
 8007036:	2b00      	cmp	r3, #0
 8007038:	d127      	bne.n	800708a <_vfiprintf_r+0x20a>
 800703a:	2207      	movs	r2, #7
 800703c:	9b07      	ldr	r3, [sp, #28]
 800703e:	3307      	adds	r3, #7
 8007040:	4393      	bics	r3, r2
 8007042:	3308      	adds	r3, #8
 8007044:	9307      	str	r3, [sp, #28]
 8007046:	696b      	ldr	r3, [r5, #20]
 8007048:	9a04      	ldr	r2, [sp, #16]
 800704a:	189b      	adds	r3, r3, r2
 800704c:	616b      	str	r3, [r5, #20]
 800704e:	e75d      	b.n	8006f0c <_vfiprintf_r+0x8c>
 8007050:	210a      	movs	r1, #10
 8007052:	434b      	muls	r3, r1
 8007054:	4667      	mov	r7, ip
 8007056:	189b      	adds	r3, r3, r2
 8007058:	3909      	subs	r1, #9
 800705a:	e7a3      	b.n	8006fa4 <_vfiprintf_r+0x124>
 800705c:	2301      	movs	r3, #1
 800705e:	425b      	negs	r3, r3
 8007060:	e7ce      	b.n	8007000 <_vfiprintf_r+0x180>
 8007062:	2300      	movs	r3, #0
 8007064:	001a      	movs	r2, r3
 8007066:	3701      	adds	r7, #1
 8007068:	606b      	str	r3, [r5, #4]
 800706a:	7839      	ldrb	r1, [r7, #0]
 800706c:	1c78      	adds	r0, r7, #1
 800706e:	3930      	subs	r1, #48	; 0x30
 8007070:	4684      	mov	ip, r0
 8007072:	2909      	cmp	r1, #9
 8007074:	d903      	bls.n	800707e <_vfiprintf_r+0x1fe>
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0c3      	beq.n	8007002 <_vfiprintf_r+0x182>
 800707a:	9209      	str	r2, [sp, #36]	; 0x24
 800707c:	e7c1      	b.n	8007002 <_vfiprintf_r+0x182>
 800707e:	230a      	movs	r3, #10
 8007080:	435a      	muls	r2, r3
 8007082:	4667      	mov	r7, ip
 8007084:	1852      	adds	r2, r2, r1
 8007086:	3b09      	subs	r3, #9
 8007088:	e7ef      	b.n	800706a <_vfiprintf_r+0x1ea>
 800708a:	ab07      	add	r3, sp, #28
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	0022      	movs	r2, r4
 8007090:	0029      	movs	r1, r5
 8007092:	0030      	movs	r0, r6
 8007094:	4b16      	ldr	r3, [pc, #88]	; (80070f0 <_vfiprintf_r+0x270>)
 8007096:	e000      	b.n	800709a <_vfiprintf_r+0x21a>
 8007098:	bf00      	nop
 800709a:	9004      	str	r0, [sp, #16]
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	3301      	adds	r3, #1
 80070a0:	d1d1      	bne.n	8007046 <_vfiprintf_r+0x1c6>
 80070a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070a4:	07db      	lsls	r3, r3, #31
 80070a6:	d405      	bmi.n	80070b4 <_vfiprintf_r+0x234>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	059b      	lsls	r3, r3, #22
 80070ac:	d402      	bmi.n	80070b4 <_vfiprintf_r+0x234>
 80070ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070b0:	f7ff fda8 	bl	8006c04 <__retarget_lock_release_recursive>
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	065b      	lsls	r3, r3, #25
 80070b8:	d500      	bpl.n	80070bc <_vfiprintf_r+0x23c>
 80070ba:	e70a      	b.n	8006ed2 <_vfiprintf_r+0x52>
 80070bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80070be:	e70a      	b.n	8006ed6 <_vfiprintf_r+0x56>
 80070c0:	ab07      	add	r3, sp, #28
 80070c2:	9300      	str	r3, [sp, #0]
 80070c4:	0022      	movs	r2, r4
 80070c6:	0029      	movs	r1, r5
 80070c8:	0030      	movs	r0, r6
 80070ca:	4b09      	ldr	r3, [pc, #36]	; (80070f0 <_vfiprintf_r+0x270>)
 80070cc:	f000 f882 	bl	80071d4 <_printf_i>
 80070d0:	e7e3      	b.n	800709a <_vfiprintf_r+0x21a>
 80070d2:	46c0      	nop			; (mov r8, r8)
 80070d4:	08007a24 	.word	0x08007a24
 80070d8:	08007a44 	.word	0x08007a44
 80070dc:	08007a04 	.word	0x08007a04
 80070e0:	08007a64 	.word	0x08007a64
 80070e4:	08007a6a 	.word	0x08007a6a
 80070e8:	08007a6e 	.word	0x08007a6e
 80070ec:	00000000 	.word	0x00000000
 80070f0:	08006e5b 	.word	0x08006e5b

080070f4 <_printf_common>:
 80070f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070f6:	0015      	movs	r5, r2
 80070f8:	9301      	str	r3, [sp, #4]
 80070fa:	688a      	ldr	r2, [r1, #8]
 80070fc:	690b      	ldr	r3, [r1, #16]
 80070fe:	000c      	movs	r4, r1
 8007100:	9000      	str	r0, [sp, #0]
 8007102:	4293      	cmp	r3, r2
 8007104:	da00      	bge.n	8007108 <_printf_common+0x14>
 8007106:	0013      	movs	r3, r2
 8007108:	0022      	movs	r2, r4
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	3243      	adds	r2, #67	; 0x43
 800710e:	7812      	ldrb	r2, [r2, #0]
 8007110:	2a00      	cmp	r2, #0
 8007112:	d001      	beq.n	8007118 <_printf_common+0x24>
 8007114:	3301      	adds	r3, #1
 8007116:	602b      	str	r3, [r5, #0]
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	069b      	lsls	r3, r3, #26
 800711c:	d502      	bpl.n	8007124 <_printf_common+0x30>
 800711e:	682b      	ldr	r3, [r5, #0]
 8007120:	3302      	adds	r3, #2
 8007122:	602b      	str	r3, [r5, #0]
 8007124:	6822      	ldr	r2, [r4, #0]
 8007126:	2306      	movs	r3, #6
 8007128:	0017      	movs	r7, r2
 800712a:	401f      	ands	r7, r3
 800712c:	421a      	tst	r2, r3
 800712e:	d027      	beq.n	8007180 <_printf_common+0x8c>
 8007130:	0023      	movs	r3, r4
 8007132:	3343      	adds	r3, #67	; 0x43
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	1e5a      	subs	r2, r3, #1
 8007138:	4193      	sbcs	r3, r2
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	0692      	lsls	r2, r2, #26
 800713e:	d430      	bmi.n	80071a2 <_printf_common+0xae>
 8007140:	0022      	movs	r2, r4
 8007142:	9901      	ldr	r1, [sp, #4]
 8007144:	9800      	ldr	r0, [sp, #0]
 8007146:	9e08      	ldr	r6, [sp, #32]
 8007148:	3243      	adds	r2, #67	; 0x43
 800714a:	47b0      	blx	r6
 800714c:	1c43      	adds	r3, r0, #1
 800714e:	d025      	beq.n	800719c <_printf_common+0xa8>
 8007150:	2306      	movs	r3, #6
 8007152:	6820      	ldr	r0, [r4, #0]
 8007154:	682a      	ldr	r2, [r5, #0]
 8007156:	68e1      	ldr	r1, [r4, #12]
 8007158:	2500      	movs	r5, #0
 800715a:	4003      	ands	r3, r0
 800715c:	2b04      	cmp	r3, #4
 800715e:	d103      	bne.n	8007168 <_printf_common+0x74>
 8007160:	1a8d      	subs	r5, r1, r2
 8007162:	43eb      	mvns	r3, r5
 8007164:	17db      	asrs	r3, r3, #31
 8007166:	401d      	ands	r5, r3
 8007168:	68a3      	ldr	r3, [r4, #8]
 800716a:	6922      	ldr	r2, [r4, #16]
 800716c:	4293      	cmp	r3, r2
 800716e:	dd01      	ble.n	8007174 <_printf_common+0x80>
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	18ed      	adds	r5, r5, r3
 8007174:	2700      	movs	r7, #0
 8007176:	42bd      	cmp	r5, r7
 8007178:	d120      	bne.n	80071bc <_printf_common+0xc8>
 800717a:	2000      	movs	r0, #0
 800717c:	e010      	b.n	80071a0 <_printf_common+0xac>
 800717e:	3701      	adds	r7, #1
 8007180:	68e3      	ldr	r3, [r4, #12]
 8007182:	682a      	ldr	r2, [r5, #0]
 8007184:	1a9b      	subs	r3, r3, r2
 8007186:	42bb      	cmp	r3, r7
 8007188:	ddd2      	ble.n	8007130 <_printf_common+0x3c>
 800718a:	0022      	movs	r2, r4
 800718c:	2301      	movs	r3, #1
 800718e:	9901      	ldr	r1, [sp, #4]
 8007190:	9800      	ldr	r0, [sp, #0]
 8007192:	9e08      	ldr	r6, [sp, #32]
 8007194:	3219      	adds	r2, #25
 8007196:	47b0      	blx	r6
 8007198:	1c43      	adds	r3, r0, #1
 800719a:	d1f0      	bne.n	800717e <_printf_common+0x8a>
 800719c:	2001      	movs	r0, #1
 800719e:	4240      	negs	r0, r0
 80071a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80071a2:	2030      	movs	r0, #48	; 0x30
 80071a4:	18e1      	adds	r1, r4, r3
 80071a6:	3143      	adds	r1, #67	; 0x43
 80071a8:	7008      	strb	r0, [r1, #0]
 80071aa:	0021      	movs	r1, r4
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	3145      	adds	r1, #69	; 0x45
 80071b0:	7809      	ldrb	r1, [r1, #0]
 80071b2:	18a2      	adds	r2, r4, r2
 80071b4:	3243      	adds	r2, #67	; 0x43
 80071b6:	3302      	adds	r3, #2
 80071b8:	7011      	strb	r1, [r2, #0]
 80071ba:	e7c1      	b.n	8007140 <_printf_common+0x4c>
 80071bc:	0022      	movs	r2, r4
 80071be:	2301      	movs	r3, #1
 80071c0:	9901      	ldr	r1, [sp, #4]
 80071c2:	9800      	ldr	r0, [sp, #0]
 80071c4:	9e08      	ldr	r6, [sp, #32]
 80071c6:	321a      	adds	r2, #26
 80071c8:	47b0      	blx	r6
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	d0e6      	beq.n	800719c <_printf_common+0xa8>
 80071ce:	3701      	adds	r7, #1
 80071d0:	e7d1      	b.n	8007176 <_printf_common+0x82>
	...

080071d4 <_printf_i>:
 80071d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071d6:	b08b      	sub	sp, #44	; 0x2c
 80071d8:	9206      	str	r2, [sp, #24]
 80071da:	000a      	movs	r2, r1
 80071dc:	3243      	adds	r2, #67	; 0x43
 80071de:	9307      	str	r3, [sp, #28]
 80071e0:	9005      	str	r0, [sp, #20]
 80071e2:	9204      	str	r2, [sp, #16]
 80071e4:	7e0a      	ldrb	r2, [r1, #24]
 80071e6:	000c      	movs	r4, r1
 80071e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071ea:	2a78      	cmp	r2, #120	; 0x78
 80071ec:	d806      	bhi.n	80071fc <_printf_i+0x28>
 80071ee:	2a62      	cmp	r2, #98	; 0x62
 80071f0:	d808      	bhi.n	8007204 <_printf_i+0x30>
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	d100      	bne.n	80071f8 <_printf_i+0x24>
 80071f6:	e0c0      	b.n	800737a <_printf_i+0x1a6>
 80071f8:	2a58      	cmp	r2, #88	; 0x58
 80071fa:	d052      	beq.n	80072a2 <_printf_i+0xce>
 80071fc:	0026      	movs	r6, r4
 80071fe:	3642      	adds	r6, #66	; 0x42
 8007200:	7032      	strb	r2, [r6, #0]
 8007202:	e022      	b.n	800724a <_printf_i+0x76>
 8007204:	0010      	movs	r0, r2
 8007206:	3863      	subs	r0, #99	; 0x63
 8007208:	2815      	cmp	r0, #21
 800720a:	d8f7      	bhi.n	80071fc <_printf_i+0x28>
 800720c:	f7f8 ff7c 	bl	8000108 <__gnu_thumb1_case_shi>
 8007210:	001f0016 	.word	0x001f0016
 8007214:	fff6fff6 	.word	0xfff6fff6
 8007218:	fff6fff6 	.word	0xfff6fff6
 800721c:	fff6001f 	.word	0xfff6001f
 8007220:	fff6fff6 	.word	0xfff6fff6
 8007224:	00a8fff6 	.word	0x00a8fff6
 8007228:	009a0036 	.word	0x009a0036
 800722c:	fff6fff6 	.word	0xfff6fff6
 8007230:	fff600b9 	.word	0xfff600b9
 8007234:	fff60036 	.word	0xfff60036
 8007238:	009efff6 	.word	0x009efff6
 800723c:	0026      	movs	r6, r4
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	3642      	adds	r6, #66	; 0x42
 8007242:	1d11      	adds	r1, r2, #4
 8007244:	6019      	str	r1, [r3, #0]
 8007246:	6813      	ldr	r3, [r2, #0]
 8007248:	7033      	strb	r3, [r6, #0]
 800724a:	2301      	movs	r3, #1
 800724c:	e0a7      	b.n	800739e <_printf_i+0x1ca>
 800724e:	6808      	ldr	r0, [r1, #0]
 8007250:	6819      	ldr	r1, [r3, #0]
 8007252:	1d0a      	adds	r2, r1, #4
 8007254:	0605      	lsls	r5, r0, #24
 8007256:	d50b      	bpl.n	8007270 <_printf_i+0x9c>
 8007258:	680d      	ldr	r5, [r1, #0]
 800725a:	601a      	str	r2, [r3, #0]
 800725c:	2d00      	cmp	r5, #0
 800725e:	da03      	bge.n	8007268 <_printf_i+0x94>
 8007260:	232d      	movs	r3, #45	; 0x2d
 8007262:	9a04      	ldr	r2, [sp, #16]
 8007264:	426d      	negs	r5, r5
 8007266:	7013      	strb	r3, [r2, #0]
 8007268:	4b61      	ldr	r3, [pc, #388]	; (80073f0 <_printf_i+0x21c>)
 800726a:	270a      	movs	r7, #10
 800726c:	9303      	str	r3, [sp, #12]
 800726e:	e032      	b.n	80072d6 <_printf_i+0x102>
 8007270:	680d      	ldr	r5, [r1, #0]
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	0641      	lsls	r1, r0, #25
 8007276:	d5f1      	bpl.n	800725c <_printf_i+0x88>
 8007278:	b22d      	sxth	r5, r5
 800727a:	e7ef      	b.n	800725c <_printf_i+0x88>
 800727c:	680d      	ldr	r5, [r1, #0]
 800727e:	6819      	ldr	r1, [r3, #0]
 8007280:	1d08      	adds	r0, r1, #4
 8007282:	6018      	str	r0, [r3, #0]
 8007284:	062e      	lsls	r6, r5, #24
 8007286:	d501      	bpl.n	800728c <_printf_i+0xb8>
 8007288:	680d      	ldr	r5, [r1, #0]
 800728a:	e003      	b.n	8007294 <_printf_i+0xc0>
 800728c:	066d      	lsls	r5, r5, #25
 800728e:	d5fb      	bpl.n	8007288 <_printf_i+0xb4>
 8007290:	680d      	ldr	r5, [r1, #0]
 8007292:	b2ad      	uxth	r5, r5
 8007294:	4b56      	ldr	r3, [pc, #344]	; (80073f0 <_printf_i+0x21c>)
 8007296:	270a      	movs	r7, #10
 8007298:	9303      	str	r3, [sp, #12]
 800729a:	2a6f      	cmp	r2, #111	; 0x6f
 800729c:	d117      	bne.n	80072ce <_printf_i+0xfa>
 800729e:	2708      	movs	r7, #8
 80072a0:	e015      	b.n	80072ce <_printf_i+0xfa>
 80072a2:	3145      	adds	r1, #69	; 0x45
 80072a4:	700a      	strb	r2, [r1, #0]
 80072a6:	4a52      	ldr	r2, [pc, #328]	; (80073f0 <_printf_i+0x21c>)
 80072a8:	9203      	str	r2, [sp, #12]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	6821      	ldr	r1, [r4, #0]
 80072ae:	ca20      	ldmia	r2!, {r5}
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	0608      	lsls	r0, r1, #24
 80072b4:	d550      	bpl.n	8007358 <_printf_i+0x184>
 80072b6:	07cb      	lsls	r3, r1, #31
 80072b8:	d502      	bpl.n	80072c0 <_printf_i+0xec>
 80072ba:	2320      	movs	r3, #32
 80072bc:	4319      	orrs	r1, r3
 80072be:	6021      	str	r1, [r4, #0]
 80072c0:	2710      	movs	r7, #16
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	d103      	bne.n	80072ce <_printf_i+0xfa>
 80072c6:	2320      	movs	r3, #32
 80072c8:	6822      	ldr	r2, [r4, #0]
 80072ca:	439a      	bics	r2, r3
 80072cc:	6022      	str	r2, [r4, #0]
 80072ce:	0023      	movs	r3, r4
 80072d0:	2200      	movs	r2, #0
 80072d2:	3343      	adds	r3, #67	; 0x43
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	6863      	ldr	r3, [r4, #4]
 80072d8:	60a3      	str	r3, [r4, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	db03      	blt.n	80072e6 <_printf_i+0x112>
 80072de:	2204      	movs	r2, #4
 80072e0:	6821      	ldr	r1, [r4, #0]
 80072e2:	4391      	bics	r1, r2
 80072e4:	6021      	str	r1, [r4, #0]
 80072e6:	2d00      	cmp	r5, #0
 80072e8:	d102      	bne.n	80072f0 <_printf_i+0x11c>
 80072ea:	9e04      	ldr	r6, [sp, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00c      	beq.n	800730a <_printf_i+0x136>
 80072f0:	9e04      	ldr	r6, [sp, #16]
 80072f2:	0028      	movs	r0, r5
 80072f4:	0039      	movs	r1, r7
 80072f6:	f7f8 ff97 	bl	8000228 <__aeabi_uidivmod>
 80072fa:	9b03      	ldr	r3, [sp, #12]
 80072fc:	3e01      	subs	r6, #1
 80072fe:	5c5b      	ldrb	r3, [r3, r1]
 8007300:	7033      	strb	r3, [r6, #0]
 8007302:	002b      	movs	r3, r5
 8007304:	0005      	movs	r5, r0
 8007306:	429f      	cmp	r7, r3
 8007308:	d9f3      	bls.n	80072f2 <_printf_i+0x11e>
 800730a:	2f08      	cmp	r7, #8
 800730c:	d109      	bne.n	8007322 <_printf_i+0x14e>
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	07db      	lsls	r3, r3, #31
 8007312:	d506      	bpl.n	8007322 <_printf_i+0x14e>
 8007314:	6863      	ldr	r3, [r4, #4]
 8007316:	6922      	ldr	r2, [r4, #16]
 8007318:	4293      	cmp	r3, r2
 800731a:	dc02      	bgt.n	8007322 <_printf_i+0x14e>
 800731c:	2330      	movs	r3, #48	; 0x30
 800731e:	3e01      	subs	r6, #1
 8007320:	7033      	strb	r3, [r6, #0]
 8007322:	9b04      	ldr	r3, [sp, #16]
 8007324:	1b9b      	subs	r3, r3, r6
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	9b07      	ldr	r3, [sp, #28]
 800732a:	0021      	movs	r1, r4
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	9805      	ldr	r0, [sp, #20]
 8007330:	9b06      	ldr	r3, [sp, #24]
 8007332:	aa09      	add	r2, sp, #36	; 0x24
 8007334:	f7ff fede 	bl	80070f4 <_printf_common>
 8007338:	1c43      	adds	r3, r0, #1
 800733a:	d135      	bne.n	80073a8 <_printf_i+0x1d4>
 800733c:	2001      	movs	r0, #1
 800733e:	4240      	negs	r0, r0
 8007340:	b00b      	add	sp, #44	; 0x2c
 8007342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007344:	2220      	movs	r2, #32
 8007346:	6809      	ldr	r1, [r1, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	6022      	str	r2, [r4, #0]
 800734c:	0022      	movs	r2, r4
 800734e:	2178      	movs	r1, #120	; 0x78
 8007350:	3245      	adds	r2, #69	; 0x45
 8007352:	7011      	strb	r1, [r2, #0]
 8007354:	4a27      	ldr	r2, [pc, #156]	; (80073f4 <_printf_i+0x220>)
 8007356:	e7a7      	b.n	80072a8 <_printf_i+0xd4>
 8007358:	0648      	lsls	r0, r1, #25
 800735a:	d5ac      	bpl.n	80072b6 <_printf_i+0xe2>
 800735c:	b2ad      	uxth	r5, r5
 800735e:	e7aa      	b.n	80072b6 <_printf_i+0xe2>
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	680d      	ldr	r5, [r1, #0]
 8007364:	1d10      	adds	r0, r2, #4
 8007366:	6949      	ldr	r1, [r1, #20]
 8007368:	6018      	str	r0, [r3, #0]
 800736a:	6813      	ldr	r3, [r2, #0]
 800736c:	062e      	lsls	r6, r5, #24
 800736e:	d501      	bpl.n	8007374 <_printf_i+0x1a0>
 8007370:	6019      	str	r1, [r3, #0]
 8007372:	e002      	b.n	800737a <_printf_i+0x1a6>
 8007374:	066d      	lsls	r5, r5, #25
 8007376:	d5fb      	bpl.n	8007370 <_printf_i+0x19c>
 8007378:	8019      	strh	r1, [r3, #0]
 800737a:	2300      	movs	r3, #0
 800737c:	9e04      	ldr	r6, [sp, #16]
 800737e:	6123      	str	r3, [r4, #16]
 8007380:	e7d2      	b.n	8007328 <_printf_i+0x154>
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	1d11      	adds	r1, r2, #4
 8007386:	6019      	str	r1, [r3, #0]
 8007388:	6816      	ldr	r6, [r2, #0]
 800738a:	2100      	movs	r1, #0
 800738c:	0030      	movs	r0, r6
 800738e:	6862      	ldr	r2, [r4, #4]
 8007390:	f000 f8ee 	bl	8007570 <memchr>
 8007394:	2800      	cmp	r0, #0
 8007396:	d001      	beq.n	800739c <_printf_i+0x1c8>
 8007398:	1b80      	subs	r0, r0, r6
 800739a:	6060      	str	r0, [r4, #4]
 800739c:	6863      	ldr	r3, [r4, #4]
 800739e:	6123      	str	r3, [r4, #16]
 80073a0:	2300      	movs	r3, #0
 80073a2:	9a04      	ldr	r2, [sp, #16]
 80073a4:	7013      	strb	r3, [r2, #0]
 80073a6:	e7bf      	b.n	8007328 <_printf_i+0x154>
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	0032      	movs	r2, r6
 80073ac:	9906      	ldr	r1, [sp, #24]
 80073ae:	9805      	ldr	r0, [sp, #20]
 80073b0:	9d07      	ldr	r5, [sp, #28]
 80073b2:	47a8      	blx	r5
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d0c1      	beq.n	800733c <_printf_i+0x168>
 80073b8:	6823      	ldr	r3, [r4, #0]
 80073ba:	079b      	lsls	r3, r3, #30
 80073bc:	d415      	bmi.n	80073ea <_printf_i+0x216>
 80073be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c0:	68e0      	ldr	r0, [r4, #12]
 80073c2:	4298      	cmp	r0, r3
 80073c4:	dabc      	bge.n	8007340 <_printf_i+0x16c>
 80073c6:	0018      	movs	r0, r3
 80073c8:	e7ba      	b.n	8007340 <_printf_i+0x16c>
 80073ca:	0022      	movs	r2, r4
 80073cc:	2301      	movs	r3, #1
 80073ce:	9906      	ldr	r1, [sp, #24]
 80073d0:	9805      	ldr	r0, [sp, #20]
 80073d2:	9e07      	ldr	r6, [sp, #28]
 80073d4:	3219      	adds	r2, #25
 80073d6:	47b0      	blx	r6
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d0af      	beq.n	800733c <_printf_i+0x168>
 80073dc:	3501      	adds	r5, #1
 80073de:	68e3      	ldr	r3, [r4, #12]
 80073e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073e2:	1a9b      	subs	r3, r3, r2
 80073e4:	42ab      	cmp	r3, r5
 80073e6:	dcf0      	bgt.n	80073ca <_printf_i+0x1f6>
 80073e8:	e7e9      	b.n	80073be <_printf_i+0x1ea>
 80073ea:	2500      	movs	r5, #0
 80073ec:	e7f7      	b.n	80073de <_printf_i+0x20a>
 80073ee:	46c0      	nop			; (mov r8, r8)
 80073f0:	08007a75 	.word	0x08007a75
 80073f4:	08007a86 	.word	0x08007a86

080073f8 <_sbrk_r>:
 80073f8:	2300      	movs	r3, #0
 80073fa:	b570      	push	{r4, r5, r6, lr}
 80073fc:	4d06      	ldr	r5, [pc, #24]	; (8007418 <_sbrk_r+0x20>)
 80073fe:	0004      	movs	r4, r0
 8007400:	0008      	movs	r0, r1
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	f7fc fdc8 	bl	8003f98 <_sbrk>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d103      	bne.n	8007414 <_sbrk_r+0x1c>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d000      	beq.n	8007414 <_sbrk_r+0x1c>
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	bd70      	pop	{r4, r5, r6, pc}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	20000b30 	.word	0x20000b30

0800741c <__sread>:
 800741c:	b570      	push	{r4, r5, r6, lr}
 800741e:	000c      	movs	r4, r1
 8007420:	250e      	movs	r5, #14
 8007422:	5f49      	ldrsh	r1, [r1, r5]
 8007424:	f000 f8c0 	bl	80075a8 <_read_r>
 8007428:	2800      	cmp	r0, #0
 800742a:	db03      	blt.n	8007434 <__sread+0x18>
 800742c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800742e:	181b      	adds	r3, r3, r0
 8007430:	6563      	str	r3, [r4, #84]	; 0x54
 8007432:	bd70      	pop	{r4, r5, r6, pc}
 8007434:	89a3      	ldrh	r3, [r4, #12]
 8007436:	4a02      	ldr	r2, [pc, #8]	; (8007440 <__sread+0x24>)
 8007438:	4013      	ands	r3, r2
 800743a:	81a3      	strh	r3, [r4, #12]
 800743c:	e7f9      	b.n	8007432 <__sread+0x16>
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	ffffefff 	.word	0xffffefff

08007444 <__swrite>:
 8007444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007446:	001f      	movs	r7, r3
 8007448:	898b      	ldrh	r3, [r1, #12]
 800744a:	0005      	movs	r5, r0
 800744c:	000c      	movs	r4, r1
 800744e:	0016      	movs	r6, r2
 8007450:	05db      	lsls	r3, r3, #23
 8007452:	d505      	bpl.n	8007460 <__swrite+0x1c>
 8007454:	230e      	movs	r3, #14
 8007456:	5ec9      	ldrsh	r1, [r1, r3]
 8007458:	2200      	movs	r2, #0
 800745a:	2302      	movs	r3, #2
 800745c:	f000 f874 	bl	8007548 <_lseek_r>
 8007460:	89a3      	ldrh	r3, [r4, #12]
 8007462:	4a05      	ldr	r2, [pc, #20]	; (8007478 <__swrite+0x34>)
 8007464:	0028      	movs	r0, r5
 8007466:	4013      	ands	r3, r2
 8007468:	81a3      	strh	r3, [r4, #12]
 800746a:	0032      	movs	r2, r6
 800746c:	230e      	movs	r3, #14
 800746e:	5ee1      	ldrsh	r1, [r4, r3]
 8007470:	003b      	movs	r3, r7
 8007472:	f000 f81f 	bl	80074b4 <_write_r>
 8007476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007478:	ffffefff 	.word	0xffffefff

0800747c <__sseek>:
 800747c:	b570      	push	{r4, r5, r6, lr}
 800747e:	000c      	movs	r4, r1
 8007480:	250e      	movs	r5, #14
 8007482:	5f49      	ldrsh	r1, [r1, r5]
 8007484:	f000 f860 	bl	8007548 <_lseek_r>
 8007488:	89a3      	ldrh	r3, [r4, #12]
 800748a:	1c42      	adds	r2, r0, #1
 800748c:	d103      	bne.n	8007496 <__sseek+0x1a>
 800748e:	4a05      	ldr	r2, [pc, #20]	; (80074a4 <__sseek+0x28>)
 8007490:	4013      	ands	r3, r2
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	bd70      	pop	{r4, r5, r6, pc}
 8007496:	2280      	movs	r2, #128	; 0x80
 8007498:	0152      	lsls	r2, r2, #5
 800749a:	4313      	orrs	r3, r2
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	6560      	str	r0, [r4, #84]	; 0x54
 80074a0:	e7f8      	b.n	8007494 <__sseek+0x18>
 80074a2:	46c0      	nop			; (mov r8, r8)
 80074a4:	ffffefff 	.word	0xffffefff

080074a8 <__sclose>:
 80074a8:	b510      	push	{r4, lr}
 80074aa:	230e      	movs	r3, #14
 80074ac:	5ec9      	ldrsh	r1, [r1, r3]
 80074ae:	f000 f815 	bl	80074dc <_close_r>
 80074b2:	bd10      	pop	{r4, pc}

080074b4 <_write_r>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	0004      	movs	r4, r0
 80074b8:	0008      	movs	r0, r1
 80074ba:	0011      	movs	r1, r2
 80074bc:	001a      	movs	r2, r3
 80074be:	2300      	movs	r3, #0
 80074c0:	4d05      	ldr	r5, [pc, #20]	; (80074d8 <_write_r+0x24>)
 80074c2:	602b      	str	r3, [r5, #0]
 80074c4:	f7fc fd20 	bl	8003f08 <_write>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d103      	bne.n	80074d4 <_write_r+0x20>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d000      	beq.n	80074d4 <_write_r+0x20>
 80074d2:	6023      	str	r3, [r4, #0]
 80074d4:	bd70      	pop	{r4, r5, r6, pc}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	20000b30 	.word	0x20000b30

080074dc <_close_r>:
 80074dc:	2300      	movs	r3, #0
 80074de:	b570      	push	{r4, r5, r6, lr}
 80074e0:	4d06      	ldr	r5, [pc, #24]	; (80074fc <_close_r+0x20>)
 80074e2:	0004      	movs	r4, r0
 80074e4:	0008      	movs	r0, r1
 80074e6:	602b      	str	r3, [r5, #0]
 80074e8:	f7fc fd2a 	bl	8003f40 <_close>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d103      	bne.n	80074f8 <_close_r+0x1c>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d000      	beq.n	80074f8 <_close_r+0x1c>
 80074f6:	6023      	str	r3, [r4, #0]
 80074f8:	bd70      	pop	{r4, r5, r6, pc}
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	20000b30 	.word	0x20000b30

08007500 <_fstat_r>:
 8007500:	2300      	movs	r3, #0
 8007502:	b570      	push	{r4, r5, r6, lr}
 8007504:	4d06      	ldr	r5, [pc, #24]	; (8007520 <_fstat_r+0x20>)
 8007506:	0004      	movs	r4, r0
 8007508:	0008      	movs	r0, r1
 800750a:	0011      	movs	r1, r2
 800750c:	602b      	str	r3, [r5, #0]
 800750e:	f7fc fd21 	bl	8003f54 <_fstat>
 8007512:	1c43      	adds	r3, r0, #1
 8007514:	d103      	bne.n	800751e <_fstat_r+0x1e>
 8007516:	682b      	ldr	r3, [r5, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d000      	beq.n	800751e <_fstat_r+0x1e>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	20000b30 	.word	0x20000b30

08007524 <_isatty_r>:
 8007524:	2300      	movs	r3, #0
 8007526:	b570      	push	{r4, r5, r6, lr}
 8007528:	4d06      	ldr	r5, [pc, #24]	; (8007544 <_isatty_r+0x20>)
 800752a:	0004      	movs	r4, r0
 800752c:	0008      	movs	r0, r1
 800752e:	602b      	str	r3, [r5, #0]
 8007530:	f7fc fd1e 	bl	8003f70 <_isatty>
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	d103      	bne.n	8007540 <_isatty_r+0x1c>
 8007538:	682b      	ldr	r3, [r5, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d000      	beq.n	8007540 <_isatty_r+0x1c>
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	bd70      	pop	{r4, r5, r6, pc}
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	20000b30 	.word	0x20000b30

08007548 <_lseek_r>:
 8007548:	b570      	push	{r4, r5, r6, lr}
 800754a:	0004      	movs	r4, r0
 800754c:	0008      	movs	r0, r1
 800754e:	0011      	movs	r1, r2
 8007550:	001a      	movs	r2, r3
 8007552:	2300      	movs	r3, #0
 8007554:	4d05      	ldr	r5, [pc, #20]	; (800756c <_lseek_r+0x24>)
 8007556:	602b      	str	r3, [r5, #0]
 8007558:	f7fc fd13 	bl	8003f82 <_lseek>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d103      	bne.n	8007568 <_lseek_r+0x20>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d000      	beq.n	8007568 <_lseek_r+0x20>
 8007566:	6023      	str	r3, [r4, #0]
 8007568:	bd70      	pop	{r4, r5, r6, pc}
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	20000b30 	.word	0x20000b30

08007570 <memchr>:
 8007570:	b2c9      	uxtb	r1, r1
 8007572:	1882      	adds	r2, r0, r2
 8007574:	4290      	cmp	r0, r2
 8007576:	d101      	bne.n	800757c <memchr+0xc>
 8007578:	2000      	movs	r0, #0
 800757a:	4770      	bx	lr
 800757c:	7803      	ldrb	r3, [r0, #0]
 800757e:	428b      	cmp	r3, r1
 8007580:	d0fb      	beq.n	800757a <memchr+0xa>
 8007582:	3001      	adds	r0, #1
 8007584:	e7f6      	b.n	8007574 <memchr+0x4>
	...

08007588 <__malloc_lock>:
 8007588:	b510      	push	{r4, lr}
 800758a:	4802      	ldr	r0, [pc, #8]	; (8007594 <__malloc_lock+0xc>)
 800758c:	f7ff fb39 	bl	8006c02 <__retarget_lock_acquire_recursive>
 8007590:	bd10      	pop	{r4, pc}
 8007592:	46c0      	nop			; (mov r8, r8)
 8007594:	20000b28 	.word	0x20000b28

08007598 <__malloc_unlock>:
 8007598:	b510      	push	{r4, lr}
 800759a:	4802      	ldr	r0, [pc, #8]	; (80075a4 <__malloc_unlock+0xc>)
 800759c:	f7ff fb32 	bl	8006c04 <__retarget_lock_release_recursive>
 80075a0:	bd10      	pop	{r4, pc}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	20000b28 	.word	0x20000b28

080075a8 <_read_r>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	0004      	movs	r4, r0
 80075ac:	0008      	movs	r0, r1
 80075ae:	0011      	movs	r1, r2
 80075b0:	001a      	movs	r2, r3
 80075b2:	2300      	movs	r3, #0
 80075b4:	4d05      	ldr	r5, [pc, #20]	; (80075cc <_read_r+0x24>)
 80075b6:	602b      	str	r3, [r5, #0]
 80075b8:	f7fc fc89 	bl	8003ece <_read>
 80075bc:	1c43      	adds	r3, r0, #1
 80075be:	d103      	bne.n	80075c8 <_read_r+0x20>
 80075c0:	682b      	ldr	r3, [r5, #0]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d000      	beq.n	80075c8 <_read_r+0x20>
 80075c6:	6023      	str	r3, [r4, #0]
 80075c8:	bd70      	pop	{r4, r5, r6, pc}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	20000b30 	.word	0x20000b30

080075d0 <sqrt>:
 80075d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d2:	0004      	movs	r4, r0
 80075d4:	000d      	movs	r5, r1
 80075d6:	f000 f829 	bl	800762c <__ieee754_sqrt>
 80075da:	4b13      	ldr	r3, [pc, #76]	; (8007628 <sqrt+0x58>)
 80075dc:	0006      	movs	r6, r0
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	000f      	movs	r7, r1
 80075e2:	b25b      	sxtb	r3, r3
 80075e4:	3301      	adds	r3, #1
 80075e6:	d01b      	beq.n	8007620 <sqrt+0x50>
 80075e8:	0022      	movs	r2, r4
 80075ea:	002b      	movs	r3, r5
 80075ec:	0020      	movs	r0, r4
 80075ee:	0029      	movs	r1, r5
 80075f0:	f7fb fa6e 	bl	8002ad0 <__aeabi_dcmpun>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	d113      	bne.n	8007620 <sqrt+0x50>
 80075f8:	2200      	movs	r2, #0
 80075fa:	2300      	movs	r3, #0
 80075fc:	0020      	movs	r0, r4
 80075fe:	0029      	movs	r1, r5
 8007600:	f7f8 fe2e 	bl	8000260 <__aeabi_dcmplt>
 8007604:	2800      	cmp	r0, #0
 8007606:	d00b      	beq.n	8007620 <sqrt+0x50>
 8007608:	f7fe ff96 	bl	8006538 <__errno>
 800760c:	2321      	movs	r3, #33	; 0x21
 800760e:	2200      	movs	r2, #0
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	2300      	movs	r3, #0
 8007614:	0010      	movs	r0, r2
 8007616:	0019      	movs	r1, r3
 8007618:	f7fa f856 	bl	80016c8 <__aeabi_ddiv>
 800761c:	0006      	movs	r6, r0
 800761e:	000f      	movs	r7, r1
 8007620:	0030      	movs	r0, r6
 8007622:	0039      	movs	r1, r7
 8007624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007626:	46c0      	nop			; (mov r8, r8)
 8007628:	20000080 	.word	0x20000080

0800762c <__ieee754_sqrt>:
 800762c:	4b56      	ldr	r3, [pc, #344]	; (8007788 <__ieee754_sqrt+0x15c>)
 800762e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007630:	0002      	movs	r2, r0
 8007632:	0005      	movs	r5, r0
 8007634:	0018      	movs	r0, r3
 8007636:	000c      	movs	r4, r1
 8007638:	b085      	sub	sp, #20
 800763a:	4008      	ands	r0, r1
 800763c:	4298      	cmp	r0, r3
 800763e:	d10f      	bne.n	8007660 <__ieee754_sqrt+0x34>
 8007640:	000b      	movs	r3, r1
 8007642:	0028      	movs	r0, r5
 8007644:	f7fa fc46 	bl	8001ed4 <__aeabi_dmul>
 8007648:	0002      	movs	r2, r0
 800764a:	000b      	movs	r3, r1
 800764c:	0028      	movs	r0, r5
 800764e:	0021      	movs	r1, r4
 8007650:	f7f9 fcd0 	bl	8000ff4 <__aeabi_dadd>
 8007654:	0005      	movs	r5, r0
 8007656:	000c      	movs	r4, r1
 8007658:	0028      	movs	r0, r5
 800765a:	0021      	movs	r1, r4
 800765c:	b005      	add	sp, #20
 800765e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007660:	2900      	cmp	r1, #0
 8007662:	dc10      	bgt.n	8007686 <__ieee754_sqrt+0x5a>
 8007664:	004b      	lsls	r3, r1, #1
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	432b      	orrs	r3, r5
 800766a:	d0f5      	beq.n	8007658 <__ieee754_sqrt+0x2c>
 800766c:	2000      	movs	r0, #0
 800766e:	4281      	cmp	r1, r0
 8007670:	d100      	bne.n	8007674 <__ieee754_sqrt+0x48>
 8007672:	e080      	b.n	8007776 <__ieee754_sqrt+0x14a>
 8007674:	000b      	movs	r3, r1
 8007676:	0028      	movs	r0, r5
 8007678:	f7fa fe98 	bl	80023ac <__aeabi_dsub>
 800767c:	0002      	movs	r2, r0
 800767e:	000b      	movs	r3, r1
 8007680:	f7fa f822 	bl	80016c8 <__aeabi_ddiv>
 8007684:	e7e6      	b.n	8007654 <__ieee754_sqrt+0x28>
 8007686:	1508      	asrs	r0, r1, #20
 8007688:	d075      	beq.n	8007776 <__ieee754_sqrt+0x14a>
 800768a:	4b40      	ldr	r3, [pc, #256]	; (800778c <__ieee754_sqrt+0x160>)
 800768c:	0309      	lsls	r1, r1, #12
 800768e:	18c4      	adds	r4, r0, r3
 8007690:	2380      	movs	r3, #128	; 0x80
 8007692:	0b09      	lsrs	r1, r1, #12
 8007694:	035b      	lsls	r3, r3, #13
 8007696:	4319      	orrs	r1, r3
 8007698:	07c3      	lsls	r3, r0, #31
 800769a:	d403      	bmi.n	80076a4 <__ieee754_sqrt+0x78>
 800769c:	0fd3      	lsrs	r3, r2, #31
 800769e:	0049      	lsls	r1, r1, #1
 80076a0:	18c9      	adds	r1, r1, r3
 80076a2:	0052      	lsls	r2, r2, #1
 80076a4:	1063      	asrs	r3, r4, #1
 80076a6:	2400      	movs	r4, #0
 80076a8:	0049      	lsls	r1, r1, #1
 80076aa:	9303      	str	r3, [sp, #12]
 80076ac:	0fd3      	lsrs	r3, r2, #31
 80076ae:	18cb      	adds	r3, r1, r3
 80076b0:	2180      	movs	r1, #128	; 0x80
 80076b2:	2516      	movs	r5, #22
 80076b4:	0020      	movs	r0, r4
 80076b6:	0052      	lsls	r2, r2, #1
 80076b8:	0389      	lsls	r1, r1, #14
 80076ba:	1846      	adds	r6, r0, r1
 80076bc:	429e      	cmp	r6, r3
 80076be:	dc02      	bgt.n	80076c6 <__ieee754_sqrt+0x9a>
 80076c0:	1870      	adds	r0, r6, r1
 80076c2:	1b9b      	subs	r3, r3, r6
 80076c4:	1864      	adds	r4, r4, r1
 80076c6:	0fd6      	lsrs	r6, r2, #31
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	3d01      	subs	r5, #1
 80076cc:	18f3      	adds	r3, r6, r3
 80076ce:	0052      	lsls	r2, r2, #1
 80076d0:	0849      	lsrs	r1, r1, #1
 80076d2:	2d00      	cmp	r5, #0
 80076d4:	d1f1      	bne.n	80076ba <__ieee754_sqrt+0x8e>
 80076d6:	2620      	movs	r6, #32
 80076d8:	2780      	movs	r7, #128	; 0x80
 80076da:	0029      	movs	r1, r5
 80076dc:	9601      	str	r6, [sp, #4]
 80076de:	063f      	lsls	r7, r7, #24
 80076e0:	197e      	adds	r6, r7, r5
 80076e2:	46b4      	mov	ip, r6
 80076e4:	4283      	cmp	r3, r0
 80076e6:	dc02      	bgt.n	80076ee <__ieee754_sqrt+0xc2>
 80076e8:	d114      	bne.n	8007714 <__ieee754_sqrt+0xe8>
 80076ea:	4296      	cmp	r6, r2
 80076ec:	d812      	bhi.n	8007714 <__ieee754_sqrt+0xe8>
 80076ee:	4665      	mov	r5, ip
 80076f0:	4666      	mov	r6, ip
 80076f2:	19ed      	adds	r5, r5, r7
 80076f4:	9002      	str	r0, [sp, #8]
 80076f6:	2e00      	cmp	r6, #0
 80076f8:	da03      	bge.n	8007702 <__ieee754_sqrt+0xd6>
 80076fa:	43ee      	mvns	r6, r5
 80076fc:	0ff6      	lsrs	r6, r6, #31
 80076fe:	1986      	adds	r6, r0, r6
 8007700:	9602      	str	r6, [sp, #8]
 8007702:	1a1b      	subs	r3, r3, r0
 8007704:	4562      	cmp	r2, ip
 8007706:	4180      	sbcs	r0, r0
 8007708:	4240      	negs	r0, r0
 800770a:	1a1b      	subs	r3, r3, r0
 800770c:	4660      	mov	r0, ip
 800770e:	1a12      	subs	r2, r2, r0
 8007710:	9802      	ldr	r0, [sp, #8]
 8007712:	19c9      	adds	r1, r1, r7
 8007714:	0fd6      	lsrs	r6, r2, #31
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	18f3      	adds	r3, r6, r3
 800771a:	9e01      	ldr	r6, [sp, #4]
 800771c:	0052      	lsls	r2, r2, #1
 800771e:	3e01      	subs	r6, #1
 8007720:	087f      	lsrs	r7, r7, #1
 8007722:	9601      	str	r6, [sp, #4]
 8007724:	2e00      	cmp	r6, #0
 8007726:	d1db      	bne.n	80076e0 <__ieee754_sqrt+0xb4>
 8007728:	4313      	orrs	r3, r2
 800772a:	d003      	beq.n	8007734 <__ieee754_sqrt+0x108>
 800772c:	1c4b      	adds	r3, r1, #1
 800772e:	d127      	bne.n	8007780 <__ieee754_sqrt+0x154>
 8007730:	0031      	movs	r1, r6
 8007732:	3401      	adds	r4, #1
 8007734:	4b16      	ldr	r3, [pc, #88]	; (8007790 <__ieee754_sqrt+0x164>)
 8007736:	1060      	asrs	r0, r4, #1
 8007738:	18c0      	adds	r0, r0, r3
 800773a:	0849      	lsrs	r1, r1, #1
 800773c:	07e3      	lsls	r3, r4, #31
 800773e:	d502      	bpl.n	8007746 <__ieee754_sqrt+0x11a>
 8007740:	2380      	movs	r3, #128	; 0x80
 8007742:	061b      	lsls	r3, r3, #24
 8007744:	4319      	orrs	r1, r3
 8007746:	9b03      	ldr	r3, [sp, #12]
 8007748:	000d      	movs	r5, r1
 800774a:	051c      	lsls	r4, r3, #20
 800774c:	1823      	adds	r3, r4, r0
 800774e:	001c      	movs	r4, r3
 8007750:	e782      	b.n	8007658 <__ieee754_sqrt+0x2c>
 8007752:	0ad1      	lsrs	r1, r2, #11
 8007754:	3b15      	subs	r3, #21
 8007756:	0552      	lsls	r2, r2, #21
 8007758:	2900      	cmp	r1, #0
 800775a:	d0fa      	beq.n	8007752 <__ieee754_sqrt+0x126>
 800775c:	2480      	movs	r4, #128	; 0x80
 800775e:	0364      	lsls	r4, r4, #13
 8007760:	4221      	tst	r1, r4
 8007762:	d00a      	beq.n	800777a <__ieee754_sqrt+0x14e>
 8007764:	2420      	movs	r4, #32
 8007766:	0016      	movs	r6, r2
 8007768:	1a24      	subs	r4, r4, r0
 800776a:	40e6      	lsrs	r6, r4
 800776c:	1e45      	subs	r5, r0, #1
 800776e:	4082      	lsls	r2, r0
 8007770:	4331      	orrs	r1, r6
 8007772:	1b58      	subs	r0, r3, r5
 8007774:	e789      	b.n	800768a <__ieee754_sqrt+0x5e>
 8007776:	2300      	movs	r3, #0
 8007778:	e7ee      	b.n	8007758 <__ieee754_sqrt+0x12c>
 800777a:	0049      	lsls	r1, r1, #1
 800777c:	3001      	adds	r0, #1
 800777e:	e7ef      	b.n	8007760 <__ieee754_sqrt+0x134>
 8007780:	2301      	movs	r3, #1
 8007782:	3101      	adds	r1, #1
 8007784:	4399      	bics	r1, r3
 8007786:	e7d5      	b.n	8007734 <__ieee754_sqrt+0x108>
 8007788:	7ff00000 	.word	0x7ff00000
 800778c:	fffffc01 	.word	0xfffffc01
 8007790:	3fe00000 	.word	0x3fe00000

08007794 <_init>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800779a:	bc08      	pop	{r3}
 800779c:	469e      	mov	lr, r3
 800779e:	4770      	bx	lr

080077a0 <_fini>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	46c0      	nop			; (mov r8, r8)
 80077a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a6:	bc08      	pop	{r3}
 80077a8:	469e      	mov	lr, r3
 80077aa:	4770      	bx	lr
